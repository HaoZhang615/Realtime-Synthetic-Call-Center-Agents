{
  "$schema": "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "metadata": {
    "_generator": {
      "name": "bicep",
      "version": "0.36.177.2456",
      "templateHash": "641789829376064378"
    }
  },
  "parameters": {
    "environmentName": {
      "type": "string",
      "minLength": 1,
      "maxLength": 64,
      "metadata": {
        "description": "Name of the the environment which is used to generate a short unique hash used in all resources."
      }
    },
    "location": {
      "type": "string",
      "allowedValues": [
        "eastus2",
        "swedencentral"
      ],
      "minLength": 1,
      "metadata": {
        "description": "Primary location for all resources (filtered on available regions for Azure Open AI Service)."
      }
    },
    "searchServiceLocation": {
      "type": "string",
      "defaultValue": "eastus"
    },
    "appExists": {
      "type": "bool"
    },
    "runningOnGh": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Whether the deployment is running on GitHub Actions"
      }
    },
    "runningOnAdo": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Whether the deployment is running on Azure DevOps Pipeline"
      }
    },
    "enableZeroTrust": {
      "type": "bool",
      "metadata": {
        "description": "Deploy with Zero Trust architecture (private networking, VNet integration, private endpoints)"
      }
    },
    "principalId": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Id of the user or app to assign application roles"
      }
    },
    "openAiRealtimeName": {
      "type": "string",
      "defaultValue": ""
    },
    "openAiRealtimeKey": {
      "type": "string",
      "defaultValue": ""
    },
    "searchIndexName": {
      "type": "string",
      "defaultValue": "documents"
    },
    "resourceGroupName": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Name of the resource group. Leave blank to use default naming conventions."
      }
    },
    "tags": {
      "type": "object",
      "defaultValue": {
        "azd-env-name": "[parameters('environmentName')]"
      },
      "metadata": {
        "description": "Tags to be applied to resources."
      }
    },
    "containerAppsEnvironmentName": {
      "type": "string",
      "defaultValue": "",
      "maxLength": 60,
      "metadata": {
        "description": "Name of the container apps environment to deploy. If not specified, a name will be generated. The maximum length is 60 characters."
      }
    },
    "bingSearchApiKey": {
      "type": "securestring",
      "metadata": {
        "description": "Bing Search API Key"
      }
    },
    "bingSearchApiEndpoint": {
      "type": "string",
      "defaultValue": "https://api.bing.microsoft.com/v7.0/search",
      "metadata": {
        "description": "Bing Search API Endpoint"
      }
    },
    "aoaiGpt4oRealtimeModelName": {
      "type": "string",
      "defaultValue": "gpt-4o-mini-realtime-preview"
    },
    "aoaiGpt4ModelVersion": {
      "type": "string",
      "defaultValue": "2024-12-17"
    },
    "aoaiGpt4oMiniModelName": {
      "type": "string",
      "defaultValue": "gpt-4o-mini"
    },
    "aoaiGpt4oMiniModelVersion": {
      "type": "string",
      "defaultValue": "2024-07-18"
    },
    "embedModel": {
      "type": "string",
      "defaultValue": "text-embedding-3-large"
    },
    "accounts_aiservice_ms_name": {
      "type": "string",
      "defaultValue": ""
    }
  },
  "variables": {
    "$fxv#0": {
      "analysisServicesServers": "as",
      "apiManagementService": "apim-",
      "appConfigurationConfigurationStores": "appcs-",
      "appManagedEnvironments": "cae-",
      "appContainerApps": "ca-",
      "authorizationPolicyDefinitions": "policy-",
      "automationAutomationAccounts": "aa-",
      "blueprintBlueprints": "bp-",
      "blueprintBlueprintsArtifacts": "bpa-",
      "cacheRedis": "redis-",
      "cdnProfiles": "cdnp-",
      "cdnProfilesEndpoints": "cdne-",
      "cognitiveServicesAccounts": "cog-",
      "cognitiveServicesFormRecognizer": "cog-fr-",
      "cognitiveServicesTextAnalytics": "cog-ta-",
      "computeAvailabilitySets": "avail-",
      "computeCloudServices": "cld-",
      "computeDiskEncryptionSets": "des",
      "computeDisks": "disk",
      "computeDisksOs": "osdisk",
      "computeGalleries": "gal",
      "computeSnapshots": "snap-",
      "computeVirtualMachines": "vm",
      "computeVirtualMachineScaleSets": "vmss-",
      "containerInstanceContainerGroups": "ci",
      "containerRegistryRegistries": "cr",
      "containerServiceManagedClusters": "aks-",
      "databricksWorkspaces": "dbw-",
      "dataFactoryFactories": "adf-",
      "dataLakeAnalyticsAccounts": "dla",
      "dataLakeStoreAccounts": "dls",
      "dataMigrationServices": "dms-",
      "dBforMySQLServers": "mysql-",
      "dBforPostgreSQLServers": "psql-",
      "devicesIotHubs": "iot-",
      "devicesProvisioningServices": "provs-",
      "devicesProvisioningServicesCertificates": "pcert-",
      "documentDBDatabaseAccounts": "cosmos-",
      "eventGridDomains": "evgd-",
      "eventGridDomainsTopics": "evgt-",
      "eventGridEventSubscriptions": "evgs-",
      "eventHubNamespaces": "evhns-",
      "eventHubNamespacesEventHubs": "evh-",
      "hdInsightClustersHadoop": "hadoop-",
      "hdInsightClustersHbase": "hbase-",
      "hdInsightClustersKafka": "kafka-",
      "hdInsightClustersMl": "mls-",
      "hdInsightClustersSpark": "spark-",
      "hdInsightClustersStorm": "storm-",
      "hybridComputeMachines": "arcs-",
      "insightsActionGroups": "ag-",
      "insightsComponents": "appi-",
      "keyVaultVaults": "kv-",
      "kubernetesConnectedClusters": "arck",
      "kustoClusters": "dec",
      "kustoClustersDatabases": "dedb",
      "logicIntegrationAccounts": "ia-",
      "logicWorkflows": "logic-",
      "machineLearningServicesWorkspaces": "mlw-",
      "managedIdentityUserAssignedIdentities": "id-",
      "managementManagementGroups": "mg-",
      "migrateAssessmentProjects": "migr-",
      "networkApplicationGateways": "agw-",
      "networkApplicationSecurityGroups": "asg-",
      "networkAzureFirewalls": "afw-",
      "networkBastionHosts": "bas-",
      "networkConnections": "con-",
      "networkDnsZones": "dnsz-",
      "networkExpressRouteCircuits": "erc-",
      "networkFirewallPolicies": "afwp-",
      "networkFirewallPoliciesWebApplication": "waf",
      "networkFirewallPoliciesRuleGroups": "wafrg",
      "networkFrontDoors": "fd-",
      "networkFrontdoorWebApplicationFirewallPolicies": "fdfp-",
      "networkLoadBalancersExternal": "lbe-",
      "networkLoadBalancersInternal": "lbi-",
      "networkLoadBalancersInboundNatRules": "rule-",
      "networkLocalNetworkGateways": "lgw-",
      "networkNatGateways": "ng-",
      "networkNetworkInterfaces": "nic-",
      "networkNetworkSecurityGroups": "nsg-",
      "networkNetworkSecurityGroupsSecurityRules": "nsgsr-",
      "networkNetworkWatchers": "nw-",
      "networkPrivateDnsZones": "pdnsz-",
      "networkPrivateLinkServices": "pl-",
      "networkPublicIPAddresses": "pip-",
      "networkPublicIPPrefixes": "ippre-",
      "networkRouteFilters": "rf-",
      "networkRouteTables": "rt-",
      "networkRouteTablesRoutes": "udr-",
      "networkTrafficManagerProfiles": "traf-",
      "networkVirtualNetworkGateways": "vgw-",
      "networkVirtualNetworks": "vnet-",
      "networkVirtualNetworksSubnets": "snet-",
      "networkVirtualNetworksVirtualNetworkPeerings": "peer-",
      "networkVirtualWans": "vwan-",
      "networkVpnGateways": "vpng-",
      "networkVpnGatewaysVpnConnections": "vcn-",
      "networkVpnGatewaysVpnSites": "vst-",
      "notificationHubsNamespaces": "ntfns-",
      "notificationHubsNamespacesNotificationHubs": "ntf-",
      "operationalInsightsWorkspaces": "log-",
      "portalDashboards": "dash-",
      "powerBIDedicatedCapacities": "pbi-",
      "purviewAccounts": "pview-",
      "privateEndpoints": "pe-",
      "recoveryServicesVaults": "rsv-",
      "resourcesResourceGroups": "rg-",
      "searchSearchServices": "srch-",
      "serviceBusNamespaces": "sb-",
      "serviceBusNamespacesQueues": "sbq-",
      "serviceBusNamespacesTopics": "sbt-",
      "serviceEndPointPolicies": "se-",
      "serviceFabricClusters": "sf-",
      "signalRServiceSignalR": "sigr",
      "sqlManagedInstances": "sqlmi-",
      "sqlServers": "sql-",
      "sqlServersDataWarehouse": "sqldw-",
      "sqlServersDatabases": "sqldb-",
      "sqlServersDatabasesStretch": "sqlstrdb-",
      "storageStorageAccounts": "st",
      "storageStorageAccountsVm": "stvm",
      "storSimpleManagers": "ssimp",
      "streamAnalyticsCluster": "asa-",
      "synapseWorkspaces": "syn",
      "synapseWorkspacesAnalyticsWorkspaces": "synw",
      "synapseWorkspacesSqlPoolsDedicated": "syndp",
      "synapseWorkspacesSqlPoolsSpark": "synsp",
      "timeSeriesInsightsEnvironments": "tsi-",
      "webServerFarms": "plan-",
      "webSitesAppService": "app-",
      "webSitesAppServiceEnvironment": "ase-",
      "webSitesFunctions": "func-",
      "webStaticSites": "stapp-"
    },
    "$fxv#1": {
      "Send_an_email_(V2)": {
        "type": "ApiConnection",
        "inputs": {
          "host": {
            "connection": {
              "name": "@parameters('$connections')['office365']['connectionId']"
            }
          },
          "method": "post",
          "body": {
            "To": "@triggerBody()?['to']",
            "Subject": "@triggerBody()?['subject']",
            "Body": "<p class=\"editor-paragraph\">@{triggerBody()?['body']}</p>",
            "Importance": "Normal"
          },
          "path": "/v2/Mail"
        },
        "runAfter": {}
      }
    },
    "$fxv#2": {
      "When_a_HTTP_request_is_received": {
        "type": "Request",
        "kind": "Http",
        "inputs": {
          "method": "POST",
          "schema": {
            "type": "object",
            "required": [
              "to",
              "subject",
              "body"
            ],
            "properties": {
              "to": {
                "type": "string"
              },
              "subject": {
                "type": "string"
              },
              "body": {
                "type": "string"
              }
            }
          }
        },
        "operationOptions": "EnableSchemaValidation"
      }
    },
    "$fxv#3": {
      "$connections": {
        "defaultValue": {},
        "type": "Object"
      }
    },
    "principalType": "[if(and(empty(parameters('runningOnGh')), empty(parameters('runningOnAdo'))), 'User', 'ServicePrincipal')]",
    "abbrs": "[variables('$fxv#0')]",
    "resourceToken": "[toLower(uniqueString(subscription().id, parameters('location'), parameters('environmentName')))]",
    "_containerAppsEnvironmentName": "[if(not(empty(parameters('containerAppsEnvironmentName'))), parameters('containerAppsEnvironmentName'), take(format('{0}{1}', variables('abbrs').appManagedEnvironments, variables('resourceToken')), 60))]",
    "embeddingDeployment": [
      {
        "name": "[parameters('embedModel')]",
        "model": {
          "format": "OpenAI",
          "name": "[parameters('embedModel')]",
          "version": "1"
        },
        "sku": {
          "name": "Standard",
          "capacity": 50
        }
      }
    ],
    "realtimeDeployment": [
      {
        "name": "[parameters('aoaiGpt4oRealtimeModelName')]",
        "model": {
          "format": "OpenAI",
          "name": "[parameters('aoaiGpt4oRealtimeModelName')]",
          "version": "[parameters('aoaiGpt4ModelVersion')]"
        },
        "sku": {
          "name": "GlobalStandard",
          "capacity": 1
        }
      }
    ],
    "gpt4ominiDeployment": [
      {
        "name": "[parameters('aoaiGpt4oMiniModelName')]",
        "model": {
          "format": "OpenAI",
          "name": "[parameters('aoaiGpt4oMiniModelName')]",
          "version": "[parameters('aoaiGpt4oMiniModelVersion')]"
        },
        "sku": {
          "name": "GlobalStandard",
          "capacity": 50
        }
      }
    ],
    "openAiDeployments": "[concat(variables('realtimeDeployment'), variables('gpt4ominiDeployment'), variables('embeddingDeployment'))]",
    "_accounts_aiservice_ms_name": "[if(not(empty(parameters('accounts_aiservice_ms_name'))), parameters('accounts_aiservice_ms_name'), format('{0}{1}', variables('abbrs').cognitiveServicesAccounts, variables('resourceToken')))]",
    "logAnalyticsName": "[format('{0}{1}', variables('abbrs').operationalInsightsWorkspaces, variables('resourceToken'))]",
    "storageContainerName": "documents"
  },
  "resources": [
    {
      "type": "Microsoft.Resources/resourceGroups",
      "apiVersion": "2021-04-01",
      "name": "[if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), format('{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName')))]",
      "location": "[parameters('location')]",
      "tags": "[parameters('tags')]"
    },
    {
      "condition": "[parameters('enableZeroTrust')]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "vnet",
      "resourceGroup": "[if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), format('{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName')))]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "vnetName": {
            "value": "[format('vnet-{0}', variables('resourceToken'))]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "tags": {
            "value": "[parameters('tags')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.36.177.2456",
              "templateHash": "6733157197372699594"
            }
          },
          "parameters": {
            "vnetName": {
              "type": "string"
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]"
            },
            "addressPrefix": {
              "type": "string",
              "defaultValue": "10.0.0.0/16"
            },
            "backendSubnetPrefix": {
              "type": "string",
              "defaultValue": "10.0.1.0/24"
            },
            "appSubnetPrefix": {
              "type": "string",
              "defaultValue": "10.0.0.0/27"
            },
            "tags": {
              "type": "object",
              "defaultValue": {}
            }
          },
          "resources": [
            {
              "type": "Microsoft.Network/virtualNetworks",
              "apiVersion": "2023-02-01",
              "name": "[parameters('vnetName')]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "properties": {
                "addressSpace": {
                  "addressPrefixes": [
                    "[parameters('addressPrefix')]"
                  ]
                },
                "subnets": [
                  {
                    "name": "backend",
                    "properties": {
                      "addressPrefix": "[parameters('backendSubnetPrefix')]",
                      "privateEndpointNetworkPolicies": "Disabled"
                    }
                  },
                  {
                    "name": "apps",
                    "properties": {
                      "addressPrefix": "[parameters('appSubnetPrefix')]",
                      "delegations": [
                        {
                          "name": "containerapps",
                          "properties": {
                            "serviceName": "Microsoft.App/environments"
                          }
                        }
                      ]
                    }
                  }
                ]
              }
            }
          ],
          "outputs": {
            "vnetId": {
              "type": "string",
              "value": "[resourceId('Microsoft.Network/virtualNetworks', parameters('vnetName'))]"
            },
            "backendSubnetId": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.Network/virtualNetworks', parameters('vnetName')), '2023-02-01').subnets[0].id]"
            },
            "appSubnetId": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.Network/virtualNetworks', parameters('vnetName')), '2023-02-01').subnets[1].id]"
            }
          }
        }
      },
      "dependsOn": [
        "[subscriptionResourceId('Microsoft.Resources/resourceGroups', if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), format('{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName'))))]"
      ]
    },
    {
      "condition": "[not(parameters('enableZeroTrust'))]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "containerAppsEnvironment",
      "resourceGroup": "[if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), format('{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName')))]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "envName": {
            "value": "[variables('_containerAppsEnvironmentName')]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "tags": {
            "value": "[parameters('tags')]"
          },
          "logAnalyticsWorkspaceName": {
            "value": "[format('{0}{1}', variables('abbrs').operationalInsightsWorkspaces, variables('resourceToken'))]"
          },
          "appSubnetId": {
            "value": ""
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.36.177.2456",
              "templateHash": "7233299643461578189"
            }
          },
          "parameters": {
            "envName": {
              "type": "string"
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]"
            },
            "tags": {
              "type": "object",
              "defaultValue": {}
            },
            "logAnalyticsWorkspaceName": {
              "type": "string"
            },
            "appSubnetId": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Subnet resource ID for VNet integration (optional)"
              }
            }
          },
          "resources": [
            {
              "type": "Microsoft.App/managedEnvironments",
              "apiVersion": "2024-03-01",
              "name": "[parameters('envName')]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "properties": {
                "appLogsConfiguration": {
                  "destination": "log-analytics",
                  "logAnalyticsConfiguration": {
                    "customerId": "[reference(resourceId('Microsoft.OperationalInsights/workspaces', parameters('logAnalyticsWorkspaceName')), '2022-10-01').customerId]",
                    "sharedKey": "[listKeys(resourceId('Microsoft.OperationalInsights/workspaces', parameters('logAnalyticsWorkspaceName')), '2022-10-01').primarySharedKey]"
                  }
                },
                "vnetConfiguration": "[if(not(empty(parameters('appSubnetId'))), createObject('infrastructureSubnetId', parameters('appSubnetId')), null())]",
                "workloadProfiles": [
                  {
                    "name": "Consumption",
                    "workloadProfileType": "Consumption"
                  }
                ]
              }
            }
          ],
          "outputs": {
            "name": {
              "type": "string",
              "value": "[parameters('envName')]"
            },
            "id": {
              "type": "string",
              "value": "[resourceId('Microsoft.App/managedEnvironments', parameters('envName'))]"
            },
            "defaultDomain": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.App/managedEnvironments', parameters('envName')), '2024-03-01').defaultDomain]"
            }
          }
        }
      },
      "dependsOn": [
        "[subscriptionResourceId('Microsoft.Resources/resourceGroups', if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), format('{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName'))))]"
      ]
    },
    {
      "condition": "[parameters('enableZeroTrust')]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "containerAppsEnvironmentZeroTrust",
      "resourceGroup": "[if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), format('{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName')))]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "envName": {
            "value": "[variables('_containerAppsEnvironmentName')]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "tags": {
            "value": "[parameters('tags')]"
          },
          "logAnalyticsWorkspaceName": {
            "value": "[format('{0}{1}', variables('abbrs').operationalInsightsWorkspaces, variables('resourceToken'))]"
          },
          "appSubnetId": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), format('{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName')))), 'Microsoft.Resources/deployments', 'vnet'), '2022-09-01').outputs.appSubnetId.value]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.36.177.2456",
              "templateHash": "7233299643461578189"
            }
          },
          "parameters": {
            "envName": {
              "type": "string"
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]"
            },
            "tags": {
              "type": "object",
              "defaultValue": {}
            },
            "logAnalyticsWorkspaceName": {
              "type": "string"
            },
            "appSubnetId": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Subnet resource ID for VNet integration (optional)"
              }
            }
          },
          "resources": [
            {
              "type": "Microsoft.App/managedEnvironments",
              "apiVersion": "2024-03-01",
              "name": "[parameters('envName')]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "properties": {
                "appLogsConfiguration": {
                  "destination": "log-analytics",
                  "logAnalyticsConfiguration": {
                    "customerId": "[reference(resourceId('Microsoft.OperationalInsights/workspaces', parameters('logAnalyticsWorkspaceName')), '2022-10-01').customerId]",
                    "sharedKey": "[listKeys(resourceId('Microsoft.OperationalInsights/workspaces', parameters('logAnalyticsWorkspaceName')), '2022-10-01').primarySharedKey]"
                  }
                },
                "vnetConfiguration": "[if(not(empty(parameters('appSubnetId'))), createObject('infrastructureSubnetId', parameters('appSubnetId')), null())]",
                "workloadProfiles": [
                  {
                    "name": "Consumption",
                    "workloadProfileType": "Consumption"
                  }
                ]
              }
            }
          ],
          "outputs": {
            "name": {
              "type": "string",
              "value": "[parameters('envName')]"
            },
            "id": {
              "type": "string",
              "value": "[resourceId('Microsoft.App/managedEnvironments', parameters('envName'))]"
            },
            "defaultDomain": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.App/managedEnvironments', parameters('envName')), '2024-03-01').defaultDomain]"
            }
          }
        }
      },
      "dependsOn": [
        "[subscriptionResourceId('Microsoft.Resources/resourceGroups', if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), format('{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName'))))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), format('{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName')))), 'Microsoft.Resources/deployments', 'vnet')]"
      ]
    },
    {
      "condition": "[parameters('enableZeroTrust')]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "storage-pe",
      "resourceGroup": "[if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), format('{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName')))]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "name": {
            "value": "[format('storage-pe-{0}', variables('resourceToken'))]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "subnetId": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), format('{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName')))), 'Microsoft.Resources/deployments', 'vnet'), '2022-09-01').outputs.backendSubnetId.value]"
          },
          "groupId": {
            "value": "blob"
          },
          "privateLinkResourceId": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), format('{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName')))), 'Microsoft.Resources/deployments', 'storage'), '2022-09-01').outputs.resourceId.value]"
          },
          "tags": {
            "value": "[parameters('tags')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.36.177.2456",
              "templateHash": "8666289247029825855"
            }
          },
          "parameters": {
            "name": {
              "type": "string"
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]"
            },
            "subnetId": {
              "type": "string"
            },
            "groupId": {
              "type": "string"
            },
            "privateLinkResourceId": {
              "type": "string"
            },
            "tags": {
              "type": "object",
              "defaultValue": {}
            }
          },
          "resources": [
            {
              "type": "Microsoft.Network/privateEndpoints",
              "apiVersion": "2023-02-01",
              "name": "[parameters('name')]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "properties": {
                "subnet": {
                  "id": "[parameters('subnetId')]"
                },
                "privateLinkServiceConnections": [
                  {
                    "name": "[format('{0}-pls', parameters('name'))]",
                    "properties": {
                      "privateLinkServiceId": "[parameters('privateLinkResourceId')]",
                      "groupIds": [
                        "[parameters('groupId')]"
                      ]
                    }
                  }
                ]
              }
            }
          ],
          "outputs": {
            "id": {
              "type": "string",
              "value": "[resourceId('Microsoft.Network/privateEndpoints', parameters('name'))]"
            }
          }
        }
      },
      "dependsOn": [
        "[subscriptionResourceId('Microsoft.Resources/resourceGroups', if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), format('{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName'))))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), format('{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName')))), 'Microsoft.Resources/deployments', 'storage')]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), format('{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName')))), 'Microsoft.Resources/deployments', 'vnet')]"
      ]
    },
    {
      "condition": "[parameters('enableZeroTrust')]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "cosmos-pe",
      "resourceGroup": "[if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), format('{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName')))]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "name": {
            "value": "[format('cosmos-pe-{0}', variables('resourceToken'))]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "subnetId": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), format('{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName')))), 'Microsoft.Resources/deployments', 'vnet'), '2022-09-01').outputs.backendSubnetId.value]"
          },
          "groupId": {
            "value": "Sql"
          },
          "privateLinkResourceId": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), format('{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName')))), 'Microsoft.Resources/deployments', 'cosmosdb'), '2022-09-01').outputs.cosmosDbAccountId.value]"
          },
          "tags": {
            "value": "[parameters('tags')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.36.177.2456",
              "templateHash": "8666289247029825855"
            }
          },
          "parameters": {
            "name": {
              "type": "string"
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]"
            },
            "subnetId": {
              "type": "string"
            },
            "groupId": {
              "type": "string"
            },
            "privateLinkResourceId": {
              "type": "string"
            },
            "tags": {
              "type": "object",
              "defaultValue": {}
            }
          },
          "resources": [
            {
              "type": "Microsoft.Network/privateEndpoints",
              "apiVersion": "2023-02-01",
              "name": "[parameters('name')]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "properties": {
                "subnet": {
                  "id": "[parameters('subnetId')]"
                },
                "privateLinkServiceConnections": [
                  {
                    "name": "[format('{0}-pls', parameters('name'))]",
                    "properties": {
                      "privateLinkServiceId": "[parameters('privateLinkResourceId')]",
                      "groupIds": [
                        "[parameters('groupId')]"
                      ]
                    }
                  }
                ]
              }
            }
          ],
          "outputs": {
            "id": {
              "type": "string",
              "value": "[resourceId('Microsoft.Network/privateEndpoints', parameters('name'))]"
            }
          }
        }
      },
      "dependsOn": [
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), format('{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName')))), 'Microsoft.Resources/deployments', 'cosmosdb')]",
        "[subscriptionResourceId('Microsoft.Resources/resourceGroups', if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), format('{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName'))))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), format('{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName')))), 'Microsoft.Resources/deployments', 'vnet')]"
      ]
    },
    {
      "condition": "[parameters('enableZeroTrust')]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "search-pe",
      "resourceGroup": "[if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), format('{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName')))]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "name": {
            "value": "[format('search-pe-{0}', variables('resourceToken'))]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "subnetId": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), format('{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName')))), 'Microsoft.Resources/deployments', 'vnet'), '2022-09-01').outputs.backendSubnetId.value]"
          },
          "groupId": {
            "value": "searchService"
          },
          "privateLinkResourceId": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), format('{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName')))), 'Microsoft.Resources/deployments', 'search-service'), '2022-09-01').outputs.resourceId.value]"
          },
          "tags": {
            "value": "[parameters('tags')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.36.177.2456",
              "templateHash": "8666289247029825855"
            }
          },
          "parameters": {
            "name": {
              "type": "string"
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]"
            },
            "subnetId": {
              "type": "string"
            },
            "groupId": {
              "type": "string"
            },
            "privateLinkResourceId": {
              "type": "string"
            },
            "tags": {
              "type": "object",
              "defaultValue": {}
            }
          },
          "resources": [
            {
              "type": "Microsoft.Network/privateEndpoints",
              "apiVersion": "2023-02-01",
              "name": "[parameters('name')]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "properties": {
                "subnet": {
                  "id": "[parameters('subnetId')]"
                },
                "privateLinkServiceConnections": [
                  {
                    "name": "[format('{0}-pls', parameters('name'))]",
                    "properties": {
                      "privateLinkServiceId": "[parameters('privateLinkResourceId')]",
                      "groupIds": [
                        "[parameters('groupId')]"
                      ]
                    }
                  }
                ]
              }
            }
          ],
          "outputs": {
            "id": {
              "type": "string",
              "value": "[resourceId('Microsoft.Network/privateEndpoints', parameters('name'))]"
            }
          }
        }
      },
      "dependsOn": [
        "[subscriptionResourceId('Microsoft.Resources/resourceGroups', if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), format('{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName'))))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), format('{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName')))), 'Microsoft.Resources/deployments', 'search-service')]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), format('{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName')))), 'Microsoft.Resources/deployments', 'vnet')]"
      ]
    },
    {
      "condition": "[parameters('enableZeroTrust')]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "keyvault-pe",
      "resourceGroup": "[if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), format('{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName')))]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "name": {
            "value": "[format('keyvault-pe-{0}', variables('resourceToken'))]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "subnetId": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), format('{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName')))), 'Microsoft.Resources/deployments', 'vnet'), '2022-09-01').outputs.backendSubnetId.value]"
          },
          "groupId": {
            "value": "vault"
          },
          "privateLinkResourceId": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), format('{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName')))), 'Microsoft.Resources/deployments', 'keyVault'), '2022-09-01').outputs.resourceId.value]"
          },
          "tags": {
            "value": "[parameters('tags')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.36.177.2456",
              "templateHash": "8666289247029825855"
            }
          },
          "parameters": {
            "name": {
              "type": "string"
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]"
            },
            "subnetId": {
              "type": "string"
            },
            "groupId": {
              "type": "string"
            },
            "privateLinkResourceId": {
              "type": "string"
            },
            "tags": {
              "type": "object",
              "defaultValue": {}
            }
          },
          "resources": [
            {
              "type": "Microsoft.Network/privateEndpoints",
              "apiVersion": "2023-02-01",
              "name": "[parameters('name')]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "properties": {
                "subnet": {
                  "id": "[parameters('subnetId')]"
                },
                "privateLinkServiceConnections": [
                  {
                    "name": "[format('{0}-pls', parameters('name'))]",
                    "properties": {
                      "privateLinkServiceId": "[parameters('privateLinkResourceId')]",
                      "groupIds": [
                        "[parameters('groupId')]"
                      ]
                    }
                  }
                ]
              }
            }
          ],
          "outputs": {
            "id": {
              "type": "string",
              "value": "[resourceId('Microsoft.Network/privateEndpoints', parameters('name'))]"
            }
          }
        }
      },
      "dependsOn": [
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), format('{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName')))), 'Microsoft.Resources/deployments', 'keyVault')]",
        "[subscriptionResourceId('Microsoft.Resources/resourceGroups', if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), format('{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName'))))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), format('{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName')))), 'Microsoft.Resources/deployments', 'vnet')]"
      ]
    },
    {
      "condition": "[parameters('enableZeroTrust')]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "openai-pe",
      "resourceGroup": "[if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), format('{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName')))]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "name": {
            "value": "[format('openai-pe-{0}', variables('resourceToken'))]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "subnetId": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), format('{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName')))), 'Microsoft.Resources/deployments', 'vnet'), '2022-09-01').outputs.backendSubnetId.value]"
          },
          "groupId": {
            "value": "account"
          },
          "privateLinkResourceId": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), format('{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName')))), 'Microsoft.Resources/deployments', 'openai'), '2022-09-01').outputs.resourceId.value]"
          },
          "tags": {
            "value": "[parameters('tags')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.36.177.2456",
              "templateHash": "8666289247029825855"
            }
          },
          "parameters": {
            "name": {
              "type": "string"
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]"
            },
            "subnetId": {
              "type": "string"
            },
            "groupId": {
              "type": "string"
            },
            "privateLinkResourceId": {
              "type": "string"
            },
            "tags": {
              "type": "object",
              "defaultValue": {}
            }
          },
          "resources": [
            {
              "type": "Microsoft.Network/privateEndpoints",
              "apiVersion": "2023-02-01",
              "name": "[parameters('name')]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "properties": {
                "subnet": {
                  "id": "[parameters('subnetId')]"
                },
                "privateLinkServiceConnections": [
                  {
                    "name": "[format('{0}-pls', parameters('name'))]",
                    "properties": {
                      "privateLinkServiceId": "[parameters('privateLinkResourceId')]",
                      "groupIds": [
                        "[parameters('groupId')]"
                      ]
                    }
                  }
                ]
              }
            }
          ],
          "outputs": {
            "id": {
              "type": "string",
              "value": "[resourceId('Microsoft.Network/privateEndpoints', parameters('name'))]"
            }
          }
        }
      },
      "dependsOn": [
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), format('{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName')))), 'Microsoft.Resources/deployments', 'openai')]",
        "[subscriptionResourceId('Microsoft.Resources/resourceGroups', if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), format('{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName'))))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), format('{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName')))), 'Microsoft.Resources/deployments', 'vnet')]"
      ]
    },
    {
      "condition": "[parameters('enableZeroTrust')]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "aiservices-pe",
      "resourceGroup": "[if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), format('{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName')))]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "name": {
            "value": "[format('aiservices-pe-{0}', variables('resourceToken'))]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "subnetId": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), format('{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName')))), 'Microsoft.Resources/deployments', 'vnet'), '2022-09-01').outputs.backendSubnetId.value]"
          },
          "groupId": {
            "value": "account"
          },
          "privateLinkResourceId": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), format('{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName')))), 'Microsoft.Resources/deployments', 'aiserviceaccountDeployment'), '2022-09-01').outputs.resourceId.value]"
          },
          "tags": {
            "value": "[parameters('tags')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.36.177.2456",
              "templateHash": "8666289247029825855"
            }
          },
          "parameters": {
            "name": {
              "type": "string"
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]"
            },
            "subnetId": {
              "type": "string"
            },
            "groupId": {
              "type": "string"
            },
            "privateLinkResourceId": {
              "type": "string"
            },
            "tags": {
              "type": "object",
              "defaultValue": {}
            }
          },
          "resources": [
            {
              "type": "Microsoft.Network/privateEndpoints",
              "apiVersion": "2023-02-01",
              "name": "[parameters('name')]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "properties": {
                "subnet": {
                  "id": "[parameters('subnetId')]"
                },
                "privateLinkServiceConnections": [
                  {
                    "name": "[format('{0}-pls', parameters('name'))]",
                    "properties": {
                      "privateLinkServiceId": "[parameters('privateLinkResourceId')]",
                      "groupIds": [
                        "[parameters('groupId')]"
                      ]
                    }
                  }
                ]
              }
            }
          ],
          "outputs": {
            "id": {
              "type": "string",
              "value": "[resourceId('Microsoft.Network/privateEndpoints', parameters('name'))]"
            }
          }
        }
      },
      "dependsOn": [
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), format('{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName')))), 'Microsoft.Resources/deployments', 'aiserviceaccountDeployment')]",
        "[subscriptionResourceId('Microsoft.Resources/resourceGroups', if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), format('{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName'))))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), format('{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName')))), 'Microsoft.Resources/deployments', 'vnet')]"
      ]
    },
    {
      "condition": "[parameters('enableZeroTrust')]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "cosmos-dns-zone",
      "resourceGroup": "[if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), format('{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName')))]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "privateEndpointId": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), format('{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName')))), 'Microsoft.Resources/deployments', 'cosmos-pe'), '2022-09-01').outputs.id.value]"
          },
          "privateDnsZoneName": {
            "value": "privatelink.documents.azure.com"
          },
          "vnetId": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), format('{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName')))), 'Microsoft.Resources/deployments', 'vnet'), '2022-09-01').outputs.vnetId.value]"
          },
          "tags": {
            "value": "[parameters('tags')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.36.177.2456",
              "templateHash": "7506320509018848556"
            }
          },
          "parameters": {
            "privateEndpointId": {
              "type": "string"
            },
            "privateDnsZoneName": {
              "type": "string"
            },
            "vnetId": {
              "type": "string"
            },
            "tags": {
              "type": "object",
              "defaultValue": {}
            }
          },
          "resources": [
            {
              "type": "Microsoft.Network/privateDnsZones",
              "apiVersion": "2020-06-01",
              "name": "[parameters('privateDnsZoneName')]",
              "location": "global",
              "tags": "[parameters('tags')]"
            },
            {
              "type": "Microsoft.Network/privateDnsZones/virtualNetworkLinks",
              "apiVersion": "2020-06-01",
              "name": "[format('{0}/{1}', parameters('privateDnsZoneName'), format('{0}-vnet-link', parameters('privateDnsZoneName')))]",
              "location": "global",
              "properties": {
                "registrationEnabled": false,
                "virtualNetwork": {
                  "id": "[parameters('vnetId')]"
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Network/privateDnsZones', parameters('privateDnsZoneName'))]"
              ]
            },
            {
              "type": "Microsoft.Network/privateEndpoints/privateDnsZoneGroups",
              "apiVersion": "2023-02-01",
              "name": "[format('{0}/{1}', last(split(parameters('privateEndpointId'), '/')), 'default')]",
              "properties": {
                "privateDnsZoneConfigs": [
                  {
                    "name": "[parameters('privateDnsZoneName')]",
                    "properties": {
                      "privateDnsZoneId": "[resourceId('Microsoft.Network/privateDnsZones', parameters('privateDnsZoneName'))]"
                    }
                  }
                ]
              },
              "dependsOn": [
                "[resourceId('Microsoft.Network/privateDnsZones', parameters('privateDnsZoneName'))]"
              ]
            }
          ],
          "outputs": {
            "privateDnsZoneId": {
              "type": "string",
              "value": "[resourceId('Microsoft.Network/privateDnsZones', parameters('privateDnsZoneName'))]"
            }
          }
        }
      },
      "dependsOn": [
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), format('{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName')))), 'Microsoft.Resources/deployments', 'cosmos-pe')]",
        "[subscriptionResourceId('Microsoft.Resources/resourceGroups', if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), format('{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName'))))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), format('{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName')))), 'Microsoft.Resources/deployments', 'vnet')]"
      ]
    },
    {
      "condition": "[parameters('enableZeroTrust')]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "storage-dns-zone",
      "resourceGroup": "[if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), format('{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName')))]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "privateEndpointId": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), format('{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName')))), 'Microsoft.Resources/deployments', 'storage-pe'), '2022-09-01').outputs.id.value]"
          },
          "privateDnsZoneName": {
            "value": "[format('privatelink.blob.{0}', environment().suffixes.storage)]"
          },
          "vnetId": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), format('{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName')))), 'Microsoft.Resources/deployments', 'vnet'), '2022-09-01').outputs.vnetId.value]"
          },
          "tags": {
            "value": "[parameters('tags')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.36.177.2456",
              "templateHash": "7506320509018848556"
            }
          },
          "parameters": {
            "privateEndpointId": {
              "type": "string"
            },
            "privateDnsZoneName": {
              "type": "string"
            },
            "vnetId": {
              "type": "string"
            },
            "tags": {
              "type": "object",
              "defaultValue": {}
            }
          },
          "resources": [
            {
              "type": "Microsoft.Network/privateDnsZones",
              "apiVersion": "2020-06-01",
              "name": "[parameters('privateDnsZoneName')]",
              "location": "global",
              "tags": "[parameters('tags')]"
            },
            {
              "type": "Microsoft.Network/privateDnsZones/virtualNetworkLinks",
              "apiVersion": "2020-06-01",
              "name": "[format('{0}/{1}', parameters('privateDnsZoneName'), format('{0}-vnet-link', parameters('privateDnsZoneName')))]",
              "location": "global",
              "properties": {
                "registrationEnabled": false,
                "virtualNetwork": {
                  "id": "[parameters('vnetId')]"
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Network/privateDnsZones', parameters('privateDnsZoneName'))]"
              ]
            },
            {
              "type": "Microsoft.Network/privateEndpoints/privateDnsZoneGroups",
              "apiVersion": "2023-02-01",
              "name": "[format('{0}/{1}', last(split(parameters('privateEndpointId'), '/')), 'default')]",
              "properties": {
                "privateDnsZoneConfigs": [
                  {
                    "name": "[parameters('privateDnsZoneName')]",
                    "properties": {
                      "privateDnsZoneId": "[resourceId('Microsoft.Network/privateDnsZones', parameters('privateDnsZoneName'))]"
                    }
                  }
                ]
              },
              "dependsOn": [
                "[resourceId('Microsoft.Network/privateDnsZones', parameters('privateDnsZoneName'))]"
              ]
            }
          ],
          "outputs": {
            "privateDnsZoneId": {
              "type": "string",
              "value": "[resourceId('Microsoft.Network/privateDnsZones', parameters('privateDnsZoneName'))]"
            }
          }
        }
      },
      "dependsOn": [
        "[subscriptionResourceId('Microsoft.Resources/resourceGroups', if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), format('{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName'))))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), format('{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName')))), 'Microsoft.Resources/deployments', 'storage-pe')]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), format('{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName')))), 'Microsoft.Resources/deployments', 'vnet')]"
      ]
    },
    {
      "condition": "[parameters('enableZeroTrust')]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "search-dns-zone",
      "resourceGroup": "[if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), format('{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName')))]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "privateEndpointId": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), format('{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName')))), 'Microsoft.Resources/deployments', 'search-pe'), '2022-09-01').outputs.id.value]"
          },
          "privateDnsZoneName": {
            "value": "privatelink.search.windows.net"
          },
          "vnetId": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), format('{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName')))), 'Microsoft.Resources/deployments', 'vnet'), '2022-09-01').outputs.vnetId.value]"
          },
          "tags": {
            "value": "[parameters('tags')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.36.177.2456",
              "templateHash": "7506320509018848556"
            }
          },
          "parameters": {
            "privateEndpointId": {
              "type": "string"
            },
            "privateDnsZoneName": {
              "type": "string"
            },
            "vnetId": {
              "type": "string"
            },
            "tags": {
              "type": "object",
              "defaultValue": {}
            }
          },
          "resources": [
            {
              "type": "Microsoft.Network/privateDnsZones",
              "apiVersion": "2020-06-01",
              "name": "[parameters('privateDnsZoneName')]",
              "location": "global",
              "tags": "[parameters('tags')]"
            },
            {
              "type": "Microsoft.Network/privateDnsZones/virtualNetworkLinks",
              "apiVersion": "2020-06-01",
              "name": "[format('{0}/{1}', parameters('privateDnsZoneName'), format('{0}-vnet-link', parameters('privateDnsZoneName')))]",
              "location": "global",
              "properties": {
                "registrationEnabled": false,
                "virtualNetwork": {
                  "id": "[parameters('vnetId')]"
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Network/privateDnsZones', parameters('privateDnsZoneName'))]"
              ]
            },
            {
              "type": "Microsoft.Network/privateEndpoints/privateDnsZoneGroups",
              "apiVersion": "2023-02-01",
              "name": "[format('{0}/{1}', last(split(parameters('privateEndpointId'), '/')), 'default')]",
              "properties": {
                "privateDnsZoneConfigs": [
                  {
                    "name": "[parameters('privateDnsZoneName')]",
                    "properties": {
                      "privateDnsZoneId": "[resourceId('Microsoft.Network/privateDnsZones', parameters('privateDnsZoneName'))]"
                    }
                  }
                ]
              },
              "dependsOn": [
                "[resourceId('Microsoft.Network/privateDnsZones', parameters('privateDnsZoneName'))]"
              ]
            }
          ],
          "outputs": {
            "privateDnsZoneId": {
              "type": "string",
              "value": "[resourceId('Microsoft.Network/privateDnsZones', parameters('privateDnsZoneName'))]"
            }
          }
        }
      },
      "dependsOn": [
        "[subscriptionResourceId('Microsoft.Resources/resourceGroups', if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), format('{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName'))))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), format('{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName')))), 'Microsoft.Resources/deployments', 'search-pe')]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), format('{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName')))), 'Microsoft.Resources/deployments', 'vnet')]"
      ]
    },
    {
      "condition": "[parameters('enableZeroTrust')]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "keyvault-dns-zone",
      "resourceGroup": "[if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), format('{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName')))]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "privateEndpointId": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), format('{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName')))), 'Microsoft.Resources/deployments', 'keyvault-pe'), '2022-09-01').outputs.id.value]"
          },
          "privateDnsZoneName": {
            "value": "privatelink.vaultcore.azure.net"
          },
          "vnetId": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), format('{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName')))), 'Microsoft.Resources/deployments', 'vnet'), '2022-09-01').outputs.vnetId.value]"
          },
          "tags": {
            "value": "[parameters('tags')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.36.177.2456",
              "templateHash": "7506320509018848556"
            }
          },
          "parameters": {
            "privateEndpointId": {
              "type": "string"
            },
            "privateDnsZoneName": {
              "type": "string"
            },
            "vnetId": {
              "type": "string"
            },
            "tags": {
              "type": "object",
              "defaultValue": {}
            }
          },
          "resources": [
            {
              "type": "Microsoft.Network/privateDnsZones",
              "apiVersion": "2020-06-01",
              "name": "[parameters('privateDnsZoneName')]",
              "location": "global",
              "tags": "[parameters('tags')]"
            },
            {
              "type": "Microsoft.Network/privateDnsZones/virtualNetworkLinks",
              "apiVersion": "2020-06-01",
              "name": "[format('{0}/{1}', parameters('privateDnsZoneName'), format('{0}-vnet-link', parameters('privateDnsZoneName')))]",
              "location": "global",
              "properties": {
                "registrationEnabled": false,
                "virtualNetwork": {
                  "id": "[parameters('vnetId')]"
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Network/privateDnsZones', parameters('privateDnsZoneName'))]"
              ]
            },
            {
              "type": "Microsoft.Network/privateEndpoints/privateDnsZoneGroups",
              "apiVersion": "2023-02-01",
              "name": "[format('{0}/{1}', last(split(parameters('privateEndpointId'), '/')), 'default')]",
              "properties": {
                "privateDnsZoneConfigs": [
                  {
                    "name": "[parameters('privateDnsZoneName')]",
                    "properties": {
                      "privateDnsZoneId": "[resourceId('Microsoft.Network/privateDnsZones', parameters('privateDnsZoneName'))]"
                    }
                  }
                ]
              },
              "dependsOn": [
                "[resourceId('Microsoft.Network/privateDnsZones', parameters('privateDnsZoneName'))]"
              ]
            }
          ],
          "outputs": {
            "privateDnsZoneId": {
              "type": "string",
              "value": "[resourceId('Microsoft.Network/privateDnsZones', parameters('privateDnsZoneName'))]"
            }
          }
        }
      },
      "dependsOn": [
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), format('{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName')))), 'Microsoft.Resources/deployments', 'keyvault-pe')]",
        "[subscriptionResourceId('Microsoft.Resources/resourceGroups', if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), format('{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName'))))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), format('{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName')))), 'Microsoft.Resources/deployments', 'vnet')]"
      ]
    },
    {
      "condition": "[parameters('enableZeroTrust')]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "openai-dns-zone",
      "resourceGroup": "[if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), format('{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName')))]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "privateEndpointId": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), format('{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName')))), 'Microsoft.Resources/deployments', 'openai-pe'), '2022-09-01').outputs.id.value]"
          },
          "privateDnsZoneName": {
            "value": "privatelink.openai.azure.com"
          },
          "vnetId": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), format('{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName')))), 'Microsoft.Resources/deployments', 'vnet'), '2022-09-01').outputs.vnetId.value]"
          },
          "tags": {
            "value": "[parameters('tags')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.36.177.2456",
              "templateHash": "7506320509018848556"
            }
          },
          "parameters": {
            "privateEndpointId": {
              "type": "string"
            },
            "privateDnsZoneName": {
              "type": "string"
            },
            "vnetId": {
              "type": "string"
            },
            "tags": {
              "type": "object",
              "defaultValue": {}
            }
          },
          "resources": [
            {
              "type": "Microsoft.Network/privateDnsZones",
              "apiVersion": "2020-06-01",
              "name": "[parameters('privateDnsZoneName')]",
              "location": "global",
              "tags": "[parameters('tags')]"
            },
            {
              "type": "Microsoft.Network/privateDnsZones/virtualNetworkLinks",
              "apiVersion": "2020-06-01",
              "name": "[format('{0}/{1}', parameters('privateDnsZoneName'), format('{0}-vnet-link', parameters('privateDnsZoneName')))]",
              "location": "global",
              "properties": {
                "registrationEnabled": false,
                "virtualNetwork": {
                  "id": "[parameters('vnetId')]"
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Network/privateDnsZones', parameters('privateDnsZoneName'))]"
              ]
            },
            {
              "type": "Microsoft.Network/privateEndpoints/privateDnsZoneGroups",
              "apiVersion": "2023-02-01",
              "name": "[format('{0}/{1}', last(split(parameters('privateEndpointId'), '/')), 'default')]",
              "properties": {
                "privateDnsZoneConfigs": [
                  {
                    "name": "[parameters('privateDnsZoneName')]",
                    "properties": {
                      "privateDnsZoneId": "[resourceId('Microsoft.Network/privateDnsZones', parameters('privateDnsZoneName'))]"
                    }
                  }
                ]
              },
              "dependsOn": [
                "[resourceId('Microsoft.Network/privateDnsZones', parameters('privateDnsZoneName'))]"
              ]
            }
          ],
          "outputs": {
            "privateDnsZoneId": {
              "type": "string",
              "value": "[resourceId('Microsoft.Network/privateDnsZones', parameters('privateDnsZoneName'))]"
            }
          }
        }
      },
      "dependsOn": [
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), format('{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName')))), 'Microsoft.Resources/deployments', 'openai-pe')]",
        "[subscriptionResourceId('Microsoft.Resources/resourceGroups', if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), format('{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName'))))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), format('{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName')))), 'Microsoft.Resources/deployments', 'vnet')]"
      ]
    },
    {
      "condition": "[parameters('enableZeroTrust')]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "aiservices-dns-zone",
      "resourceGroup": "[if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), format('{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName')))]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "privateEndpointId": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), format('{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName')))), 'Microsoft.Resources/deployments', 'aiservices-pe'), '2022-09-01').outputs.id.value]"
          },
          "privateDnsZoneName": {
            "value": "privatelink.cognitiveservices.azure.com"
          },
          "vnetId": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), format('{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName')))), 'Microsoft.Resources/deployments', 'vnet'), '2022-09-01').outputs.vnetId.value]"
          },
          "tags": {
            "value": "[parameters('tags')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.36.177.2456",
              "templateHash": "7506320509018848556"
            }
          },
          "parameters": {
            "privateEndpointId": {
              "type": "string"
            },
            "privateDnsZoneName": {
              "type": "string"
            },
            "vnetId": {
              "type": "string"
            },
            "tags": {
              "type": "object",
              "defaultValue": {}
            }
          },
          "resources": [
            {
              "type": "Microsoft.Network/privateDnsZones",
              "apiVersion": "2020-06-01",
              "name": "[parameters('privateDnsZoneName')]",
              "location": "global",
              "tags": "[parameters('tags')]"
            },
            {
              "type": "Microsoft.Network/privateDnsZones/virtualNetworkLinks",
              "apiVersion": "2020-06-01",
              "name": "[format('{0}/{1}', parameters('privateDnsZoneName'), format('{0}-vnet-link', parameters('privateDnsZoneName')))]",
              "location": "global",
              "properties": {
                "registrationEnabled": false,
                "virtualNetwork": {
                  "id": "[parameters('vnetId')]"
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Network/privateDnsZones', parameters('privateDnsZoneName'))]"
              ]
            },
            {
              "type": "Microsoft.Network/privateEndpoints/privateDnsZoneGroups",
              "apiVersion": "2023-02-01",
              "name": "[format('{0}/{1}', last(split(parameters('privateEndpointId'), '/')), 'default')]",
              "properties": {
                "privateDnsZoneConfigs": [
                  {
                    "name": "[parameters('privateDnsZoneName')]",
                    "properties": {
                      "privateDnsZoneId": "[resourceId('Microsoft.Network/privateDnsZones', parameters('privateDnsZoneName'))]"
                    }
                  }
                ]
              },
              "dependsOn": [
                "[resourceId('Microsoft.Network/privateDnsZones', parameters('privateDnsZoneName'))]"
              ]
            }
          ],
          "outputs": {
            "privateDnsZoneId": {
              "type": "string",
              "value": "[resourceId('Microsoft.Network/privateDnsZones', parameters('privateDnsZoneName'))]"
            }
          }
        }
      },
      "dependsOn": [
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), format('{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName')))), 'Microsoft.Resources/deployments', 'aiservices-pe')]",
        "[subscriptionResourceId('Microsoft.Resources/resourceGroups', if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), format('{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName'))))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), format('{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName')))), 'Microsoft.Resources/deployments', 'vnet')]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "uami",
      "resourceGroup": "[if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), format('{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName')))]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "location": {
            "value": "[parameters('location')]"
          },
          "identityName": {
            "value": "[format('app-{0}', variables('resourceToken'))]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.36.177.2456",
              "templateHash": "18125543387878980422"
            }
          },
          "parameters": {
            "identityName": {
              "type": "string"
            },
            "location": {
              "type": "string"
            }
          },
          "resources": [
            {
              "type": "Microsoft.ManagedIdentity/userAssignedIdentities",
              "apiVersion": "2023-01-31",
              "name": "[parameters('identityName')]",
              "location": "[parameters('location')]"
            }
          ],
          "outputs": {
            "identityId": {
              "type": "string",
              "value": "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('identityName'))]"
            },
            "clientId": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('identityName')), '2023-01-31').clientId]"
            },
            "principalId": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('identityName')), '2023-01-31').principalId]"
            },
            "name": {
              "type": "string",
              "value": "[parameters('identityName')]"
            }
          }
        }
      },
      "dependsOn": [
        "[subscriptionResourceId('Microsoft.Resources/resourceGroups', if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), format('{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName'))))]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "keyVault",
      "resourceGroup": "[if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), format('{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName')))]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "name": {
            "value": "[format('kv-{0}', variables('resourceToken'))]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "enableRbacAuthorization": {
            "value": true
          },
          "publicNetworkAccess": "[if(parameters('enableZeroTrust'), createObject('value', 'Disabled'), createObject('value', 'Enabled'))]",
          "networkAcls": "[if(parameters('enableZeroTrust'), createObject('value', createObject('defaultAction', 'Deny', 'bypass', 'AzureServices')), createObject('value', createObject('defaultAction', 'Allow')))]",
          "roleAssignments": {
            "value": [
              {
                "roleDefinitionIdOrName": "Key Vault Secrets User",
                "principalId": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), format('{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName')))), 'Microsoft.Resources/deployments', 'uami'), '2022-09-01').outputs.principalId.value]",
                "principalType": "ServicePrincipal"
              },
              {
                "roleDefinitionIdOrName": "Key Vault Secrets Officer",
                "principalId": "[parameters('principalId')]",
                "principalType": "[variables('principalType')]"
              }
            ]
          },
          "secrets": {
            "value": {
              "secureList": "[if(not(empty(parameters('bingSearchApiKey'))), createArray(createObject('name', 'bingSearchApiKey', 'value', parameters('bingSearchApiKey'))), createArray())]"
            }
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "languageVersion": "2.0",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.25.53.49325",
              "templateHash": "5965848958035406000"
            },
            "name": "Key Vaults",
            "description": "This module deploys a Key Vault.",
            "owner": "Azure/module-maintainers"
          },
          "definitions": {
            "diagnosticSettingType": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. The name of diagnostic setting."
                    }
                  },
                  "logCategoriesAndGroups": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "category": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Name of a Diagnostic Log category for a resource type this setting is applied to. Set the specific logs to collect here."
                          }
                        },
                        "categoryGroup": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Name of a Diagnostic Log category group for a resource type this setting is applied to. Set to `allLogs` to collect all logs."
                          }
                        },
                        "enabled": {
                          "type": "bool",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Enable or disable the category explicitly. Default is `true`."
                          }
                        }
                      }
                    },
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. The name of logs that will be streamed. \"allLogs\" includes all possible logs for the resource. Set to `[]` to disable log collection."
                    }
                  },
                  "metricCategories": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "category": {
                          "type": "string",
                          "metadata": {
                            "description": "Required. Name of a Diagnostic Metric category for a resource type this setting is applied to. Set to `AllMetrics` to collect all metrics."
                          }
                        },
                        "enabled": {
                          "type": "bool",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Enable or disable the category explicitly. Default is `true`."
                          }
                        }
                      }
                    },
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. The name of metrics that will be streamed. \"allMetrics\" includes all possible metrics for the resource. Set to `[]` to disable metric collection."
                    }
                  },
                  "logAnalyticsDestinationType": {
                    "type": "string",
                    "allowedValues": [
                      "AzureDiagnostics",
                      "Dedicated"
                    ],
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. A string indicating whether the export to Log Analytics should use the default destination type, i.e. AzureDiagnostics, or use a destination type."
                    }
                  },
                  "workspaceResourceId": {
                    "type": "string",
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. Resource ID of the diagnostic log analytics workspace. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                    }
                  },
                  "storageAccountResourceId": {
                    "type": "string",
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. Resource ID of the diagnostic storage account. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                    }
                  },
                  "eventHubAuthorizationRuleResourceId": {
                    "type": "string",
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. Resource ID of the diagnostic event hub authorization rule for the Event Hubs namespace in which the event hub should be created or streamed to."
                    }
                  },
                  "eventHubName": {
                    "type": "string",
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. Name of the diagnostic event hub within the namespace to which logs are streamed. Without this, an event hub is created for each log category. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                    }
                  },
                  "marketplacePartnerResourceId": {
                    "type": "string",
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. The full ARM resource ID of the Marketplace resource to which you would like to send Diagnostic Logs."
                    }
                  }
                }
              },
              "nullable": true
            },
            "roleAssignmentType": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "roleDefinitionIdOrName": {
                    "type": "string",
                    "metadata": {
                      "description": "Required. The role to assign. You can provide either the display name of the role definition, the role definition GUID, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                    }
                  },
                  "principalId": {
                    "type": "string",
                    "metadata": {
                      "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
                    }
                  },
                  "principalType": {
                    "type": "string",
                    "allowedValues": [
                      "Device",
                      "ForeignGroup",
                      "Group",
                      "ServicePrincipal",
                      "User"
                    ],
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. The principal type of the assigned principal ID."
                    }
                  },
                  "description": {
                    "type": "string",
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. The description of the role assignment."
                    }
                  },
                  "condition": {
                    "type": "string",
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\"."
                    }
                  },
                  "conditionVersion": {
                    "type": "string",
                    "allowedValues": [
                      "2.0"
                    ],
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. Version of the condition."
                    }
                  },
                  "delegatedManagedIdentityResourceId": {
                    "type": "string",
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. The Resource Id of the delegated managed identity resource."
                    }
                  }
                }
              },
              "nullable": true
            },
            "privateEndpointType": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. The name of the private endpoint."
                    }
                  },
                  "location": {
                    "type": "string",
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. The location to deploy the private endpoint to."
                    }
                  },
                  "service": {
                    "type": "string",
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. The subresource to deploy the private endpoint for. For example \"vault\", \"mysqlServer\" or \"dataFactory\"."
                    }
                  },
                  "subnetResourceId": {
                    "type": "string",
                    "metadata": {
                      "description": "Required. Resource ID of the subnet where the endpoint needs to be created."
                    }
                  },
                  "privateDnsZoneGroupName": {
                    "type": "string",
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. The name of the private DNS zone group to create if `privateDnsZoneResourceIds` were provided."
                    }
                  },
                  "privateDnsZoneResourceIds": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. The private DNS zone groups to associate the private endpoint with. A DNS zone group can support up to 5 DNS zones."
                    }
                  },
                  "isManualConnection": {
                    "type": "bool",
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. If Manual Private Link Connection is required."
                    }
                  },
                  "manualConnectionRequestMessage": {
                    "type": "string",
                    "nullable": true,
                    "maxLength": 140,
                    "metadata": {
                      "description": "Optional. A message passed to the owner of the remote resource with the manual connection request."
                    }
                  },
                  "customDnsConfigs": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "fqdn": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Required. Fqdn that resolves to private endpoint IP address."
                          }
                        },
                        "ipAddresses": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          },
                          "metadata": {
                            "description": "Required. A list of private IP addresses of the private endpoint."
                          }
                        }
                      }
                    },
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. Custom DNS configurations."
                    }
                  },
                  "ipConfigurations": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "metadata": {
                            "description": "Required. The name of the resource that is unique within a resource group."
                          }
                        },
                        "properties": {
                          "type": "object",
                          "properties": {
                            "groupId": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The ID of a group obtained from the remote resource that this private endpoint should connect to."
                              }
                            },
                            "memberName": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The member name of a group obtained from the remote resource that this private endpoint should connect to."
                              }
                            },
                            "privateIPAddress": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. A private IP address obtained from the private endpoint's subnet."
                              }
                            }
                          },
                          "metadata": {
                            "description": "Required. Properties of private endpoint IP configurations."
                          }
                        }
                      }
                    },
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. A list of IP configurations of the private endpoint. This will be used to map to the First Party Service endpoints."
                    }
                  },
                  "applicationSecurityGroupResourceIds": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. Application security groups in which the private endpoint IP configuration is included."
                    }
                  },
                  "customNetworkInterfaceName": {
                    "type": "string",
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. The custom name of the network interface attached to the private endpoint."
                    }
                  },
                  "lock": {
                    "$ref": "#/definitions/lockType",
                    "metadata": {
                      "description": "Optional. Specify the type of lock."
                    }
                  },
                  "roleAssignments": {
                    "$ref": "#/definitions/roleAssignmentType",
                    "metadata": {
                      "description": "Optional. Array of role assignments to create."
                    }
                  },
                  "tags": {
                    "type": "object",
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. Tags to be applied on all resources/resource groups in this deployment."
                    }
                  },
                  "enableTelemetry": {
                    "type": "bool",
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. Enable/Disable usage telemetry for module."
                    }
                  }
                }
              },
              "nullable": true
            },
            "lockType": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Specify the name of lock."
                  }
                },
                "kind": {
                  "type": "string",
                  "allowedValues": [
                    "CanNotDelete",
                    "None",
                    "ReadOnly"
                  ],
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Specify the type of lock."
                  }
                }
              },
              "nullable": true
            },
            "accessPoliciesType": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "tenantId": {
                    "type": "string",
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. The tenant ID that is used for authenticating requests to the key vault."
                    }
                  },
                  "objectId": {
                    "type": "string",
                    "metadata": {
                      "description": "Required. The object ID of a user, service principal or security group in the tenant for the vault."
                    }
                  },
                  "applicationId": {
                    "type": "string",
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. Application ID of the client making request on behalf of a principal."
                    }
                  },
                  "permissions": {
                    "type": "object",
                    "properties": {
                      "keys": {
                        "type": "array",
                        "allowedValues": [
                          "all",
                          "backup",
                          "create",
                          "decrypt",
                          "delete",
                          "encrypt",
                          "get",
                          "getrotationpolicy",
                          "import",
                          "list",
                          "purge",
                          "recover",
                          "release",
                          "restore",
                          "rotate",
                          "setrotationpolicy",
                          "sign",
                          "unwrapKey",
                          "update",
                          "verify",
                          "wrapKey"
                        ],
                        "nullable": true,
                        "metadata": {
                          "description": "Optional. Permissions to keys."
                        }
                      },
                      "secrets": {
                        "type": "array",
                        "allowedValues": [
                          "all",
                          "backup",
                          "delete",
                          "get",
                          "list",
                          "purge",
                          "recover",
                          "restore",
                          "set"
                        ],
                        "nullable": true,
                        "metadata": {
                          "description": "Optional. Permissions to secrets."
                        }
                      },
                      "certificates": {
                        "type": "array",
                        "allowedValues": [
                          "all",
                          "backup",
                          "create",
                          "delete",
                          "deleteissuers",
                          "get",
                          "getissuers",
                          "import",
                          "list",
                          "listissuers",
                          "managecontacts",
                          "manageissuers",
                          "purge",
                          "recover",
                          "restore",
                          "setissuers",
                          "update"
                        ],
                        "nullable": true,
                        "metadata": {
                          "description": "Optional. Permissions to certificates."
                        }
                      },
                      "storage": {
                        "type": "array",
                        "allowedValues": [
                          "all",
                          "backup",
                          "delete",
                          "deletesas",
                          "get",
                          "getsas",
                          "list",
                          "listsas",
                          "purge",
                          "recover",
                          "regeneratekey",
                          "restore",
                          "set",
                          "setsas",
                          "update"
                        ],
                        "nullable": true,
                        "metadata": {
                          "description": "Optional. Permissions to storage accounts."
                        }
                      }
                    },
                    "metadata": {
                      "description": "Required. Permissions the identity has for keys, secrets and certificates."
                    }
                  }
                }
              },
              "nullable": true
            }
          },
          "parameters": {
            "name": {
              "type": "string",
              "maxLength": 24,
              "metadata": {
                "description": "Required. Name of the Key Vault. Must be globally unique."
              }
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]",
              "metadata": {
                "description": "Optional. Location for all resources."
              }
            },
            "accessPolicies": {
              "$ref": "#/definitions/accessPoliciesType",
              "metadata": {
                "description": "Optional. All access policies to create."
              }
            },
            "secrets": {
              "type": "secureObject",
              "nullable": true,
              "metadata": {
                "description": "Optional. All secrets to create."
              }
            },
            "keys": {
              "type": "array",
              "nullable": true,
              "metadata": {
                "description": "Optional. All keys to create."
              }
            },
            "enableVaultForDeployment": {
              "type": "bool",
              "defaultValue": true,
              "metadata": {
                "description": "Optional. Specifies if the vault is enabled for deployment by script or compute."
              }
            },
            "enableVaultForTemplateDeployment": {
              "type": "bool",
              "defaultValue": true,
              "metadata": {
                "description": "Optional. Specifies if the vault is enabled for a template deployment."
              }
            },
            "enableVaultForDiskEncryption": {
              "type": "bool",
              "defaultValue": true,
              "metadata": {
                "description": "Optional. Specifies if the azure platform has access to the vault for enabling disk encryption scenarios."
              }
            },
            "enableSoftDelete": {
              "type": "bool",
              "defaultValue": true,
              "metadata": {
                "description": "Optional. Switch to enable/disable Key Vault's soft delete feature."
              }
            },
            "softDeleteRetentionInDays": {
              "type": "int",
              "defaultValue": 90,
              "metadata": {
                "description": "Optional. softDelete data retention days. It accepts >=7 and <=90."
              }
            },
            "enableRbacAuthorization": {
              "type": "bool",
              "defaultValue": true,
              "metadata": {
                "description": "Optional. Property that controls how data actions are authorized. When true, the key vault will use Role Based Access Control (RBAC) for authorization of data actions, and the access policies specified in vault properties will be ignored. When false, the key vault will use the access policies specified in vault properties, and any policy stored on Azure Resource Manager will be ignored. Note that management actions are always authorized with RBAC."
              }
            },
            "createMode": {
              "type": "string",
              "defaultValue": "default",
              "metadata": {
                "description": "Optional. The vault's create mode to indicate whether the vault need to be recovered or not. - recover or default."
              }
            },
            "enablePurgeProtection": {
              "type": "bool",
              "defaultValue": true,
              "metadata": {
                "description": "Optional. Provide 'true' to enable Key Vault's purge protection feature."
              }
            },
            "sku": {
              "type": "string",
              "defaultValue": "premium",
              "allowedValues": [
                "premium",
                "standard"
              ],
              "metadata": {
                "description": "Optional. Specifies the SKU for the vault."
              }
            },
            "networkAcls": {
              "type": "object",
              "nullable": true,
              "metadata": {
                "description": "Optional. Rules governing the accessibility of the resource from specific network locations."
              }
            },
            "publicNetworkAccess": {
              "type": "string",
              "defaultValue": "",
              "allowedValues": [
                "",
                "Enabled",
                "Disabled"
              ],
              "metadata": {
                "description": "Optional. Whether or not public network access is allowed for this resource. For security reasons it should be disabled. If not specified, it will be disabled by default if private endpoints are set and networkAcls are not set."
              }
            },
            "lock": {
              "$ref": "#/definitions/lockType",
              "metadata": {
                "description": "Optional. The lock settings of the service."
              }
            },
            "roleAssignments": {
              "$ref": "#/definitions/roleAssignmentType",
              "metadata": {
                "description": "Optional. Array of role assignments to create."
              }
            },
            "privateEndpoints": {
              "$ref": "#/definitions/privateEndpointType",
              "metadata": {
                "description": "Optional. Configuration details for private endpoints. For security reasons, it is recommended to use private endpoints whenever possible."
              }
            },
            "tags": {
              "type": "object",
              "nullable": true,
              "metadata": {
                "description": "Optional. Resource tags."
              }
            },
            "diagnosticSettings": {
              "$ref": "#/definitions/diagnosticSettingType",
              "metadata": {
                "description": "Optional. The diagnostic settings of the service."
              }
            },
            "enableTelemetry": {
              "type": "bool",
              "defaultValue": true,
              "metadata": {
                "description": "Optional. Enable/Disable usage telemetry for module."
              }
            }
          },
          "variables": {
            "copy": [
              {
                "name": "formattedAccessPolicies",
                "count": "[length(coalesce(parameters('accessPolicies'), createArray()))]",
                "input": {
                  "applicationId": "[coalesce(tryGet(coalesce(parameters('accessPolicies'), createArray())[copyIndex('formattedAccessPolicies')], 'applicationId'), '')]",
                  "objectId": "[coalesce(parameters('accessPolicies'), createArray())[copyIndex('formattedAccessPolicies')].objectId]",
                  "permissions": "[coalesce(parameters('accessPolicies'), createArray())[copyIndex('formattedAccessPolicies')].permissions]",
                  "tenantId": "[coalesce(tryGet(coalesce(parameters('accessPolicies'), createArray())[copyIndex('formattedAccessPolicies')], 'tenantId'), tenant().tenantId)]"
                }
              }
            ],
            "builtInRoleNames": {
              "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
              "Key Vault Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '00482a5a-887f-4fb3-b363-3b7fe8e74483')]",
              "Key Vault Certificates Officer": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'a4417e6f-fecd-4de8-b567-7b0420556985')]",
              "Key Vault Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f25e0fa2-a7c8-4377-a976-54943a77a395')]",
              "Key Vault Crypto Officer": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '14b46e9e-c2b7-41b4-b07b-48a6ebf60603')]",
              "Key Vault Crypto Service Encryption User": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'e147488a-f6f5-4113-8e2d-b22465e65bf6')]",
              "Key Vault Crypto User": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '12338af0-0e69-4776-bea7-57ae8d297424')]",
              "Key Vault Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '21090545-7ca7-4776-b22c-e363652d74d2')]",
              "Key Vault Secrets Officer": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b86a8fe4-44ce-4948-aee5-eccb2c155cd7')]",
              "Key Vault Secrets User": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '4633458b-17de-408a-b874-0445c86b69e6')]",
              "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
              "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
              "Role Based Access Control Administrator (Preview)": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]",
              "User Access Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18d7d88d-d35e-4fb5-a5c3-7773c20a72d9')]"
            },
            "secretList": "[coalesce(tryGet(parameters('secrets'), 'secureList'), createArray())]"
          },
          "resources": {
            "avmTelemetry": {
              "condition": "[parameters('enableTelemetry')]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2023-07-01",
              "name": "[format('46d3xbcp.res.keyvault-vault.{0}.{1}', replace('0.4.0', '.', '-'), substring(uniqueString(deployment().name, parameters('location')), 0, 4))]",
              "properties": {
                "mode": "Incremental",
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "resources": [],
                  "outputs": {
                    "telemetry": {
                      "type": "String",
                      "value": "For more information, see https://aka.ms/avm/TelemetryInfo"
                    }
                  }
                }
              }
            },
            "keyVault": {
              "type": "Microsoft.KeyVault/vaults",
              "apiVersion": "2022-07-01",
              "name": "[parameters('name')]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "properties": {
                "enabledForDeployment": "[parameters('enableVaultForDeployment')]",
                "enabledForTemplateDeployment": "[parameters('enableVaultForTemplateDeployment')]",
                "enabledForDiskEncryption": "[parameters('enableVaultForDiskEncryption')]",
                "enableSoftDelete": "[parameters('enableSoftDelete')]",
                "softDeleteRetentionInDays": "[parameters('softDeleteRetentionInDays')]",
                "enableRbacAuthorization": "[parameters('enableRbacAuthorization')]",
                "createMode": "[parameters('createMode')]",
                "enablePurgeProtection": "[if(parameters('enablePurgeProtection'), parameters('enablePurgeProtection'), null())]",
                "tenantId": "[subscription().tenantId]",
                "accessPolicies": "[variables('formattedAccessPolicies')]",
                "sku": {
                  "name": "[parameters('sku')]",
                  "family": "A"
                },
                "networkAcls": "[if(not(empty(coalesce(parameters('networkAcls'), createObject()))), createObject('bypass', tryGet(parameters('networkAcls'), 'bypass'), 'defaultAction', tryGet(parameters('networkAcls'), 'defaultAction'), 'virtualNetworkRules', coalesce(tryGet(parameters('networkAcls'), 'virtualNetworkRules'), createArray()), 'ipRules', coalesce(tryGet(parameters('networkAcls'), 'ipRules'), createArray())), null())]",
                "publicNetworkAccess": "[if(not(empty(parameters('publicNetworkAccess'))), parameters('publicNetworkAccess'), if(and(not(empty(coalesce(parameters('privateEndpoints'), createArray()))), empty(coalesce(parameters('networkAcls'), createObject()))), 'Disabled', null()))]"
              }
            },
            "keyVault_lock": {
              "condition": "[and(not(empty(coalesce(parameters('lock'), createObject()))), not(equals(tryGet(parameters('lock'), 'kind'), 'None')))]",
              "type": "Microsoft.Authorization/locks",
              "apiVersion": "2020-05-01",
              "scope": "[format('Microsoft.KeyVault/vaults/{0}', parameters('name'))]",
              "name": "[coalesce(tryGet(parameters('lock'), 'name'), format('lock-{0}', parameters('name')))]",
              "properties": {
                "level": "[coalesce(tryGet(parameters('lock'), 'kind'), '')]",
                "notes": "[if(equals(tryGet(parameters('lock'), 'kind'), 'CanNotDelete'), 'Cannot delete resource or child resources.', 'Cannot delete or modify the resource or child resources.')]"
              },
              "dependsOn": [
                "keyVault"
              ]
            },
            "keyVault_diagnosticSettings": {
              "copy": {
                "name": "keyVault_diagnosticSettings",
                "count": "[length(coalesce(parameters('diagnosticSettings'), createArray()))]"
              },
              "type": "Microsoft.Insights/diagnosticSettings",
              "apiVersion": "2021-05-01-preview",
              "scope": "[format('Microsoft.KeyVault/vaults/{0}', parameters('name'))]",
              "name": "[coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'name'), format('{0}-diagnosticSettings', parameters('name')))]",
              "properties": {
                "copy": [
                  {
                    "name": "metrics",
                    "count": "[length(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'metricCategories'), createArray(createObject('category', 'AllMetrics'))))]",
                    "input": {
                      "category": "[coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'metricCategories'), createArray(createObject('category', 'AllMetrics')))[copyIndex('metrics')].category]",
                      "enabled": "[coalesce(tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'metricCategories'), createArray(createObject('category', 'AllMetrics')))[copyIndex('metrics')], 'enabled'), true())]",
                      "timeGrain": null
                    }
                  },
                  {
                    "name": "logs",
                    "count": "[length(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs'))))]",
                    "input": {
                      "categoryGroup": "[tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs')))[copyIndex('logs')], 'categoryGroup')]",
                      "category": "[tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs')))[copyIndex('logs')], 'category')]",
                      "enabled": "[coalesce(tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs')))[copyIndex('logs')], 'enabled'), true())]"
                    }
                  }
                ],
                "storageAccountId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'storageAccountResourceId')]",
                "workspaceId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'workspaceResourceId')]",
                "eventHubAuthorizationRuleId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'eventHubAuthorizationRuleResourceId')]",
                "eventHubName": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'eventHubName')]",
                "marketplacePartnerId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'marketplacePartnerResourceId')]",
                "logAnalyticsDestinationType": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logAnalyticsDestinationType')]"
              },
              "dependsOn": [
                "keyVault"
              ]
            },
            "keyVault_roleAssignments": {
              "copy": {
                "name": "keyVault_roleAssignments",
                "count": "[length(coalesce(parameters('roleAssignments'), createArray()))]"
              },
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.KeyVault/vaults/{0}', parameters('name'))]",
              "name": "[guid(resourceId('Microsoft.KeyVault/vaults', parameters('name')), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].principalId, coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName)]",
              "properties": {
                "roleDefinitionId": "[if(contains(variables('builtInRoleNames'), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName), variables('builtInRoleNames')[coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName], if(contains(coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName, '/providers/Microsoft.Authorization/roleDefinitions/'), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName, subscriptionResourceId('Microsoft.Authorization/roleDefinitions', coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName)))]",
                "principalId": "[coalesce(parameters('roleAssignments'), createArray())[copyIndex()].principalId]",
                "description": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'description')]",
                "principalType": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'principalType')]",
                "condition": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'condition')]",
                "conditionVersion": "[if(not(empty(tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'condition'))), coalesce(tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'conditionVersion'), '2.0'), null())]",
                "delegatedManagedIdentityResourceId": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'delegatedManagedIdentityResourceId')]"
              },
              "dependsOn": [
                "keyVault"
              ]
            },
            "keyVault_accessPolicies": {
              "condition": "[not(empty(parameters('accessPolicies')))]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('{0}-KeyVault-AccessPolicies', uniqueString(deployment().name, parameters('location')))]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "keyVaultName": {
                    "value": "[parameters('name')]"
                  },
                  "accessPolicies": {
                    "value": "[parameters('accessPolicies')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "languageVersion": "2.0",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.25.53.49325",
                      "templateHash": "11791058225500616396"
                    },
                    "name": "Key Vault Access Policies",
                    "description": "This module deploys a Key Vault Access Policy.",
                    "owner": "Azure/module-maintainers"
                  },
                  "definitions": {
                    "accessPoliciesType": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "tenantId": {
                            "type": "string",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. The tenant ID that is used for authenticating requests to the key vault."
                            }
                          },
                          "objectId": {
                            "type": "string",
                            "metadata": {
                              "description": "Required. The object ID of a user, service principal or security group in the tenant for the vault."
                            }
                          },
                          "applicationId": {
                            "type": "string",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. Application ID of the client making request on behalf of a principal."
                            }
                          },
                          "permissions": {
                            "type": "object",
                            "properties": {
                              "keys": {
                                "type": "array",
                                "allowedValues": [
                                  "all",
                                  "backup",
                                  "create",
                                  "decrypt",
                                  "delete",
                                  "encrypt",
                                  "get",
                                  "getrotationpolicy",
                                  "import",
                                  "list",
                                  "purge",
                                  "recover",
                                  "release",
                                  "restore",
                                  "rotate",
                                  "setrotationpolicy",
                                  "sign",
                                  "unwrapKey",
                                  "update",
                                  "verify",
                                  "wrapKey"
                                ],
                                "nullable": true,
                                "metadata": {
                                  "description": "Optional. Permissions to keys."
                                }
                              },
                              "secrets": {
                                "type": "array",
                                "allowedValues": [
                                  "all",
                                  "backup",
                                  "delete",
                                  "get",
                                  "list",
                                  "purge",
                                  "recover",
                                  "restore",
                                  "set"
                                ],
                                "nullable": true,
                                "metadata": {
                                  "description": "Optional. Permissions to secrets."
                                }
                              },
                              "certificates": {
                                "type": "array",
                                "allowedValues": [
                                  "all",
                                  "backup",
                                  "create",
                                  "delete",
                                  "deleteissuers",
                                  "get",
                                  "getissuers",
                                  "import",
                                  "list",
                                  "listissuers",
                                  "managecontacts",
                                  "manageissuers",
                                  "purge",
                                  "recover",
                                  "restore",
                                  "setissuers",
                                  "update"
                                ],
                                "nullable": true,
                                "metadata": {
                                  "description": "Optional. Permissions to certificates."
                                }
                              },
                              "storage": {
                                "type": "array",
                                "allowedValues": [
                                  "all",
                                  "backup",
                                  "delete",
                                  "deletesas",
                                  "get",
                                  "getsas",
                                  "list",
                                  "listsas",
                                  "purge",
                                  "recover",
                                  "regeneratekey",
                                  "restore",
                                  "set",
                                  "setsas",
                                  "update"
                                ],
                                "nullable": true,
                                "metadata": {
                                  "description": "Optional. Permissions to storage accounts."
                                }
                              }
                            },
                            "metadata": {
                              "description": "Required. Permissions the identity has for keys, secrets and certificates."
                            }
                          }
                        }
                      },
                      "nullable": true
                    }
                  },
                  "parameters": {
                    "keyVaultName": {
                      "type": "string",
                      "metadata": {
                        "description": "Conditional. The name of the parent key vault. Required if the template is used in a standalone deployment."
                      }
                    },
                    "accessPolicies": {
                      "$ref": "#/definitions/accessPoliciesType",
                      "metadata": {
                        "description": "Optional. An array of 0 to 16 identities that have access to the key vault. All identities in the array must use the same tenant ID as the key vault's tenant ID."
                      }
                    }
                  },
                  "variables": {
                    "copy": [
                      {
                        "name": "formattedAccessPolicies",
                        "count": "[length(coalesce(parameters('accessPolicies'), createArray()))]",
                        "input": {
                          "applicationId": "[coalesce(tryGet(coalesce(parameters('accessPolicies'), createArray())[copyIndex('formattedAccessPolicies')], 'applicationId'), '')]",
                          "objectId": "[coalesce(parameters('accessPolicies'), createArray())[copyIndex('formattedAccessPolicies')].objectId]",
                          "permissions": "[coalesce(parameters('accessPolicies'), createArray())[copyIndex('formattedAccessPolicies')].permissions]",
                          "tenantId": "[coalesce(tryGet(coalesce(parameters('accessPolicies'), createArray())[copyIndex('formattedAccessPolicies')], 'tenantId'), tenant().tenantId)]"
                        }
                      }
                    ]
                  },
                  "resources": {
                    "keyVault": {
                      "existing": true,
                      "type": "Microsoft.KeyVault/vaults",
                      "apiVersion": "2022-07-01",
                      "name": "[parameters('keyVaultName')]"
                    },
                    "policies": {
                      "type": "Microsoft.KeyVault/vaults/accessPolicies",
                      "apiVersion": "2022-07-01",
                      "name": "[format('{0}/{1}', parameters('keyVaultName'), 'add')]",
                      "properties": {
                        "accessPolicies": "[variables('formattedAccessPolicies')]"
                      },
                      "dependsOn": [
                        "keyVault"
                      ]
                    }
                  },
                  "outputs": {
                    "resourceGroupName": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the resource group the access policies assignment was created in."
                      },
                      "value": "[resourceGroup().name]"
                    },
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the access policies assignment."
                      },
                      "value": "add"
                    },
                    "resourceId": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource ID of the access policies assignment."
                      },
                      "value": "[resourceId('Microsoft.KeyVault/vaults/accessPolicies', parameters('keyVaultName'), 'add')]"
                    }
                  }
                }
              },
              "dependsOn": [
                "keyVault"
              ]
            },
            "keyVault_secrets": {
              "copy": {
                "name": "keyVault_secrets",
                "count": "[length(variables('secretList'))]"
              },
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('{0}-KeyVault-Secret-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "name": {
                    "value": "[variables('secretList')[copyIndex()].name]"
                  },
                  "value": {
                    "value": "[variables('secretList')[copyIndex()].value]"
                  },
                  "keyVaultName": {
                    "value": "[parameters('name')]"
                  },
                  "attributesEnabled": {
                    "value": "[tryGet(variables('secretList')[copyIndex()], 'attributesEnabled')]"
                  },
                  "attributesExp": {
                    "value": "[tryGet(variables('secretList')[copyIndex()], 'attributesExp')]"
                  },
                  "attributesNbf": {
                    "value": "[tryGet(variables('secretList')[copyIndex()], 'attributesNbf')]"
                  },
                  "contentType": {
                    "value": "[tryGet(variables('secretList')[copyIndex()], 'contentType')]"
                  },
                  "tags": {
                    "value": "[coalesce(tryGet(variables('secretList')[copyIndex()], 'tags'), parameters('tags'))]"
                  },
                  "roleAssignments": {
                    "value": "[tryGet(variables('secretList')[copyIndex()], 'roleAssignments')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "languageVersion": "2.0",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.25.53.49325",
                      "templateHash": "13431676635055953332"
                    },
                    "name": "Key Vault Secrets",
                    "description": "This module deploys a Key Vault Secret.",
                    "owner": "Azure/module-maintainers"
                  },
                  "definitions": {
                    "roleAssignmentType": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "roleDefinitionIdOrName": {
                            "type": "string",
                            "metadata": {
                              "description": "Required. The role to assign. You can provide either the display name of the role definition, the role definition GUID, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                            }
                          },
                          "principalId": {
                            "type": "string",
                            "metadata": {
                              "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
                            }
                          },
                          "principalType": {
                            "type": "string",
                            "allowedValues": [
                              "Device",
                              "ForeignGroup",
                              "Group",
                              "ServicePrincipal",
                              "User"
                            ],
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. The principal type of the assigned principal ID."
                            }
                          },
                          "description": {
                            "type": "string",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. The description of the role assignment."
                            }
                          },
                          "condition": {
                            "type": "string",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\"."
                            }
                          },
                          "conditionVersion": {
                            "type": "string",
                            "allowedValues": [
                              "2.0"
                            ],
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. Version of the condition."
                            }
                          },
                          "delegatedManagedIdentityResourceId": {
                            "type": "string",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. The Resource Id of the delegated managed identity resource."
                            }
                          }
                        }
                      },
                      "nullable": true
                    }
                  },
                  "parameters": {
                    "keyVaultName": {
                      "type": "string",
                      "metadata": {
                        "description": "Conditional. The name of the parent key vault. Required if the template is used in a standalone deployment."
                      }
                    },
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. The name of the secret."
                      }
                    },
                    "tags": {
                      "type": "object",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Resource tags."
                      }
                    },
                    "attributesEnabled": {
                      "type": "bool",
                      "defaultValue": true,
                      "metadata": {
                        "description": "Optional. Determines whether the object is enabled."
                      }
                    },
                    "attributesExp": {
                      "type": "int",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Expiry date in seconds since 1970-01-01T00:00:00Z. For security reasons, it is recommended to set an expiration date whenever possible."
                      }
                    },
                    "attributesNbf": {
                      "type": "int",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Not before date in seconds since 1970-01-01T00:00:00Z."
                      }
                    },
                    "contentType": {
                      "type": "securestring",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The content type of the secret."
                      }
                    },
                    "value": {
                      "type": "securestring",
                      "metadata": {
                        "description": "Required. The value of the secret. NOTE: \"value\" will never be returned from the service, as APIs using this model are is intended for internal use in ARM deployments. Users should use the data-plane REST service for interaction with vault secrets."
                      }
                    },
                    "roleAssignments": {
                      "$ref": "#/definitions/roleAssignmentType",
                      "metadata": {
                        "description": "Optional. Array of role assignments to create."
                      }
                    }
                  },
                  "variables": {
                    "builtInRoleNames": {
                      "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                      "Key Vault Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '00482a5a-887f-4fb3-b363-3b7fe8e74483')]",
                      "Key Vault Certificates Officer": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'a4417e6f-fecd-4de8-b567-7b0420556985')]",
                      "Key Vault Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f25e0fa2-a7c8-4377-a976-54943a77a395')]",
                      "Key Vault Crypto Officer": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '14b46e9e-c2b7-41b4-b07b-48a6ebf60603')]",
                      "Key Vault Crypto Service Encryption User": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'e147488a-f6f5-4113-8e2d-b22465e65bf6')]",
                      "Key Vault Crypto User": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '12338af0-0e69-4776-bea7-57ae8d297424')]",
                      "Key Vault Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '21090545-7ca7-4776-b22c-e363652d74d2')]",
                      "Key Vault Secrets Officer": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b86a8fe4-44ce-4948-aee5-eccb2c155cd7')]",
                      "Key Vault Secrets User": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '4633458b-17de-408a-b874-0445c86b69e6')]",
                      "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
                      "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
                      "Role Based Access Control Administrator (Preview)": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]",
                      "User Access Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18d7d88d-d35e-4fb5-a5c3-7773c20a72d9')]"
                    }
                  },
                  "resources": {
                    "keyVault": {
                      "existing": true,
                      "type": "Microsoft.KeyVault/vaults",
                      "apiVersion": "2022-07-01",
                      "name": "[parameters('keyVaultName')]"
                    },
                    "secret": {
                      "type": "Microsoft.KeyVault/vaults/secrets",
                      "apiVersion": "2022-07-01",
                      "name": "[format('{0}/{1}', parameters('keyVaultName'), parameters('name'))]",
                      "tags": "[parameters('tags')]",
                      "properties": {
                        "contentType": "[parameters('contentType')]",
                        "attributes": {
                          "enabled": "[parameters('attributesEnabled')]",
                          "exp": "[parameters('attributesExp')]",
                          "nbf": "[parameters('attributesNbf')]"
                        },
                        "value": "[parameters('value')]"
                      },
                      "dependsOn": [
                        "keyVault"
                      ]
                    },
                    "secret_roleAssignments": {
                      "copy": {
                        "name": "secret_roleAssignments",
                        "count": "[length(coalesce(parameters('roleAssignments'), createArray()))]"
                      },
                      "type": "Microsoft.Authorization/roleAssignments",
                      "apiVersion": "2022-04-01",
                      "scope": "[format('Microsoft.KeyVault/vaults/{0}/secrets/{1}', parameters('keyVaultName'), parameters('name'))]",
                      "name": "[guid(resourceId('Microsoft.KeyVault/vaults/secrets', parameters('keyVaultName'), parameters('name')), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].principalId, coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName)]",
                      "properties": {
                        "roleDefinitionId": "[if(contains(variables('builtInRoleNames'), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName), variables('builtInRoleNames')[coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName], if(contains(coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName, '/providers/Microsoft.Authorization/roleDefinitions/'), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName, subscriptionResourceId('Microsoft.Authorization/roleDefinitions', coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName)))]",
                        "principalId": "[coalesce(parameters('roleAssignments'), createArray())[copyIndex()].principalId]",
                        "description": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'description')]",
                        "principalType": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'principalType')]",
                        "condition": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'condition')]",
                        "conditionVersion": "[if(not(empty(tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'condition'))), coalesce(tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'conditionVersion'), '2.0'), null())]",
                        "delegatedManagedIdentityResourceId": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'delegatedManagedIdentityResourceId')]"
                      },
                      "dependsOn": [
                        "secret"
                      ]
                    }
                  },
                  "outputs": {
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the secret."
                      },
                      "value": "[parameters('name')]"
                    },
                    "resourceId": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource ID of the secret."
                      },
                      "value": "[resourceId('Microsoft.KeyVault/vaults/secrets', parameters('keyVaultName'), parameters('name'))]"
                    },
                    "resourceGroupName": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the resource group the secret was created in."
                      },
                      "value": "[resourceGroup().name]"
                    }
                  }
                }
              },
              "dependsOn": [
                "keyVault"
              ]
            },
            "keyVault_keys": {
              "copy": {
                "name": "keyVault_keys",
                "count": "[length(coalesce(parameters('keys'), createArray()))]"
              },
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('{0}-KeyVault-Key-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "name": {
                    "value": "[coalesce(parameters('keys'), createArray())[copyIndex()].name]"
                  },
                  "keyVaultName": {
                    "value": "[parameters('name')]"
                  },
                  "attributesEnabled": {
                    "value": "[tryGet(coalesce(parameters('keys'), createArray())[copyIndex()], 'attributesEnabled')]"
                  },
                  "attributesExp": {
                    "value": "[tryGet(coalesce(parameters('keys'), createArray())[copyIndex()], 'attributesExp')]"
                  },
                  "attributesNbf": {
                    "value": "[tryGet(coalesce(parameters('keys'), createArray())[copyIndex()], 'attributesNbf')]"
                  },
                  "curveName": {
                    "value": "[coalesce(tryGet(coalesce(parameters('keys'), createArray())[copyIndex()], 'curveName'), 'P-256')]"
                  },
                  "keyOps": {
                    "value": "[tryGet(coalesce(parameters('keys'), createArray())[copyIndex()], 'keyOps')]"
                  },
                  "keySize": {
                    "value": "[tryGet(coalesce(parameters('keys'), createArray())[copyIndex()], 'keySize')]"
                  },
                  "kty": {
                    "value": "[coalesce(tryGet(coalesce(parameters('keys'), createArray())[copyIndex()], 'kty'), 'EC')]"
                  },
                  "tags": {
                    "value": "[coalesce(tryGet(coalesce(parameters('keys'), createArray())[copyIndex()], 'tags'), parameters('tags'))]"
                  },
                  "roleAssignments": {
                    "value": "[tryGet(coalesce(parameters('keys'), createArray())[copyIndex()], 'roleAssignments')]"
                  },
                  "rotationPolicy": {
                    "value": "[tryGet(coalesce(parameters('keys'), createArray())[copyIndex()], 'rotationPolicy')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "languageVersion": "2.0",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.25.53.49325",
                      "templateHash": "9470802651294896537"
                    },
                    "name": "Key Vault Keys",
                    "description": "This module deploys a Key Vault Key.",
                    "owner": "Azure/module-maintainers"
                  },
                  "definitions": {
                    "roleAssignmentType": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "roleDefinitionIdOrName": {
                            "type": "string",
                            "metadata": {
                              "description": "Required. The role to assign. You can provide either the display name of the role definition, the role definition GUID, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                            }
                          },
                          "principalId": {
                            "type": "string",
                            "metadata": {
                              "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
                            }
                          },
                          "principalType": {
                            "type": "string",
                            "allowedValues": [
                              "Device",
                              "ForeignGroup",
                              "Group",
                              "ServicePrincipal",
                              "User"
                            ],
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. The principal type of the assigned principal ID."
                            }
                          },
                          "description": {
                            "type": "string",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. The description of the role assignment."
                            }
                          },
                          "condition": {
                            "type": "string",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\"."
                            }
                          },
                          "conditionVersion": {
                            "type": "string",
                            "allowedValues": [
                              "2.0"
                            ],
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. Version of the condition."
                            }
                          },
                          "delegatedManagedIdentityResourceId": {
                            "type": "string",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. The Resource Id of the delegated managed identity resource."
                            }
                          }
                        }
                      },
                      "nullable": true
                    }
                  },
                  "parameters": {
                    "keyVaultName": {
                      "type": "string",
                      "metadata": {
                        "description": "Conditional. The name of the parent key vault. Required if the template is used in a standalone deployment."
                      }
                    },
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. The name of the key."
                      }
                    },
                    "tags": {
                      "type": "object",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Resource tags."
                      }
                    },
                    "attributesEnabled": {
                      "type": "bool",
                      "defaultValue": true,
                      "metadata": {
                        "description": "Optional. Determines whether the object is enabled."
                      }
                    },
                    "attributesExp": {
                      "type": "int",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Expiry date in seconds since 1970-01-01T00:00:00Z. For security reasons, it is recommended to set an expiration date whenever possible."
                      }
                    },
                    "attributesNbf": {
                      "type": "int",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Not before date in seconds since 1970-01-01T00:00:00Z."
                      }
                    },
                    "curveName": {
                      "type": "string",
                      "defaultValue": "P-256",
                      "allowedValues": [
                        "P-256",
                        "P-256K",
                        "P-384",
                        "P-521"
                      ],
                      "metadata": {
                        "description": "Optional. The elliptic curve name."
                      }
                    },
                    "keyOps": {
                      "type": "array",
                      "nullable": true,
                      "allowedValues": [
                        "decrypt",
                        "encrypt",
                        "import",
                        "sign",
                        "unwrapKey",
                        "verify",
                        "wrapKey"
                      ],
                      "metadata": {
                        "description": "Optional. Array of JsonWebKeyOperation."
                      }
                    },
                    "keySize": {
                      "type": "int",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The key size in bits. For example: 2048, 3072, or 4096 for RSA."
                      }
                    },
                    "kty": {
                      "type": "string",
                      "defaultValue": "EC",
                      "allowedValues": [
                        "EC",
                        "EC-HSM",
                        "RSA",
                        "RSA-HSM"
                      ],
                      "metadata": {
                        "description": "Optional. The type of the key."
                      }
                    },
                    "roleAssignments": {
                      "$ref": "#/definitions/roleAssignmentType",
                      "metadata": {
                        "description": "Optional. Array of role assignments to create."
                      }
                    },
                    "rotationPolicy": {
                      "type": "object",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Key rotation policy properties object."
                      }
                    }
                  },
                  "variables": {
                    "builtInRoleNames": {
                      "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                      "Key Vault Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '00482a5a-887f-4fb3-b363-3b7fe8e74483')]",
                      "Key Vault Certificates Officer": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'a4417e6f-fecd-4de8-b567-7b0420556985')]",
                      "Key Vault Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f25e0fa2-a7c8-4377-a976-54943a77a395')]",
                      "Key Vault Crypto Officer": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '14b46e9e-c2b7-41b4-b07b-48a6ebf60603')]",
                      "Key Vault Crypto Service Encryption User": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'e147488a-f6f5-4113-8e2d-b22465e65bf6')]",
                      "Key Vault Crypto User": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '12338af0-0e69-4776-bea7-57ae8d297424')]",
                      "Key Vault Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '21090545-7ca7-4776-b22c-e363652d74d2')]",
                      "Key Vault Secrets Officer": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b86a8fe4-44ce-4948-aee5-eccb2c155cd7')]",
                      "Key Vault Secrets User": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '4633458b-17de-408a-b874-0445c86b69e6')]",
                      "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
                      "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
                      "Role Based Access Control Administrator (Preview)": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]",
                      "User Access Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18d7d88d-d35e-4fb5-a5c3-7773c20a72d9')]"
                    }
                  },
                  "resources": {
                    "keyVault": {
                      "existing": true,
                      "type": "Microsoft.KeyVault/vaults",
                      "apiVersion": "2022-07-01",
                      "name": "[parameters('keyVaultName')]"
                    },
                    "key": {
                      "type": "Microsoft.KeyVault/vaults/keys",
                      "apiVersion": "2022-07-01",
                      "name": "[format('{0}/{1}', parameters('keyVaultName'), parameters('name'))]",
                      "tags": "[parameters('tags')]",
                      "properties": {
                        "attributes": {
                          "enabled": "[parameters('attributesEnabled')]",
                          "exp": "[parameters('attributesExp')]",
                          "nbf": "[parameters('attributesNbf')]"
                        },
                        "curveName": "[parameters('curveName')]",
                        "keyOps": "[parameters('keyOps')]",
                        "keySize": "[parameters('keySize')]",
                        "kty": "[parameters('kty')]",
                        "rotationPolicy": "[parameters('rotationPolicy')]"
                      },
                      "dependsOn": [
                        "keyVault"
                      ]
                    },
                    "key_roleAssignments": {
                      "copy": {
                        "name": "key_roleAssignments",
                        "count": "[length(coalesce(parameters('roleAssignments'), createArray()))]"
                      },
                      "type": "Microsoft.Authorization/roleAssignments",
                      "apiVersion": "2022-04-01",
                      "scope": "[format('Microsoft.KeyVault/vaults/{0}/keys/{1}', parameters('keyVaultName'), parameters('name'))]",
                      "name": "[guid(resourceId('Microsoft.KeyVault/vaults/keys', parameters('keyVaultName'), parameters('name')), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].principalId, coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName)]",
                      "properties": {
                        "roleDefinitionId": "[if(contains(variables('builtInRoleNames'), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName), variables('builtInRoleNames')[coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName], if(contains(coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName, '/providers/Microsoft.Authorization/roleDefinitions/'), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName, subscriptionResourceId('Microsoft.Authorization/roleDefinitions', coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName)))]",
                        "principalId": "[coalesce(parameters('roleAssignments'), createArray())[copyIndex()].principalId]",
                        "description": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'description')]",
                        "principalType": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'principalType')]",
                        "condition": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'condition')]",
                        "conditionVersion": "[if(not(empty(tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'condition'))), coalesce(tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'conditionVersion'), '2.0'), null())]",
                        "delegatedManagedIdentityResourceId": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'delegatedManagedIdentityResourceId')]"
                      },
                      "dependsOn": [
                        "key"
                      ]
                    }
                  },
                  "outputs": {
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the key."
                      },
                      "value": "[parameters('name')]"
                    },
                    "resourceId": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource ID of the key."
                      },
                      "value": "[resourceId('Microsoft.KeyVault/vaults/keys', parameters('keyVaultName'), parameters('name'))]"
                    },
                    "resourceGroupName": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the resource group the key was created in."
                      },
                      "value": "[resourceGroup().name]"
                    }
                  }
                }
              },
              "dependsOn": [
                "keyVault"
              ]
            },
            "keyVault_privateEndpoints": {
              "copy": {
                "name": "keyVault_privateEndpoints",
                "count": "[length(coalesce(parameters('privateEndpoints'), createArray()))]"
              },
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('{0}-KeyVault-PrivateEndpoint-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "name": {
                    "value": "[coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'name'), format('pep-{0}-{1}-{2}', last(split(resourceId('Microsoft.KeyVault/vaults', parameters('name')), '/')), coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'service'), 'vault'), copyIndex()))]"
                  },
                  "privateLinkServiceConnections": "[if(not(equals(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'manualPrivateLinkServiceConnections'), true())), createObject('value', createArray(createObject('name', coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'privateLinkServiceConnectionName'), format('{0}-{1}-{2}', last(split(resourceId('Microsoft.KeyVault/vaults', parameters('name')), '/')), coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'service'), 'vault'), copyIndex())), 'properties', createObject('privateLinkServiceId', resourceId('Microsoft.KeyVault/vaults', parameters('name')), 'groupIds', createArray(coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'service'), 'vault')))))), createObject('value', null()))]",
                  "manualPrivateLinkServiceConnections": "[if(equals(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'manualPrivateLinkServiceConnections'), true()), createObject('value', createArray(createObject('name', coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'privateLinkServiceConnectionName'), format('{0}-{1}-{2}', last(split(resourceId('Microsoft.KeyVault/vaults', parameters('name')), '/')), coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'service'), 'vault'), copyIndex())), 'properties', createObject('privateLinkServiceId', resourceId('Microsoft.KeyVault/vaults', parameters('name')), 'groupIds', createArray(coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'service'), 'vault')), 'requestMessage', coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'manualConnectionRequestMessage'), 'Manual approval required.'))))), createObject('value', null()))]",
                  "subnetResourceId": {
                    "value": "[coalesce(parameters('privateEndpoints'), createArray())[copyIndex()].subnetResourceId]"
                  },
                  "enableTelemetry": {
                    "value": "[coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'enableTelemetry'), parameters('enableTelemetry'))]"
                  },
                  "location": {
                    "value": "[coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'location'), reference(split(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()].subnetResourceId, '/subnets/')[0], '2020-06-01', 'Full').location)]"
                  },
                  "lock": {
                    "value": "[coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'lock'), parameters('lock'))]"
                  },
                  "privateDnsZoneGroupName": {
                    "value": "[tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'privateDnsZoneGroupName')]"
                  },
                  "privateDnsZoneResourceIds": {
                    "value": "[tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'privateDnsZoneResourceIds')]"
                  },
                  "roleAssignments": {
                    "value": "[tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'roleAssignments')]"
                  },
                  "tags": {
                    "value": "[coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'tags'), parameters('tags'))]"
                  },
                  "customDnsConfigs": {
                    "value": "[tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'customDnsConfigs')]"
                  },
                  "ipConfigurations": {
                    "value": "[tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'ipConfigurations')]"
                  },
                  "applicationSecurityGroupResourceIds": {
                    "value": "[tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'applicationSecurityGroupResourceIds')]"
                  },
                  "customNetworkInterfaceName": {
                    "value": "[tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'customNetworkInterfaceName')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "languageVersion": "2.0",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.24.24.22086",
                      "templateHash": "2592884001616184297"
                    },
                    "name": "Private Endpoints",
                    "description": "This module deploys a Private Endpoint.",
                    "owner": "Azure/module-maintainers"
                  },
                  "definitions": {
                    "roleAssignmentType": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "roleDefinitionIdOrName": {
                            "type": "string",
                            "metadata": {
                              "description": "Required. The role to assign. You can provide either the display name of the role definition, the role definition GUID, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                            }
                          },
                          "principalId": {
                            "type": "string",
                            "metadata": {
                              "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
                            }
                          },
                          "principalType": {
                            "type": "string",
                            "allowedValues": [
                              "Device",
                              "ForeignGroup",
                              "Group",
                              "ServicePrincipal",
                              "User"
                            ],
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. The principal type of the assigned principal ID."
                            }
                          },
                          "description": {
                            "type": "string",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. The description of the role assignment."
                            }
                          },
                          "condition": {
                            "type": "string",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\"."
                            }
                          },
                          "conditionVersion": {
                            "type": "string",
                            "allowedValues": [
                              "2.0"
                            ],
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. Version of the condition."
                            }
                          },
                          "delegatedManagedIdentityResourceId": {
                            "type": "string",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. The Resource Id of the delegated managed identity resource."
                            }
                          }
                        }
                      },
                      "nullable": true
                    },
                    "lockType": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Specify the name of lock."
                          }
                        },
                        "kind": {
                          "type": "string",
                          "allowedValues": [
                            "CanNotDelete",
                            "None",
                            "ReadOnly"
                          ],
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Specify the type of lock."
                          }
                        }
                      },
                      "nullable": true
                    },
                    "ipConfigurationsType": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "name": {
                            "type": "string",
                            "metadata": {
                              "description": "Required. The name of the resource that is unique within a resource group."
                            }
                          },
                          "properties": {
                            "type": "object",
                            "properties": {
                              "groupId": {
                                "type": "string",
                                "metadata": {
                                  "description": "Required. The ID of a group obtained from the remote resource that this private endpoint should connect to."
                                }
                              },
                              "memberName": {
                                "type": "string",
                                "metadata": {
                                  "description": "Required. The member name of a group obtained from the remote resource that this private endpoint should connect to."
                                }
                              },
                              "privateIPAddress": {
                                "type": "string",
                                "metadata": {
                                  "description": "Required. A private IP address obtained from the private endpoint's subnet."
                                }
                              }
                            },
                            "metadata": {
                              "description": "Required. Properties of private endpoint IP configurations."
                            }
                          }
                        }
                      },
                      "nullable": true
                    },
                    "manualPrivateLinkServiceConnectionsType": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "name": {
                            "type": "string",
                            "metadata": {
                              "description": "Required. The name of the private link service connection."
                            }
                          },
                          "properties": {
                            "type": "object",
                            "properties": {
                              "groupIds": {
                                "type": "array",
                                "metadata": {
                                  "description": "Required. The ID of a group obtained from the remote resource that this private endpoint should connect to."
                                }
                              },
                              "privateLinkServiceId": {
                                "type": "string",
                                "metadata": {
                                  "description": "Required. The resource id of private link service."
                                }
                              },
                              "requestMessage": {
                                "type": "string",
                                "metadata": {
                                  "description": "Optional. A message passed to the owner of the remote resource with this connection request. Restricted to 140 chars."
                                }
                              }
                            },
                            "metadata": {
                              "description": "Required. Properties of private link service connection."
                            }
                          }
                        }
                      },
                      "nullable": true
                    },
                    "privateLinkServiceConnectionsType": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "name": {
                            "type": "string",
                            "metadata": {
                              "description": "Required. The name of the private link service connection."
                            }
                          },
                          "properties": {
                            "type": "object",
                            "properties": {
                              "groupIds": {
                                "type": "array",
                                "metadata": {
                                  "description": "Required. The ID of a group obtained from the remote resource that this private endpoint should connect to."
                                }
                              },
                              "privateLinkServiceId": {
                                "type": "string",
                                "metadata": {
                                  "description": "Required. The resource id of private link service."
                                }
                              },
                              "requestMessage": {
                                "type": "string",
                                "nullable": true,
                                "metadata": {
                                  "description": "Optional. A message passed to the owner of the remote resource with this connection request. Restricted to 140 chars."
                                }
                              }
                            },
                            "metadata": {
                              "description": "Required. Properties of private link service connection."
                            }
                          }
                        }
                      },
                      "nullable": true
                    },
                    "customDnsConfigType": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "fqdn": {
                            "type": "string",
                            "metadata": {
                              "description": "Required. Fqdn that resolves to private endpoint IP address."
                            }
                          },
                          "ipAddresses": {
                            "type": "array",
                            "items": {
                              "type": "string"
                            },
                            "metadata": {
                              "description": "Required. A list of private IP addresses of the private endpoint."
                            }
                          }
                        }
                      },
                      "nullable": true
                    }
                  },
                  "parameters": {
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. Name of the private endpoint resource to create."
                      }
                    },
                    "subnetResourceId": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. Resource ID of the subnet where the endpoint needs to be created."
                      }
                    },
                    "applicationSecurityGroupResourceIds": {
                      "type": "array",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Application security groups in which the private endpoint IP configuration is included."
                      }
                    },
                    "customNetworkInterfaceName": {
                      "type": "string",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The custom name of the network interface attached to the private endpoint."
                      }
                    },
                    "ipConfigurations": {
                      "$ref": "#/definitions/ipConfigurationsType",
                      "metadata": {
                        "description": "Optional. A list of IP configurations of the private endpoint. This will be used to map to the First Party Service endpoints."
                      }
                    },
                    "privateDnsZoneGroupName": {
                      "type": "string",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The name of the private DNS zone group to create if `privateDnsZoneResourceIds` were provided."
                      }
                    },
                    "privateDnsZoneResourceIds": {
                      "type": "array",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The private DNS zone groups to associate the private endpoint. A DNS zone group can support up to 5 DNS zones."
                      }
                    },
                    "location": {
                      "type": "string",
                      "defaultValue": "[resourceGroup().location]",
                      "metadata": {
                        "description": "Optional. Location for all Resources."
                      }
                    },
                    "lock": {
                      "$ref": "#/definitions/lockType",
                      "metadata": {
                        "description": "Optional. The lock settings of the service."
                      }
                    },
                    "roleAssignments": {
                      "$ref": "#/definitions/roleAssignmentType",
                      "metadata": {
                        "description": "Optional. Array of role assignments to create."
                      }
                    },
                    "tags": {
                      "type": "object",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Tags to be applied on all resources/resource groups in this deployment."
                      }
                    },
                    "customDnsConfigs": {
                      "$ref": "#/definitions/customDnsConfigType",
                      "metadata": {
                        "description": "Optional. Custom DNS configurations."
                      }
                    },
                    "manualPrivateLinkServiceConnections": {
                      "$ref": "#/definitions/manualPrivateLinkServiceConnectionsType",
                      "metadata": {
                        "description": "Optional. A grouping of information about the connection to the remote resource. Used when the network admin does not have access to approve connections to the remote resource."
                      }
                    },
                    "privateLinkServiceConnections": {
                      "$ref": "#/definitions/privateLinkServiceConnectionsType",
                      "metadata": {
                        "description": "Optional. A grouping of information about the connection to the remote resource."
                      }
                    },
                    "enableTelemetry": {
                      "type": "bool",
                      "defaultValue": true,
                      "metadata": {
                        "description": "Optional. Enable/Disable usage telemetry for module."
                      }
                    }
                  },
                  "variables": {
                    "builtInRoleNames": {
                      "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                      "DNS Resolver Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '0f2ebee7-ffd4-4fc0-b3b7-664099fdad5d')]",
                      "DNS Zone Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'befefa01-2a29-4197-83a8-272ff33ce314')]",
                      "Domain Services Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'eeaeda52-9324-47f6-8069-5d5bade478b2')]",
                      "Domain Services Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '361898ef-9ed1-48c2-849c-a832951106bb')]",
                      "Network Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '4d97b98b-1d4f-4787-a291-c67834d212e7')]",
                      "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
                      "Private DNS Zone Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b12aa53e-6015-4669-85d0-8515ebb3ae7f')]",
                      "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
                      "Role Based Access Control Administrator (Preview)": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]"
                    }
                  },
                  "resources": {
                    "avmTelemetry": {
                      "condition": "[parameters('enableTelemetry')]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2023-07-01",
                      "name": "[format('46d3xbcp.res.network-privateendpoint.{0}.{1}', replace('0.4.0', '.', '-'), substring(uniqueString(deployment().name, parameters('location')), 0, 4))]",
                      "properties": {
                        "mode": "Incremental",
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "resources": [],
                          "outputs": {
                            "telemetry": {
                              "type": "String",
                              "value": "For more information, see https://aka.ms/avm/TelemetryInfo"
                            }
                          }
                        }
                      }
                    },
                    "privateEndpoint": {
                      "type": "Microsoft.Network/privateEndpoints",
                      "apiVersion": "2023-04-01",
                      "name": "[parameters('name')]",
                      "location": "[parameters('location')]",
                      "tags": "[parameters('tags')]",
                      "properties": {
                        "copy": [
                          {
                            "name": "applicationSecurityGroups",
                            "count": "[length(coalesce(parameters('applicationSecurityGroupResourceIds'), createArray()))]",
                            "input": {
                              "id": "[coalesce(parameters('applicationSecurityGroupResourceIds'), createArray())[copyIndex('applicationSecurityGroups')]]"
                            }
                          }
                        ],
                        "customDnsConfigs": "[coalesce(parameters('customDnsConfigs'), createArray())]",
                        "customNetworkInterfaceName": "[coalesce(parameters('customNetworkInterfaceName'), '')]",
                        "ipConfigurations": "[coalesce(parameters('ipConfigurations'), createArray())]",
                        "manualPrivateLinkServiceConnections": "[coalesce(parameters('manualPrivateLinkServiceConnections'), createArray())]",
                        "privateLinkServiceConnections": "[coalesce(parameters('privateLinkServiceConnections'), createArray())]",
                        "subnet": {
                          "id": "[parameters('subnetResourceId')]"
                        }
                      }
                    },
                    "privateEndpoint_lock": {
                      "condition": "[and(not(empty(coalesce(parameters('lock'), createObject()))), not(equals(tryGet(parameters('lock'), 'kind'), 'None')))]",
                      "type": "Microsoft.Authorization/locks",
                      "apiVersion": "2020-05-01",
                      "scope": "[format('Microsoft.Network/privateEndpoints/{0}', parameters('name'))]",
                      "name": "[coalesce(tryGet(parameters('lock'), 'name'), format('lock-{0}', parameters('name')))]",
                      "properties": {
                        "level": "[coalesce(tryGet(parameters('lock'), 'kind'), '')]",
                        "notes": "[if(equals(tryGet(parameters('lock'), 'kind'), 'CanNotDelete'), 'Cannot delete resource or child resources.', 'Cannot delete or modify the resource or child resources.')]"
                      },
                      "dependsOn": [
                        "privateEndpoint"
                      ]
                    },
                    "privateEndpoint_roleAssignments": {
                      "copy": {
                        "name": "privateEndpoint_roleAssignments",
                        "count": "[length(coalesce(parameters('roleAssignments'), createArray()))]"
                      },
                      "type": "Microsoft.Authorization/roleAssignments",
                      "apiVersion": "2022-04-01",
                      "scope": "[format('Microsoft.Network/privateEndpoints/{0}', parameters('name'))]",
                      "name": "[guid(resourceId('Microsoft.Network/privateEndpoints', parameters('name')), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].principalId, coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName)]",
                      "properties": {
                        "roleDefinitionId": "[if(contains(variables('builtInRoleNames'), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName), variables('builtInRoleNames')[coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName], if(contains(coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName, '/providers/Microsoft.Authorization/roleDefinitions/'), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName, subscriptionResourceId('Microsoft.Authorization/roleDefinitions', coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName)))]",
                        "principalId": "[coalesce(parameters('roleAssignments'), createArray())[copyIndex()].principalId]",
                        "description": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'description')]",
                        "principalType": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'principalType')]",
                        "condition": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'condition')]",
                        "conditionVersion": "[if(not(empty(tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'condition'))), coalesce(tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'conditionVersion'), '2.0'), null())]",
                        "delegatedManagedIdentityResourceId": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'delegatedManagedIdentityResourceId')]"
                      },
                      "dependsOn": [
                        "privateEndpoint"
                      ]
                    },
                    "privateEndpoint_privateDnsZoneGroup": {
                      "condition": "[not(empty(parameters('privateDnsZoneResourceIds')))]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('{0}-PrivateEndpoint-PrivateDnsZoneGroup', uniqueString(deployment().name))]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "name": {
                            "value": "[coalesce(parameters('privateDnsZoneGroupName'), 'default')]"
                          },
                          "privateDNSResourceIds": {
                            "value": "[coalesce(parameters('privateDnsZoneResourceIds'), createArray())]"
                          },
                          "privateEndpointName": {
                            "value": "[parameters('name')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.24.24.22086",
                              "templateHash": "9321937464667207030"
                            },
                            "name": "Private Endpoint Private DNS Zone Groups",
                            "description": "This module deploys a Private Endpoint Private DNS Zone Group.",
                            "owner": "Azure/module-maintainers"
                          },
                          "parameters": {
                            "privateEndpointName": {
                              "type": "string",
                              "metadata": {
                                "description": "Conditional. The name of the parent private endpoint. Required if the template is used in a standalone deployment."
                              }
                            },
                            "privateDNSResourceIds": {
                              "type": "array",
                              "minLength": 1,
                              "maxLength": 5,
                              "metadata": {
                                "description": "Required. Array of private DNS zone resource IDs. A DNS zone group can support up to 5 DNS zones."
                              }
                            },
                            "name": {
                              "type": "string",
                              "defaultValue": "default",
                              "metadata": {
                                "description": "Optional. The name of the private DNS zone group."
                              }
                            }
                          },
                          "variables": {
                            "copy": [
                              {
                                "name": "privateDnsZoneConfigs",
                                "count": "[length(parameters('privateDNSResourceIds'))]",
                                "input": {
                                  "name": "[last(split(parameters('privateDNSResourceIds')[copyIndex('privateDnsZoneConfigs')], '/'))]",
                                  "properties": {
                                    "privateDnsZoneId": "[parameters('privateDNSResourceIds')[copyIndex('privateDnsZoneConfigs')]]"
                                  }
                                }
                              }
                            ]
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Network/privateEndpoints/privateDnsZoneGroups",
                              "apiVersion": "2023-04-01",
                              "name": "[format('{0}/{1}', parameters('privateEndpointName'), parameters('name'))]",
                              "properties": {
                                "privateDnsZoneConfigs": "[variables('privateDnsZoneConfigs')]"
                              }
                            }
                          ],
                          "outputs": {
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "The name of the private endpoint DNS zone group."
                              },
                              "value": "[parameters('name')]"
                            },
                            "resourceId": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource ID of the private endpoint DNS zone group."
                              },
                              "value": "[resourceId('Microsoft.Network/privateEndpoints/privateDnsZoneGroups', parameters('privateEndpointName'), parameters('name'))]"
                            },
                            "resourceGroupName": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource group the private endpoint DNS zone group was deployed into."
                              },
                              "value": "[resourceGroup().name]"
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "privateEndpoint"
                      ]
                    }
                  },
                  "outputs": {
                    "resourceGroupName": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource group the private endpoint was deployed into."
                      },
                      "value": "[resourceGroup().name]"
                    },
                    "resourceId": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource ID of the private endpoint."
                      },
                      "value": "[resourceId('Microsoft.Network/privateEndpoints', parameters('name'))]"
                    },
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the private endpoint."
                      },
                      "value": "[parameters('name')]"
                    },
                    "location": {
                      "type": "string",
                      "metadata": {
                        "description": "The location the resource was deployed into."
                      },
                      "value": "[reference('privateEndpoint', '2023-04-01', 'full').location]"
                    },
                    "groupId": {
                      "type": "string",
                      "metadata": {
                        "description": "The group Id for the private endpoint Group."
                      },
                      "value": "[if(not(empty(reference('privateEndpoint').manualPrivateLinkServiceConnections)), reference('privateEndpoint').manualPrivateLinkServiceConnections[0].properties.groupIds[0], reference('privateEndpoint').privateLinkServiceConnections[0].properties.groupIds[0])]"
                    }
                  }
                }
              },
              "dependsOn": [
                "keyVault"
              ]
            }
          },
          "outputs": {
            "resourceId": {
              "type": "string",
              "metadata": {
                "description": "The resource ID of the key vault."
              },
              "value": "[resourceId('Microsoft.KeyVault/vaults', parameters('name'))]"
            },
            "resourceGroupName": {
              "type": "string",
              "metadata": {
                "description": "The name of the resource group the key vault was created in."
              },
              "value": "[resourceGroup().name]"
            },
            "name": {
              "type": "string",
              "metadata": {
                "description": "The name of the key vault."
              },
              "value": "[parameters('name')]"
            },
            "uri": {
              "type": "string",
              "metadata": {
                "description": "The URI of the key vault."
              },
              "value": "[reference('keyVault').vaultUri]"
            },
            "location": {
              "type": "string",
              "metadata": {
                "description": "The location the resource was deployed into."
              },
              "value": "[reference('keyVault', '2022-07-01', 'full').location]"
            }
          }
        }
      },
      "dependsOn": [
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), format('{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName')))), 'Microsoft.Resources/deployments', 'uami')]",
        "[subscriptionResourceId('Microsoft.Resources/resourceGroups', if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), format('{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName'))))]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "openai",
      "resourceGroup": "[if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), format('{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName')))]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "name": {
            "value": "[format('oai-{0}', variables('resourceToken'))]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "tags": {
            "value": "[union(parameters('tags'), createObject('azd-service-name', format('aoai-{0}', parameters('tags')['azd-env-name'])))]"
          },
          "kind": {
            "value": "OpenAI"
          },
          "customSubDomainName": {
            "value": "[format('oai-{0}', variables('resourceToken'))]"
          },
          "sku": {
            "value": "S0"
          },
          "deployments": {
            "value": "[variables('openAiDeployments')]"
          },
          "disableLocalAuth": {
            "value": false
          },
          "publicNetworkAccess": "[if(parameters('enableZeroTrust'), createObject('value', 'Disabled'), createObject('value', 'Enabled'))]",
          "networkAcls": "[if(parameters('enableZeroTrust'), createObject('value', createObject('defaultAction', 'Deny', 'bypass', 'AzureServices')), createObject('value', createObject('defaultAction', 'Allow')))]",
          "roleAssignments": {
            "value": [
              {
                "roleDefinitionIdOrName": "Cognitive Services OpenAI User",
                "principalId": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), format('{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName')))), 'Microsoft.Resources/deployments', 'uami'), '2022-09-01').outputs.principalId.value]",
                "principalType": "ServicePrincipal"
              },
              {
                "roleDefinitionIdOrName": "Cognitive Services OpenAI User",
                "principalId": "[parameters('principalId')]",
                "principalType": "[variables('principalType')]"
              }
            ]
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "languageVersion": "2.0",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.30.23.60470",
              "templateHash": "1389143417830954770"
            },
            "name": "Cognitive Services",
            "description": "This module deploys a Cognitive Service.",
            "owner": "Azure/module-maintainers"
          },
          "definitions": {
            "diagnosticSettingType": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. The name of diagnostic setting."
                    }
                  },
                  "logCategoriesAndGroups": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "category": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Name of a Diagnostic Log category for a resource type this setting is applied to. Set the specific logs to collect here."
                          }
                        },
                        "categoryGroup": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Name of a Diagnostic Log category group for a resource type this setting is applied to. Set to `allLogs` to collect all logs."
                          }
                        },
                        "enabled": {
                          "type": "bool",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Enable or disable the category explicitly. Default is `true`."
                          }
                        }
                      }
                    },
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. The name of logs that will be streamed. \"allLogs\" includes all possible logs for the resource. Set to `[]` to disable log collection."
                    }
                  },
                  "metricCategories": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "category": {
                          "type": "string",
                          "metadata": {
                            "description": "Required. Name of a Diagnostic Metric category for a resource type this setting is applied to. Set to `AllMetrics` to collect all metrics."
                          }
                        },
                        "enabled": {
                          "type": "bool",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Enable or disable the category explicitly. Default is `true`."
                          }
                        }
                      }
                    },
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. The name of metrics that will be streamed. \"allMetrics\" includes all possible metrics for the resource. Set to `[]` to disable metric collection."
                    }
                  },
                  "logAnalyticsDestinationType": {
                    "type": "string",
                    "allowedValues": [
                      "AzureDiagnostics",
                      "Dedicated"
                    ],
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. A string indicating whether the export to Log Analytics should use the default destination type, i.e. AzureDiagnostics, or use a destination type."
                    }
                  },
                  "workspaceResourceId": {
                    "type": "string",
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. Resource ID of the diagnostic log analytics workspace. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                    }
                  },
                  "storageAccountResourceId": {
                    "type": "string",
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. Resource ID of the diagnostic storage account. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                    }
                  },
                  "eventHubAuthorizationRuleResourceId": {
                    "type": "string",
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. Resource ID of the diagnostic event hub authorization rule for the Event Hubs namespace in which the event hub should be created or streamed to."
                    }
                  },
                  "eventHubName": {
                    "type": "string",
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. Name of the diagnostic event hub within the namespace to which logs are streamed. Without this, an event hub is created for each log category. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                    }
                  },
                  "marketplacePartnerResourceId": {
                    "type": "string",
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. The full ARM resource ID of the Marketplace resource to which you would like to send Diagnostic Logs."
                    }
                  }
                }
              },
              "nullable": true
            },
            "roleAssignmentType": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. The name (as GUID) of the role assignment. If not provided, a GUID will be generated."
                    }
                  },
                  "roleDefinitionIdOrName": {
                    "type": "string",
                    "metadata": {
                      "description": "Required. The role to assign. You can provide either the display name of the role definition, the role definition GUID, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                    }
                  },
                  "principalId": {
                    "type": "string",
                    "metadata": {
                      "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
                    }
                  },
                  "principalType": {
                    "type": "string",
                    "allowedValues": [
                      "Device",
                      "ForeignGroup",
                      "Group",
                      "ServicePrincipal",
                      "User"
                    ],
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. The principal type of the assigned principal ID."
                    }
                  },
                  "description": {
                    "type": "string",
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. The description of the role assignment."
                    }
                  },
                  "condition": {
                    "type": "string",
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\"."
                    }
                  },
                  "conditionVersion": {
                    "type": "string",
                    "allowedValues": [
                      "2.0"
                    ],
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. Version of the condition."
                    }
                  },
                  "delegatedManagedIdentityResourceId": {
                    "type": "string",
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. The Resource Id of the delegated managed identity resource."
                    }
                  }
                }
              },
              "nullable": true
            },
            "privateEndpointType": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. The name of the private endpoint."
                    }
                  },
                  "location": {
                    "type": "string",
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. The location to deploy the private endpoint to."
                    }
                  },
                  "privateLinkServiceConnectionName": {
                    "type": "string",
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. The name of the private link connection to create."
                    }
                  },
                  "service": {
                    "type": "string",
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. The subresource to deploy the private endpoint for. For example \"vault\", \"mysqlServer\" or \"dataFactory\"."
                    }
                  },
                  "subnetResourceId": {
                    "type": "string",
                    "metadata": {
                      "description": "Required. Resource ID of the subnet where the endpoint needs to be created."
                    }
                  },
                  "privateDnsZoneGroup": {
                    "type": "object",
                    "properties": {
                      "name": {
                        "type": "string",
                        "nullable": true,
                        "metadata": {
                          "description": "Optional. The name of the Private DNS Zone Group."
                        }
                      },
                      "privateDnsZoneGroupConfigs": {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "name": {
                              "type": "string",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. The name of the private DNS zone group config."
                              }
                            },
                            "privateDnsZoneResourceId": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The resource id of the private DNS zone."
                              }
                            }
                          }
                        },
                        "metadata": {
                          "description": "Required. The private DNS zone groups to associate the private endpoint. A DNS zone group can support up to 5 DNS zones."
                        }
                      }
                    },
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. The private DNS zone group to configure for the private endpoint."
                    }
                  },
                  "isManualConnection": {
                    "type": "bool",
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. If Manual Private Link Connection is required."
                    }
                  },
                  "manualConnectionRequestMessage": {
                    "type": "string",
                    "nullable": true,
                    "maxLength": 140,
                    "metadata": {
                      "description": "Optional. A message passed to the owner of the remote resource with the manual connection request."
                    }
                  },
                  "customDnsConfigs": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "fqdn": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Required. Fqdn that resolves to private endpoint IP address."
                          }
                        },
                        "ipAddresses": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          },
                          "metadata": {
                            "description": "Required. A list of private IP addresses of the private endpoint."
                          }
                        }
                      }
                    },
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. Custom DNS configurations."
                    }
                  },
                  "ipConfigurations": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "metadata": {
                            "description": "Required. The name of the resource that is unique within a resource group."
                          }
                        },
                        "properties": {
                          "type": "object",
                          "properties": {
                            "groupId": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The ID of a group obtained from the remote resource that this private endpoint should connect to."
                              }
                            },
                            "memberName": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The member name of a group obtained from the remote resource that this private endpoint should connect to."
                              }
                            },
                            "privateIPAddress": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. A private IP address obtained from the private endpoint's subnet."
                              }
                            }
                          },
                          "metadata": {
                            "description": "Required. Properties of private endpoint IP configurations."
                          }
                        }
                      }
                    },
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. A list of IP configurations of the private endpoint. This will be used to map to the First Party Service endpoints."
                    }
                  },
                  "applicationSecurityGroupResourceIds": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. Application security groups in which the private endpoint IP configuration is included."
                    }
                  },
                  "customNetworkInterfaceName": {
                    "type": "string",
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. The custom name of the network interface attached to the private endpoint."
                    }
                  },
                  "lock": {
                    "$ref": "#/definitions/lockType",
                    "metadata": {
                      "description": "Optional. Specify the type of lock."
                    }
                  },
                  "roleAssignments": {
                    "$ref": "#/definitions/roleAssignmentType",
                    "metadata": {
                      "description": "Optional. Array of role assignments to create."
                    }
                  },
                  "tags": {
                    "type": "object",
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. Tags to be applied on all resources/resource groups in this deployment."
                    }
                  },
                  "enableTelemetry": {
                    "type": "bool",
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. Enable/Disable usage telemetry for module."
                    }
                  },
                  "resourceGroupName": {
                    "type": "string",
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. Specify if you want to deploy the Private Endpoint into a different resource group than the main resource."
                    }
                  }
                }
              },
              "nullable": true
            },
            "managedIdentitiesType": {
              "type": "object",
              "properties": {
                "systemAssigned": {
                  "type": "bool",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Enables system assigned managed identity on the resource."
                  }
                },
                "userAssignedResourceIds": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The resource ID(s) to assign to the resource. Required if a user assigned identity is used for encryption."
                  }
                }
              },
              "nullable": true
            },
            "customerManagedKeyType": {
              "type": "object",
              "properties": {
                "keyVaultResourceId": {
                  "type": "string",
                  "metadata": {
                    "description": "Required. The resource ID of a key vault to reference a customer managed key for encryption from."
                  }
                },
                "keyName": {
                  "type": "string",
                  "metadata": {
                    "description": "Required. The name of the customer managed key to use for encryption."
                  }
                },
                "keyVersion": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The version of the customer managed key to reference for encryption. If not provided, using 'latest'."
                  }
                },
                "userAssignedIdentityResourceId": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. User assigned identity to use when fetching the customer managed key. Required if no system assigned identity is available for use."
                  }
                }
              },
              "nullable": true
            },
            "lockType": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Specify the name of lock."
                  }
                },
                "kind": {
                  "type": "string",
                  "allowedValues": [
                    "CanNotDelete",
                    "None",
                    "ReadOnly"
                  ],
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Specify the type of lock."
                  }
                }
              },
              "nullable": true
            },
            "deploymentsType": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. Specify the name of cognitive service account deployment."
                    }
                  },
                  "model": {
                    "type": "object",
                    "properties": {
                      "name": {
                        "type": "string",
                        "metadata": {
                          "description": "Required. The name of Cognitive Services account deployment model."
                        }
                      },
                      "format": {
                        "type": "string",
                        "metadata": {
                          "description": "Required. The format of Cognitive Services account deployment model."
                        }
                      },
                      "version": {
                        "type": "string",
                        "metadata": {
                          "description": "Required. The version of Cognitive Services account deployment model."
                        }
                      }
                    },
                    "metadata": {
                      "description": "Required. Properties of Cognitive Services account deployment model."
                    }
                  },
                  "sku": {
                    "type": "object",
                    "properties": {
                      "name": {
                        "type": "string",
                        "metadata": {
                          "description": "Required. The name of the resource model definition representing SKU."
                        }
                      },
                      "capacity": {
                        "type": "int",
                        "nullable": true,
                        "metadata": {
                          "description": "Optional. The capacity of the resource model definition representing SKU."
                        }
                      }
                    },
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. The resource model definition representing SKU."
                    }
                  },
                  "raiPolicyName": {
                    "type": "string",
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. The name of RAI policy."
                    }
                  }
                }
              },
              "nullable": true
            },
            "endpointsType": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Type of the endpoint."
                  }
                },
                "endpoint": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "The endpoint URI."
                  }
                }
              },
              "nullable": true
            },
            "secretsExportConfigurationType": {
              "type": "object",
              "properties": {
                "keyVaultResourceId": {
                  "type": "string",
                  "metadata": {
                    "description": "Required. The key vault name where to store the keys and connection strings generated by the modules."
                  }
                },
                "accessKey1Name": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The name for the accessKey1 secret to create."
                  }
                },
                "accessKey2Name": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The name for the accessKey2 secret to create."
                  }
                }
              }
            },
            "secretsOutputType": {
              "type": "object",
              "properties": {},
              "additionalProperties": {
                "$ref": "#/definitions/secretSetType",
                "metadata": {
                  "description": "An exported secret's references."
                }
              }
            },
            "secretSetType": {
              "type": "object",
              "properties": {
                "secretResourceId": {
                  "type": "string",
                  "metadata": {
                    "description": "The resourceId of the exported secret."
                  }
                },
                "secretUri": {
                  "type": "string",
                  "metadata": {
                    "description": "The secret URI of the exported secret."
                  }
                }
              },
              "metadata": {
                "__bicep_imported_from!": {
                  "sourceTemplate": "modules/keyVaultExport.bicep"
                }
              }
            }
          },
          "parameters": {
            "name": {
              "type": "string",
              "metadata": {
                "description": "Required. The name of Cognitive Services account."
              }
            },
            "kind": {
              "type": "string",
              "allowedValues": [
                "AIServices",
                "AnomalyDetector",
                "CognitiveServices",
                "ComputerVision",
                "ContentModerator",
                "ContentSafety",
                "ConversationalLanguageUnderstanding",
                "CustomVision.Prediction",
                "CustomVision.Training",
                "Face",
                "FormRecognizer",
                "HealthInsights",
                "ImmersiveReader",
                "Internal.AllInOne",
                "LUIS",
                "LUIS.Authoring",
                "LanguageAuthoring",
                "MetricsAdvisor",
                "OpenAI",
                "Personalizer",
                "QnAMaker.v2",
                "SpeechServices",
                "TextAnalytics",
                "TextTranslation"
              ],
              "metadata": {
                "description": "Required. Kind of the Cognitive Services account. Use 'Get-AzCognitiveServicesAccountSku' to determine a valid combinations of 'kind' and 'SKU' for your Azure region."
              }
            },
            "sku": {
              "type": "string",
              "defaultValue": "S0",
              "allowedValues": [
                "C2",
                "C3",
                "C4",
                "F0",
                "F1",
                "S",
                "S0",
                "S1",
                "S10",
                "S2",
                "S3",
                "S4",
                "S5",
                "S6",
                "S7",
                "S8",
                "S9"
              ],
              "metadata": {
                "description": "Optional. SKU of the Cognitive Services account. Use 'Get-AzCognitiveServicesAccountSku' to determine a valid combinations of 'kind' and 'SKU' for your Azure region."
              }
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]",
              "metadata": {
                "description": "Optional. Location for all Resources."
              }
            },
            "diagnosticSettings": {
              "$ref": "#/definitions/diagnosticSettingType",
              "metadata": {
                "description": "Optional. The diagnostic settings of the service."
              }
            },
            "publicNetworkAccess": {
              "type": "string",
              "nullable": true,
              "allowedValues": [
                "Enabled",
                "Disabled"
              ],
              "metadata": {
                "description": "Optional. Whether or not public network access is allowed for this resource. For security reasons it should be disabled. If not specified, it will be disabled by default if private endpoints are set and networkAcls are not set."
              }
            },
            "customSubDomainName": {
              "type": "string",
              "nullable": true,
              "metadata": {
                "description": "Conditional. Subdomain name used for token-based authentication. Required if 'networkAcls' or 'privateEndpoints' are set."
              }
            },
            "networkAcls": {
              "type": "object",
              "nullable": true,
              "metadata": {
                "description": "Optional. A collection of rules governing the accessibility from specific network locations."
              }
            },
            "privateEndpoints": {
              "$ref": "#/definitions/privateEndpointType",
              "metadata": {
                "description": "Optional. Configuration details for private endpoints. For security reasons, it is recommended to use private endpoints whenever possible."
              }
            },
            "lock": {
              "$ref": "#/definitions/lockType",
              "metadata": {
                "description": "Optional. The lock settings of the service."
              }
            },
            "roleAssignments": {
              "$ref": "#/definitions/roleAssignmentType",
              "metadata": {
                "description": "Optional. Array of role assignments to create."
              }
            },
            "tags": {
              "type": "object",
              "nullable": true,
              "metadata": {
                "description": "Optional. Tags of the resource."
              }
            },
            "allowedFqdnList": {
              "type": "array",
              "nullable": true,
              "metadata": {
                "description": "Optional. List of allowed FQDN."
              }
            },
            "apiProperties": {
              "type": "object",
              "nullable": true,
              "metadata": {
                "description": "Optional. The API properties for special APIs."
              }
            },
            "disableLocalAuth": {
              "type": "bool",
              "defaultValue": true,
              "metadata": {
                "description": "Optional. Allow only Azure AD authentication. Should be enabled for security reasons."
              }
            },
            "customerManagedKey": {
              "$ref": "#/definitions/customerManagedKeyType",
              "metadata": {
                "description": "Optional. The customer managed key definition."
              }
            },
            "dynamicThrottlingEnabled": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Optional. The flag to enable dynamic throttling."
              }
            },
            "migrationToken": {
              "type": "securestring",
              "nullable": true,
              "metadata": {
                "description": "Optional. Resource migration token."
              }
            },
            "restore": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Optional. Restore a soft-deleted cognitive service at deployment time. Will fail if no such soft-deleted resource exists."
              }
            },
            "restrictOutboundNetworkAccess": {
              "type": "bool",
              "defaultValue": true,
              "metadata": {
                "description": "Optional. Restrict outbound network access."
              }
            },
            "userOwnedStorage": {
              "type": "array",
              "nullable": true,
              "metadata": {
                "description": "Optional. The storage accounts for this resource."
              }
            },
            "managedIdentities": {
              "$ref": "#/definitions/managedIdentitiesType",
              "metadata": {
                "description": "Optional. The managed identity definition for this resource."
              }
            },
            "enableTelemetry": {
              "type": "bool",
              "defaultValue": true,
              "metadata": {
                "description": "Optional. Enable/Disable usage telemetry for module."
              }
            },
            "deployments": {
              "$ref": "#/definitions/deploymentsType",
              "metadata": {
                "description": "Optional. Array of deployments about cognitive service accounts to create."
              }
            },
            "secretsExportConfiguration": {
              "$ref": "#/definitions/secretsExportConfigurationType",
              "nullable": true,
              "metadata": {
                "description": "Optional. Key vault reference and secret settings for the module's secrets export."
              }
            }
          },
          "variables": {
            "copy": [
              {
                "name": "formattedRoleAssignments",
                "count": "[length(coalesce(parameters('roleAssignments'), createArray()))]",
                "input": "[union(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')], createObject('roleDefinitionId', coalesce(tryGet(variables('builtInRoleNames'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName), if(contains(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, '/providers/Microsoft.Authorization/roleDefinitions/'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, subscriptionResourceId('Microsoft.Authorization/roleDefinitions', coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName)))))]"
              }
            ],
            "formattedUserAssignedIdentities": "[reduce(map(coalesce(tryGet(parameters('managedIdentities'), 'userAssignedResourceIds'), createArray()), lambda('id', createObject(format('{0}', lambdaVariables('id')), createObject()))), createObject(), lambda('cur', 'next', union(lambdaVariables('cur'), lambdaVariables('next'))))]",
            "identity": "[if(not(empty(parameters('managedIdentities'))), createObject('type', if(coalesce(tryGet(parameters('managedIdentities'), 'systemAssigned'), false()), if(not(empty(coalesce(tryGet(parameters('managedIdentities'), 'userAssignedResourceIds'), createObject()))), 'SystemAssigned, UserAssigned', 'SystemAssigned'), if(not(empty(coalesce(tryGet(parameters('managedIdentities'), 'userAssignedResourceIds'), createObject()))), 'UserAssigned', null())), 'userAssignedIdentities', if(not(empty(variables('formattedUserAssignedIdentities'))), variables('formattedUserAssignedIdentities'), null())), null())]",
            "builtInRoleNames": {
              "Cognitive Services Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '25fbc0a9-bd7c-42a3-aa1a-3b75d497ee68')]",
              "Cognitive Services Custom Vision Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'c1ff6cc2-c111-46fe-8896-e0ef812ad9f3')]",
              "Cognitive Services Custom Vision Deployment": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '5c4089e1-6d96-4d2f-b296-c1bc7137275f')]",
              "Cognitive Services Custom Vision Labeler": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '88424f51-ebe7-446f-bc41-7fa16989e96c')]",
              "Cognitive Services Custom Vision Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '93586559-c37d-4a6b-ba08-b9f0940c2d73')]",
              "Cognitive Services Custom Vision Trainer": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '0a5ae4ab-0d65-4eeb-be61-29fc9b54394b')]",
              "Cognitive Services Data Reader (Preview)": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b59867f0-fa02-499b-be73-45a86b5b3e1c')]",
              "Cognitive Services Face Recognizer": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '9894cab4-e18a-44aa-828b-cb588cd6f2d7')]",
              "Cognitive Services Immersive Reader User": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b2de6794-95db-4659-8781-7e080d3f2b9d')]",
              "Cognitive Services Language Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f07febfe-79bc-46b1-8b37-790e26e6e498')]",
              "Cognitive Services Language Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '7628b7b8-a8b2-4cdc-b46f-e9b35248918e')]",
              "Cognitive Services Language Writer": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f2310ca1-dc64-4889-bb49-c8e0fa3d47a8')]",
              "Cognitive Services LUIS Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f72c8140-2111-481c-87ff-72b910f6e3f8')]",
              "Cognitive Services LUIS Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18e81cdc-4e98-4e29-a639-e7d10c5a6226')]",
              "Cognitive Services LUIS Writer": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '6322a993-d5c9-4bed-b113-e49bbea25b27')]",
              "Cognitive Services Metrics Advisor Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'cb43c632-a144-4ec5-977c-e80c4affc34a')]",
              "Cognitive Services Metrics Advisor User": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '3b20f47b-3825-43cb-8114-4bd2201156a8')]",
              "Cognitive Services OpenAI Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'a001fd3d-188f-4b5d-821b-7da978bf7442')]",
              "Cognitive Services OpenAI User": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '5e0bd9bd-7b93-4f28-af87-19fc36ad61bd')]",
              "Cognitive Services QnA Maker Editor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f4cc2bf9-21be-47a1-bdf1-5c5804381025')]",
              "Cognitive Services QnA Maker Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '466ccd10-b268-4a11-b098-b4849f024126')]",
              "Cognitive Services Speech Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '0e75ca1e-0464-4b4d-8b93-68208a576181')]",
              "Cognitive Services Speech User": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f2dc8367-1007-4938-bd23-fe263f013447')]",
              "Cognitive Services User": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'a97b65f3-24c7-4388-baec-2e87135dc908')]",
              "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
              "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
              "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
              "Role Based Access Control Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]",
              "User Access Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18d7d88d-d35e-4fb5-a5c3-7773c20a72d9')]"
            }
          },
          "resources": {
            "cMKKeyVault::cMKKey": {
              "condition": "[and(not(empty(tryGet(parameters('customerManagedKey'), 'keyVaultResourceId'))), and(not(empty(tryGet(parameters('customerManagedKey'), 'keyVaultResourceId'))), not(empty(tryGet(parameters('customerManagedKey'), 'keyName')))))]",
              "existing": true,
              "type": "Microsoft.KeyVault/vaults/keys",
              "apiVersion": "2023-02-01",
              "subscriptionId": "[split(coalesce(tryGet(parameters('customerManagedKey'), 'keyVaultResourceId'), '//'), '/')[2]]",
              "resourceGroup": "[split(coalesce(tryGet(parameters('customerManagedKey'), 'keyVaultResourceId'), '////'), '/')[4]]",
              "name": "[format('{0}/{1}', last(split(coalesce(tryGet(parameters('customerManagedKey'), 'keyVaultResourceId'), 'dummyVault'), '/')), coalesce(tryGet(parameters('customerManagedKey'), 'keyName'), 'dummyKey'))]",
              "dependsOn": [
                "cMKKeyVault"
              ]
            },
            "avmTelemetry": {
              "condition": "[parameters('enableTelemetry')]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2024-03-01",
              "name": "[format('46d3xbcp.res.cognitiveservices-account.{0}.{1}', replace('0.8.0', '.', '-'), substring(uniqueString(deployment().name, parameters('location')), 0, 4))]",
              "properties": {
                "mode": "Incremental",
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "resources": [],
                  "outputs": {
                    "telemetry": {
                      "type": "String",
                      "value": "For more information, see https://aka.ms/avm/TelemetryInfo"
                    }
                  }
                }
              }
            },
            "cMKKeyVault": {
              "condition": "[not(empty(tryGet(parameters('customerManagedKey'), 'keyVaultResourceId')))]",
              "existing": true,
              "type": "Microsoft.KeyVault/vaults",
              "apiVersion": "2023-02-01",
              "subscriptionId": "[split(coalesce(tryGet(parameters('customerManagedKey'), 'keyVaultResourceId'), '//'), '/')[2]]",
              "resourceGroup": "[split(coalesce(tryGet(parameters('customerManagedKey'), 'keyVaultResourceId'), '////'), '/')[4]]",
              "name": "[last(split(coalesce(tryGet(parameters('customerManagedKey'), 'keyVaultResourceId'), 'dummyVault'), '/'))]"
            },
            "cMKUserAssignedIdentity": {
              "condition": "[not(empty(tryGet(parameters('customerManagedKey'), 'userAssignedIdentityResourceId')))]",
              "existing": true,
              "type": "Microsoft.ManagedIdentity/userAssignedIdentities",
              "apiVersion": "2023-01-31",
              "subscriptionId": "[split(coalesce(tryGet(parameters('customerManagedKey'), 'userAssignedIdentityResourceId'), '//'), '/')[2]]",
              "resourceGroup": "[split(coalesce(tryGet(parameters('customerManagedKey'), 'userAssignedIdentityResourceId'), '////'), '/')[4]]",
              "name": "[last(split(coalesce(tryGet(parameters('customerManagedKey'), 'userAssignedIdentityResourceId'), 'dummyMsi'), '/'))]"
            },
            "cognitiveService": {
              "type": "Microsoft.CognitiveServices/accounts",
              "apiVersion": "2023-05-01",
              "name": "[parameters('name')]",
              "kind": "[parameters('kind')]",
              "identity": "[variables('identity')]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "sku": {
                "name": "[parameters('sku')]"
              },
              "properties": {
                "customSubDomainName": "[parameters('customSubDomainName')]",
                "networkAcls": "[if(not(empty(coalesce(parameters('networkAcls'), createObject()))), createObject('defaultAction', tryGet(parameters('networkAcls'), 'defaultAction'), 'virtualNetworkRules', coalesce(tryGet(parameters('networkAcls'), 'virtualNetworkRules'), createArray()), 'ipRules', coalesce(tryGet(parameters('networkAcls'), 'ipRules'), createArray())), null())]",
                "publicNetworkAccess": "[if(not(equals(parameters('publicNetworkAccess'), null())), parameters('publicNetworkAccess'), if(not(empty(parameters('networkAcls'))), 'Enabled', 'Disabled'))]",
                "allowedFqdnList": "[parameters('allowedFqdnList')]",
                "apiProperties": "[parameters('apiProperties')]",
                "disableLocalAuth": "[parameters('disableLocalAuth')]",
                "encryption": "[if(not(empty(parameters('customerManagedKey'))), createObject('keySource', 'Microsoft.KeyVault', 'keyVaultProperties', createObject('identityClientId', if(not(empty(coalesce(tryGet(parameters('customerManagedKey'), 'userAssignedIdentityResourceId'), ''))), reference('cMKUserAssignedIdentity').clientId, null()), 'keyVaultUri', reference('cMKKeyVault').vaultUri, 'keyName', parameters('customerManagedKey').keyName, 'keyVersion', if(not(empty(coalesce(tryGet(parameters('customerManagedKey'), 'keyVersion'), ''))), parameters('customerManagedKey').keyVersion, last(split(reference('cMKKeyVault::cMKKey').keyUriWithVersion, '/'))))), null())]",
                "migrationToken": "[parameters('migrationToken')]",
                "restore": "[parameters('restore')]",
                "restrictOutboundNetworkAccess": "[parameters('restrictOutboundNetworkAccess')]",
                "userOwnedStorage": "[parameters('userOwnedStorage')]",
                "dynamicThrottlingEnabled": "[parameters('dynamicThrottlingEnabled')]"
              },
              "dependsOn": [
                "cMKKeyVault",
                "cMKUserAssignedIdentity"
              ]
            },
            "cognitiveService_deployments": {
              "copy": {
                "name": "cognitiveService_deployments",
                "count": "[length(coalesce(parameters('deployments'), createArray()))]",
                "mode": "serial",
                "batchSize": 1
              },
              "type": "Microsoft.CognitiveServices/accounts/deployments",
              "apiVersion": "2023-05-01",
              "name": "[format('{0}/{1}', parameters('name'), coalesce(tryGet(coalesce(parameters('deployments'), createArray())[copyIndex()], 'name'), format('{0}-deployments', parameters('name'))))]",
              "properties": {
                "model": "[coalesce(parameters('deployments'), createArray())[copyIndex()].model]",
                "raiPolicyName": "[tryGet(coalesce(parameters('deployments'), createArray())[copyIndex()], 'raiPolicyName')]"
              },
              "sku": "[coalesce(tryGet(coalesce(parameters('deployments'), createArray())[copyIndex()], 'sku'), createObject('name', parameters('sku')))]",
              "dependsOn": [
                "cognitiveService"
              ]
            },
            "cognitiveService_lock": {
              "condition": "[and(not(empty(coalesce(parameters('lock'), createObject()))), not(equals(tryGet(parameters('lock'), 'kind'), 'None')))]",
              "type": "Microsoft.Authorization/locks",
              "apiVersion": "2020-05-01",
              "scope": "[format('Microsoft.CognitiveServices/accounts/{0}', parameters('name'))]",
              "name": "[coalesce(tryGet(parameters('lock'), 'name'), format('lock-{0}', parameters('name')))]",
              "properties": {
                "level": "[coalesce(tryGet(parameters('lock'), 'kind'), '')]",
                "notes": "[if(equals(tryGet(parameters('lock'), 'kind'), 'CanNotDelete'), 'Cannot delete resource or child resources.', 'Cannot delete or modify the resource or child resources.')]"
              },
              "dependsOn": [
                "cognitiveService"
              ]
            },
            "cognitiveService_diagnosticSettings": {
              "copy": {
                "name": "cognitiveService_diagnosticSettings",
                "count": "[length(coalesce(parameters('diagnosticSettings'), createArray()))]"
              },
              "type": "Microsoft.Insights/diagnosticSettings",
              "apiVersion": "2021-05-01-preview",
              "scope": "[format('Microsoft.CognitiveServices/accounts/{0}', parameters('name'))]",
              "name": "[coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'name'), format('{0}-diagnosticSettings', parameters('name')))]",
              "properties": {
                "copy": [
                  {
                    "name": "metrics",
                    "count": "[length(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'metricCategories'), createArray(createObject('category', 'AllMetrics'))))]",
                    "input": {
                      "category": "[coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'metricCategories'), createArray(createObject('category', 'AllMetrics')))[copyIndex('metrics')].category]",
                      "enabled": "[coalesce(tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'metricCategories'), createArray(createObject('category', 'AllMetrics')))[copyIndex('metrics')], 'enabled'), true())]",
                      "timeGrain": null
                    }
                  },
                  {
                    "name": "logs",
                    "count": "[length(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs'))))]",
                    "input": {
                      "categoryGroup": "[tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs')))[copyIndex('logs')], 'categoryGroup')]",
                      "category": "[tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs')))[copyIndex('logs')], 'category')]",
                      "enabled": "[coalesce(tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs')))[copyIndex('logs')], 'enabled'), true())]"
                    }
                  }
                ],
                "storageAccountId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'storageAccountResourceId')]",
                "workspaceId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'workspaceResourceId')]",
                "eventHubAuthorizationRuleId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'eventHubAuthorizationRuleResourceId')]",
                "eventHubName": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'eventHubName')]",
                "marketplacePartnerId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'marketplacePartnerResourceId')]",
                "logAnalyticsDestinationType": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logAnalyticsDestinationType')]"
              },
              "dependsOn": [
                "cognitiveService"
              ]
            },
            "cognitiveService_roleAssignments": {
              "copy": {
                "name": "cognitiveService_roleAssignments",
                "count": "[length(coalesce(variables('formattedRoleAssignments'), createArray()))]"
              },
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.CognitiveServices/accounts/{0}', parameters('name'))]",
              "name": "[coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'name'), guid(resourceId('Microsoft.CognitiveServices/accounts', parameters('name')), coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId, coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId))]",
              "properties": {
                "roleDefinitionId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId]",
                "principalId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId]",
                "description": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'description')]",
                "principalType": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'principalType')]",
                "condition": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition')]",
                "conditionVersion": "[if(not(empty(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition'))), coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'conditionVersion'), '2.0'), null())]",
                "delegatedManagedIdentityResourceId": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'delegatedManagedIdentityResourceId')]"
              },
              "dependsOn": [
                "cognitiveService"
              ]
            },
            "cognitiveService_privateEndpoints": {
              "copy": {
                "name": "cognitiveService_privateEndpoints",
                "count": "[length(coalesce(parameters('privateEndpoints'), createArray()))]"
              },
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('{0}-cognitiveService-PrivateEndpoint-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
              "resourceGroup": "[coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'resourceGroupName'), '')]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "name": {
                    "value": "[coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'name'), format('pep-{0}-{1}-{2}', last(split(resourceId('Microsoft.CognitiveServices/accounts', parameters('name')), '/')), coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'service'), 'account'), copyIndex()))]"
                  },
                  "privateLinkServiceConnections": "[if(not(equals(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'isManualConnection'), true())), createObject('value', createArray(createObject('name', coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'privateLinkServiceConnectionName'), format('{0}-{1}-{2}', last(split(resourceId('Microsoft.CognitiveServices/accounts', parameters('name')), '/')), coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'service'), 'account'), copyIndex())), 'properties', createObject('privateLinkServiceId', resourceId('Microsoft.CognitiveServices/accounts', parameters('name')), 'groupIds', createArray(coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'service'), 'account')))))), createObject('value', null()))]",
                  "manualPrivateLinkServiceConnections": "[if(equals(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'isManualConnection'), true()), createObject('value', createArray(createObject('name', coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'privateLinkServiceConnectionName'), format('{0}-{1}-{2}', last(split(resourceId('Microsoft.CognitiveServices/accounts', parameters('name')), '/')), coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'service'), 'account'), copyIndex())), 'properties', createObject('privateLinkServiceId', resourceId('Microsoft.CognitiveServices/accounts', parameters('name')), 'groupIds', createArray(coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'service'), 'account')), 'requestMessage', coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'manualConnectionRequestMessage'), 'Manual approval required.'))))), createObject('value', null()))]",
                  "subnetResourceId": {
                    "value": "[coalesce(parameters('privateEndpoints'), createArray())[copyIndex()].subnetResourceId]"
                  },
                  "enableTelemetry": {
                    "value": "[coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'enableTelemetry'), parameters('enableTelemetry'))]"
                  },
                  "location": {
                    "value": "[coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'location'), reference(split(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()].subnetResourceId, '/subnets/')[0], '2020-06-01', 'Full').location)]"
                  },
                  "lock": {
                    "value": "[coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'lock'), parameters('lock'))]"
                  },
                  "privateDnsZoneGroup": {
                    "value": "[tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'privateDnsZoneGroup')]"
                  },
                  "roleAssignments": {
                    "value": "[tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'roleAssignments')]"
                  },
                  "tags": {
                    "value": "[coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'tags'), parameters('tags'))]"
                  },
                  "customDnsConfigs": {
                    "value": "[tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'customDnsConfigs')]"
                  },
                  "ipConfigurations": {
                    "value": "[tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'ipConfigurations')]"
                  },
                  "applicationSecurityGroupResourceIds": {
                    "value": "[tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'applicationSecurityGroupResourceIds')]"
                  },
                  "customNetworkInterfaceName": {
                    "value": "[tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'customNetworkInterfaceName')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "languageVersion": "2.0",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.29.47.4906",
                      "templateHash": "10193943972635711937"
                    },
                    "name": "Private Endpoints",
                    "description": "This module deploys a Private Endpoint.",
                    "owner": "Azure/module-maintainers"
                  },
                  "definitions": {
                    "privateDnsZoneGroupType": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The name of the Private DNS Zone Group."
                          }
                        },
                        "privateDnsZoneGroupConfigs": {
                          "type": "array",
                          "items": {
                            "$ref": "#/definitions/privateDnsZoneGroupConfigType"
                          },
                          "metadata": {
                            "description": "Required. The private DNS zone groups to associate the private endpoint. A DNS zone group can support up to 5 DNS zones."
                          }
                        }
                      }
                    },
                    "roleAssignmentType": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "name": {
                            "type": "string",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. The name (as GUID) of the role assignment. If not provided, a GUID will be generated."
                            }
                          },
                          "roleDefinitionIdOrName": {
                            "type": "string",
                            "metadata": {
                              "description": "Required. The role to assign. You can provide either the display name of the role definition, the role definition GUID, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                            }
                          },
                          "principalId": {
                            "type": "string",
                            "metadata": {
                              "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
                            }
                          },
                          "principalType": {
                            "type": "string",
                            "allowedValues": [
                              "Device",
                              "ForeignGroup",
                              "Group",
                              "ServicePrincipal",
                              "User"
                            ],
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. The principal type of the assigned principal ID."
                            }
                          },
                          "description": {
                            "type": "string",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. The description of the role assignment."
                            }
                          },
                          "condition": {
                            "type": "string",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\"."
                            }
                          },
                          "conditionVersion": {
                            "type": "string",
                            "allowedValues": [
                              "2.0"
                            ],
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. Version of the condition."
                            }
                          },
                          "delegatedManagedIdentityResourceId": {
                            "type": "string",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. The Resource Id of the delegated managed identity resource."
                            }
                          }
                        }
                      },
                      "nullable": true
                    },
                    "lockType": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Specify the name of lock."
                          }
                        },
                        "kind": {
                          "type": "string",
                          "allowedValues": [
                            "CanNotDelete",
                            "None",
                            "ReadOnly"
                          ],
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Specify the type of lock."
                          }
                        }
                      },
                      "nullable": true
                    },
                    "ipConfigurationsType": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "name": {
                            "type": "string",
                            "metadata": {
                              "description": "Required. The name of the resource that is unique within a resource group."
                            }
                          },
                          "properties": {
                            "type": "object",
                            "properties": {
                              "groupId": {
                                "type": "string",
                                "metadata": {
                                  "description": "Required. The ID of a group obtained from the remote resource that this private endpoint should connect to. If used with private link service connection, this property must be defined as empty string."
                                }
                              },
                              "memberName": {
                                "type": "string",
                                "metadata": {
                                  "description": "Required. The member name of a group obtained from the remote resource that this private endpoint should connect to. If used with private link service connection, this property must be defined as empty string."
                                }
                              },
                              "privateIPAddress": {
                                "type": "string",
                                "metadata": {
                                  "description": "Required. A private IP address obtained from the private endpoint's subnet."
                                }
                              }
                            },
                            "metadata": {
                              "description": "Required. Properties of private endpoint IP configurations."
                            }
                          }
                        }
                      },
                      "nullable": true
                    },
                    "manualPrivateLinkServiceConnectionsType": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "name": {
                            "type": "string",
                            "metadata": {
                              "description": "Required. The name of the private link service connection."
                            }
                          },
                          "properties": {
                            "type": "object",
                            "properties": {
                              "groupIds": {
                                "type": "array",
                                "items": {
                                  "type": "string"
                                },
                                "metadata": {
                                  "description": "Required. The ID of a group obtained from the remote resource that this private endpoint should connect to. If used with private link service connection, this property must be defined as empty string array `[]`."
                                }
                              },
                              "privateLinkServiceId": {
                                "type": "string",
                                "metadata": {
                                  "description": "Required. The resource id of private link service."
                                }
                              },
                              "requestMessage": {
                                "type": "string",
                                "metadata": {
                                  "description": "Optional. A message passed to the owner of the remote resource with this connection request. Restricted to 140 chars."
                                }
                              }
                            },
                            "metadata": {
                              "description": "Required. Properties of private link service connection."
                            }
                          }
                        }
                      },
                      "nullable": true
                    },
                    "privateLinkServiceConnectionsType": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "name": {
                            "type": "string",
                            "metadata": {
                              "description": "Required. The name of the private link service connection."
                            }
                          },
                          "properties": {
                            "type": "object",
                            "properties": {
                              "groupIds": {
                                "type": "array",
                                "items": {
                                  "type": "string"
                                },
                                "metadata": {
                                  "description": "Required. The ID of a group obtained from the remote resource that this private endpoint should connect to. If used with private link service connection, this property must be defined as empty string array `[]`."
                                }
                              },
                              "privateLinkServiceId": {
                                "type": "string",
                                "metadata": {
                                  "description": "Required. The resource id of private link service."
                                }
                              },
                              "requestMessage": {
                                "type": "string",
                                "nullable": true,
                                "metadata": {
                                  "description": "Optional. A message passed to the owner of the remote resource with this connection request. Restricted to 140 chars."
                                }
                              }
                            },
                            "metadata": {
                              "description": "Required. Properties of private link service connection."
                            }
                          }
                        }
                      },
                      "nullable": true
                    },
                    "customDnsConfigType": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "fqdn": {
                            "type": "string",
                            "metadata": {
                              "description": "Required. Fqdn that resolves to private endpoint IP address."
                            }
                          },
                          "ipAddresses": {
                            "type": "array",
                            "items": {
                              "type": "string"
                            },
                            "metadata": {
                              "description": "Required. A list of private IP addresses of the private endpoint."
                            }
                          }
                        }
                      },
                      "nullable": true
                    },
                    "privateDnsZoneGroupConfigType": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The name of the private DNS zone group config."
                          }
                        },
                        "privateDnsZoneResourceId": {
                          "type": "string",
                          "metadata": {
                            "description": "Required. The resource id of the private DNS zone."
                          }
                        }
                      },
                      "metadata": {
                        "__bicep_imported_from!": {
                          "sourceTemplate": "private-dns-zone-group/main.bicep"
                        }
                      }
                    }
                  },
                  "parameters": {
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. Name of the private endpoint resource to create."
                      }
                    },
                    "subnetResourceId": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. Resource ID of the subnet where the endpoint needs to be created."
                      }
                    },
                    "applicationSecurityGroupResourceIds": {
                      "type": "array",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Application security groups in which the private endpoint IP configuration is included."
                      }
                    },
                    "customNetworkInterfaceName": {
                      "type": "string",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The custom name of the network interface attached to the private endpoint."
                      }
                    },
                    "ipConfigurations": {
                      "$ref": "#/definitions/ipConfigurationsType",
                      "metadata": {
                        "description": "Optional. A list of IP configurations of the private endpoint. This will be used to map to the First Party Service endpoints."
                      }
                    },
                    "privateDnsZoneGroup": {
                      "$ref": "#/definitions/privateDnsZoneGroupType",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The private DNS zone group to configure for the private endpoint."
                      }
                    },
                    "location": {
                      "type": "string",
                      "defaultValue": "[resourceGroup().location]",
                      "metadata": {
                        "description": "Optional. Location for all Resources."
                      }
                    },
                    "lock": {
                      "$ref": "#/definitions/lockType",
                      "metadata": {
                        "description": "Optional. The lock settings of the service."
                      }
                    },
                    "roleAssignments": {
                      "$ref": "#/definitions/roleAssignmentType",
                      "metadata": {
                        "description": "Optional. Array of role assignments to create."
                      }
                    },
                    "tags": {
                      "type": "object",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Tags to be applied on all resources/resource groups in this deployment."
                      }
                    },
                    "customDnsConfigs": {
                      "$ref": "#/definitions/customDnsConfigType",
                      "metadata": {
                        "description": "Optional. Custom DNS configurations."
                      }
                    },
                    "manualPrivateLinkServiceConnections": {
                      "$ref": "#/definitions/manualPrivateLinkServiceConnectionsType",
                      "metadata": {
                        "description": "Optional. A grouping of information about the connection to the remote resource. Used when the network admin does not have access to approve connections to the remote resource."
                      }
                    },
                    "privateLinkServiceConnections": {
                      "$ref": "#/definitions/privateLinkServiceConnectionsType",
                      "metadata": {
                        "description": "Optional. A grouping of information about the connection to the remote resource."
                      }
                    },
                    "enableTelemetry": {
                      "type": "bool",
                      "defaultValue": true,
                      "metadata": {
                        "description": "Optional. Enable/Disable usage telemetry for module."
                      }
                    }
                  },
                  "variables": {
                    "copy": [
                      {
                        "name": "formattedRoleAssignments",
                        "count": "[length(coalesce(parameters('roleAssignments'), createArray()))]",
                        "input": "[union(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')], createObject('roleDefinitionId', coalesce(tryGet(variables('builtInRoleNames'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName), if(contains(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, '/providers/Microsoft.Authorization/roleDefinitions/'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, subscriptionResourceId('Microsoft.Authorization/roleDefinitions', coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName)))))]"
                      }
                    ],
                    "builtInRoleNames": {
                      "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                      "DNS Resolver Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '0f2ebee7-ffd4-4fc0-b3b7-664099fdad5d')]",
                      "DNS Zone Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'befefa01-2a29-4197-83a8-272ff33ce314')]",
                      "Domain Services Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'eeaeda52-9324-47f6-8069-5d5bade478b2')]",
                      "Domain Services Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '361898ef-9ed1-48c2-849c-a832951106bb')]",
                      "Network Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '4d97b98b-1d4f-4787-a291-c67834d212e7')]",
                      "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
                      "Private DNS Zone Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b12aa53e-6015-4669-85d0-8515ebb3ae7f')]",
                      "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
                      "Role Based Access Control Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]"
                    }
                  },
                  "resources": {
                    "avmTelemetry": {
                      "condition": "[parameters('enableTelemetry')]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2024-03-01",
                      "name": "[format('46d3xbcp.res.network-privateendpoint.{0}.{1}', replace('0.8.0', '.', '-'), substring(uniqueString(deployment().name, parameters('location')), 0, 4))]",
                      "properties": {
                        "mode": "Incremental",
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "resources": [],
                          "outputs": {
                            "telemetry": {
                              "type": "String",
                              "value": "For more information, see https://aka.ms/avm/TelemetryInfo"
                            }
                          }
                        }
                      }
                    },
                    "privateEndpoint": {
                      "type": "Microsoft.Network/privateEndpoints",
                      "apiVersion": "2023-11-01",
                      "name": "[parameters('name')]",
                      "location": "[parameters('location')]",
                      "tags": "[parameters('tags')]",
                      "properties": {
                        "copy": [
                          {
                            "name": "applicationSecurityGroups",
                            "count": "[length(coalesce(parameters('applicationSecurityGroupResourceIds'), createArray()))]",
                            "input": {
                              "id": "[coalesce(parameters('applicationSecurityGroupResourceIds'), createArray())[copyIndex('applicationSecurityGroups')]]"
                            }
                          }
                        ],
                        "customDnsConfigs": "[coalesce(parameters('customDnsConfigs'), createArray())]",
                        "customNetworkInterfaceName": "[coalesce(parameters('customNetworkInterfaceName'), '')]",
                        "ipConfigurations": "[coalesce(parameters('ipConfigurations'), createArray())]",
                        "manualPrivateLinkServiceConnections": "[coalesce(parameters('manualPrivateLinkServiceConnections'), createArray())]",
                        "privateLinkServiceConnections": "[coalesce(parameters('privateLinkServiceConnections'), createArray())]",
                        "subnet": {
                          "id": "[parameters('subnetResourceId')]"
                        }
                      }
                    },
                    "privateEndpoint_lock": {
                      "condition": "[and(not(empty(coalesce(parameters('lock'), createObject()))), not(equals(tryGet(parameters('lock'), 'kind'), 'None')))]",
                      "type": "Microsoft.Authorization/locks",
                      "apiVersion": "2020-05-01",
                      "scope": "[format('Microsoft.Network/privateEndpoints/{0}', parameters('name'))]",
                      "name": "[coalesce(tryGet(parameters('lock'), 'name'), format('lock-{0}', parameters('name')))]",
                      "properties": {
                        "level": "[coalesce(tryGet(parameters('lock'), 'kind'), '')]",
                        "notes": "[if(equals(tryGet(parameters('lock'), 'kind'), 'CanNotDelete'), 'Cannot delete resource or child resources.', 'Cannot delete or modify the resource or child resources.')]"
                      },
                      "dependsOn": [
                        "privateEndpoint"
                      ]
                    },
                    "privateEndpoint_roleAssignments": {
                      "copy": {
                        "name": "privateEndpoint_roleAssignments",
                        "count": "[length(coalesce(variables('formattedRoleAssignments'), createArray()))]"
                      },
                      "type": "Microsoft.Authorization/roleAssignments",
                      "apiVersion": "2022-04-01",
                      "scope": "[format('Microsoft.Network/privateEndpoints/{0}', parameters('name'))]",
                      "name": "[coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'name'), guid(resourceId('Microsoft.Network/privateEndpoints', parameters('name')), coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId, coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId))]",
                      "properties": {
                        "roleDefinitionId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId]",
                        "principalId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId]",
                        "description": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'description')]",
                        "principalType": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'principalType')]",
                        "condition": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition')]",
                        "conditionVersion": "[if(not(empty(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition'))), coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'conditionVersion'), '2.0'), null())]",
                        "delegatedManagedIdentityResourceId": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'delegatedManagedIdentityResourceId')]"
                      },
                      "dependsOn": [
                        "privateEndpoint"
                      ]
                    },
                    "privateEndpoint_privateDnsZoneGroup": {
                      "condition": "[not(empty(parameters('privateDnsZoneGroup')))]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('{0}-PrivateEndpoint-PrivateDnsZoneGroup', uniqueString(deployment().name))]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "name": {
                            "value": "[tryGet(parameters('privateDnsZoneGroup'), 'name')]"
                          },
                          "privateEndpointName": {
                            "value": "[parameters('name')]"
                          },
                          "privateDnsZoneConfigs": {
                            "value": "[parameters('privateDnsZoneGroup').privateDnsZoneGroupConfigs]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "languageVersion": "2.0",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.29.47.4906",
                              "templateHash": "5805178546717255803"
                            },
                            "name": "Private Endpoint Private DNS Zone Groups",
                            "description": "This module deploys a Private Endpoint Private DNS Zone Group.",
                            "owner": "Azure/module-maintainers"
                          },
                          "definitions": {
                            "privateDnsZoneGroupConfigType": {
                              "type": "object",
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The name of the private DNS zone group config."
                                  }
                                },
                                "privateDnsZoneResourceId": {
                                  "type": "string",
                                  "metadata": {
                                    "description": "Required. The resource id of the private DNS zone."
                                  }
                                }
                              },
                              "metadata": {
                                "__bicep_export!": true
                              }
                            }
                          },
                          "parameters": {
                            "privateEndpointName": {
                              "type": "string",
                              "metadata": {
                                "description": "Conditional. The name of the parent private endpoint. Required if the template is used in a standalone deployment."
                              }
                            },
                            "privateDnsZoneConfigs": {
                              "type": "array",
                              "items": {
                                "$ref": "#/definitions/privateDnsZoneGroupConfigType"
                              },
                              "minLength": 1,
                              "maxLength": 5,
                              "metadata": {
                                "description": "Required. Array of private DNS zone configurations of the private DNS zone group. A DNS zone group can support up to 5 DNS zones."
                              }
                            },
                            "name": {
                              "type": "string",
                              "defaultValue": "default",
                              "metadata": {
                                "description": "Optional. The name of the private DNS zone group."
                              }
                            }
                          },
                          "variables": {
                            "copy": [
                              {
                                "name": "privateDnsZoneConfigsVar",
                                "count": "[length(parameters('privateDnsZoneConfigs'))]",
                                "input": {
                                  "name": "[coalesce(tryGet(parameters('privateDnsZoneConfigs')[copyIndex('privateDnsZoneConfigsVar')], 'name'), last(split(parameters('privateDnsZoneConfigs')[copyIndex('privateDnsZoneConfigsVar')].privateDnsZoneResourceId, '/')))]",
                                  "properties": {
                                    "privateDnsZoneId": "[parameters('privateDnsZoneConfigs')[copyIndex('privateDnsZoneConfigsVar')].privateDnsZoneResourceId]"
                                  }
                                }
                              }
                            ]
                          },
                          "resources": {
                            "privateEndpoint": {
                              "existing": true,
                              "type": "Microsoft.Network/privateEndpoints",
                              "apiVersion": "2023-11-01",
                              "name": "[parameters('privateEndpointName')]"
                            },
                            "privateDnsZoneGroup": {
                              "type": "Microsoft.Network/privateEndpoints/privateDnsZoneGroups",
                              "apiVersion": "2023-11-01",
                              "name": "[format('{0}/{1}', parameters('privateEndpointName'), parameters('name'))]",
                              "properties": {
                                "privateDnsZoneConfigs": "[variables('privateDnsZoneConfigsVar')]"
                              },
                              "dependsOn": [
                                "privateEndpoint"
                              ]
                            }
                          },
                          "outputs": {
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "The name of the private endpoint DNS zone group."
                              },
                              "value": "[parameters('name')]"
                            },
                            "resourceId": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource ID of the private endpoint DNS zone group."
                              },
                              "value": "[resourceId('Microsoft.Network/privateEndpoints/privateDnsZoneGroups', parameters('privateEndpointName'), parameters('name'))]"
                            },
                            "resourceGroupName": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource group the private endpoint DNS zone group was deployed into."
                              },
                              "value": "[resourceGroup().name]"
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "privateEndpoint"
                      ]
                    }
                  },
                  "outputs": {
                    "resourceGroupName": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource group the private endpoint was deployed into."
                      },
                      "value": "[resourceGroup().name]"
                    },
                    "resourceId": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource ID of the private endpoint."
                      },
                      "value": "[resourceId('Microsoft.Network/privateEndpoints', parameters('name'))]"
                    },
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the private endpoint."
                      },
                      "value": "[parameters('name')]"
                    },
                    "location": {
                      "type": "string",
                      "metadata": {
                        "description": "The location the resource was deployed into."
                      },
                      "value": "[reference('privateEndpoint', '2023-11-01', 'full').location]"
                    },
                    "customDnsConfig": {
                      "$ref": "#/definitions/customDnsConfigType",
                      "metadata": {
                        "description": "The custom DNS configurations of the private endpoint."
                      },
                      "value": "[reference('privateEndpoint').customDnsConfigs]"
                    },
                    "networkInterfaceIds": {
                      "type": "array",
                      "metadata": {
                        "description": "The IDs of the network interfaces associated with the private endpoint."
                      },
                      "value": "[reference('privateEndpoint').networkInterfaces]"
                    },
                    "groupId": {
                      "type": "string",
                      "metadata": {
                        "description": "The group Id for the private endpoint Group."
                      },
                      "value": "[if(and(not(empty(reference('privateEndpoint').manualPrivateLinkServiceConnections)), greater(length(tryGet(reference('privateEndpoint').manualPrivateLinkServiceConnections[0].properties, 'groupIds')), 0)), coalesce(tryGet(reference('privateEndpoint').manualPrivateLinkServiceConnections[0].properties, 'groupIds', 0), ''), if(and(not(empty(reference('privateEndpoint').privateLinkServiceConnections)), greater(length(tryGet(reference('privateEndpoint').privateLinkServiceConnections[0].properties, 'groupIds')), 0)), coalesce(tryGet(reference('privateEndpoint').privateLinkServiceConnections[0].properties, 'groupIds', 0), ''), ''))]"
                    }
                  }
                }
              },
              "dependsOn": [
                "cognitiveService"
              ]
            },
            "secretsExport": {
              "condition": "[not(equals(parameters('secretsExportConfiguration'), null()))]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('{0}-secrets-kv', uniqueString(deployment().name, parameters('location')))]",
              "subscriptionId": "[split(coalesce(tryGet(parameters('secretsExportConfiguration'), 'keyVaultResourceId'), '//'), '/')[2]]",
              "resourceGroup": "[split(coalesce(tryGet(parameters('secretsExportConfiguration'), 'keyVaultResourceId'), '////'), '/')[4]]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "keyVaultName": {
                    "value": "[last(split(coalesce(tryGet(parameters('secretsExportConfiguration'), 'keyVaultResourceId'), '//'), '/'))]"
                  },
                  "secretsToSet": {
                    "value": "[union(createArray(), if(contains(parameters('secretsExportConfiguration'), 'accessKey1Name'), createArray(createObject('name', parameters('secretsExportConfiguration').accessKey1Name, 'value', listKeys(resourceId('Microsoft.CognitiveServices/accounts', parameters('name')), '2023-05-01').key1)), createArray()), if(contains(parameters('secretsExportConfiguration'), 'accessKey2Name'), createArray(createObject('name', parameters('secretsExportConfiguration').accessKey2Name, 'value', listKeys(resourceId('Microsoft.CognitiveServices/accounts', parameters('name')), '2023-05-01').key2)), createArray()))]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "languageVersion": "2.0",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.30.23.60470",
                      "templateHash": "12263717469683062316"
                    }
                  },
                  "definitions": {
                    "secretSetType": {
                      "type": "object",
                      "properties": {
                        "secretResourceId": {
                          "type": "string",
                          "metadata": {
                            "description": "The resourceId of the exported secret."
                          }
                        },
                        "secretUri": {
                          "type": "string",
                          "metadata": {
                            "description": "The secret URI of the exported secret."
                          }
                        }
                      },
                      "metadata": {
                        "__bicep_export!": true
                      }
                    },
                    "secretToSetType": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "metadata": {
                            "description": "Required. The name of the secret to set."
                          }
                        },
                        "value": {
                          "type": "securestring",
                          "metadata": {
                            "description": "Required. The value of the secret to set."
                          }
                        }
                      }
                    }
                  },
                  "parameters": {
                    "keyVaultName": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. The name of the Key Vault to set the ecrets in."
                      }
                    },
                    "secretsToSet": {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/secretToSetType"
                      },
                      "metadata": {
                        "description": "Required. The secrets to set in the Key Vault."
                      }
                    }
                  },
                  "resources": {
                    "keyVault": {
                      "existing": true,
                      "type": "Microsoft.KeyVault/vaults",
                      "apiVersion": "2022-07-01",
                      "name": "[parameters('keyVaultName')]"
                    },
                    "secrets": {
                      "copy": {
                        "name": "secrets",
                        "count": "[length(parameters('secretsToSet'))]"
                      },
                      "type": "Microsoft.KeyVault/vaults/secrets",
                      "apiVersion": "2023-07-01",
                      "name": "[format('{0}/{1}', parameters('keyVaultName'), parameters('secretsToSet')[copyIndex()].name)]",
                      "properties": {
                        "value": "[parameters('secretsToSet')[copyIndex()].value]"
                      },
                      "dependsOn": [
                        "keyVault"
                      ]
                    }
                  },
                  "outputs": {
                    "secretsSet": {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/secretSetType"
                      },
                      "metadata": {
                        "description": "The references to the secrets exported to the provided Key Vault."
                      },
                      "copy": {
                        "count": "[length(range(0, length(coalesce(parameters('secretsToSet'), createArray()))))]",
                        "input": {
                          "secretResourceId": "[resourceId('Microsoft.KeyVault/vaults/secrets', parameters('keyVaultName'), parameters('secretsToSet')[range(0, length(coalesce(parameters('secretsToSet'), createArray())))[copyIndex()]].name)]",
                          "secretUri": "[reference(format('secrets[{0}]', range(0, length(coalesce(parameters('secretsToSet'), createArray())))[copyIndex()])).secretUri]"
                        }
                      }
                    }
                  }
                }
              },
              "dependsOn": [
                "cognitiveService"
              ]
            }
          },
          "outputs": {
            "name": {
              "type": "string",
              "metadata": {
                "description": "The name of the cognitive services account."
              },
              "value": "[parameters('name')]"
            },
            "resourceId": {
              "type": "string",
              "metadata": {
                "description": "The resource ID of the cognitive services account."
              },
              "value": "[resourceId('Microsoft.CognitiveServices/accounts', parameters('name'))]"
            },
            "resourceGroupName": {
              "type": "string",
              "metadata": {
                "description": "The resource group the cognitive services account was deployed into."
              },
              "value": "[resourceGroup().name]"
            },
            "endpoint": {
              "type": "string",
              "metadata": {
                "description": "The service endpoint of the cognitive services account."
              },
              "value": "[reference('cognitiveService').endpoint]"
            },
            "endpoints": {
              "$ref": "#/definitions/endpointsType",
              "metadata": {
                "description": "All endpoints available for the cognitive services account, types depends on the cognitive service kind."
              },
              "value": "[reference('cognitiveService').endpoints]"
            },
            "systemAssignedMIPrincipalId": {
              "type": "string",
              "metadata": {
                "description": "The principal ID of the system assigned identity."
              },
              "value": "[coalesce(tryGet(tryGet(reference('cognitiveService', '2023-05-01', 'full'), 'identity'), 'principalId'), '')]"
            },
            "location": {
              "type": "string",
              "metadata": {
                "description": "The location the resource was deployed into."
              },
              "value": "[reference('cognitiveService', '2023-05-01', 'full').location]"
            },
            "exportedSecrets": {
              "$ref": "#/definitions/secretsOutputType",
              "metadata": {
                "description": "A hashtable of references to the secrets exported to the provided Key Vault. The key of each reference is each secret's name."
              },
              "value": "[if(not(equals(parameters('secretsExportConfiguration'), null())), toObject(reference('secretsExport').outputs.secretsSet.value, lambda('secret', last(split(lambdaVariables('secret').secretResourceId, '/'))), lambda('secret', lambdaVariables('secret'))), createObject())]"
            },
            "privateEndpoints": {
              "type": "array",
              "metadata": {
                "description": "The private endpoints of the congitive services account."
              },
              "copy": {
                "count": "[length(if(not(empty(parameters('privateEndpoints'))), array(parameters('privateEndpoints')), createArray()))]",
                "input": {
                  "name": "[reference(format('cognitiveService_privateEndpoints[{0}]', copyIndex())).outputs.name.value]",
                  "resourceId": "[reference(format('cognitiveService_privateEndpoints[{0}]', copyIndex())).outputs.resourceId.value]",
                  "groupId": "[reference(format('cognitiveService_privateEndpoints[{0}]', copyIndex())).outputs.groupId.value]",
                  "customDnsConfig": "[reference(format('cognitiveService_privateEndpoints[{0}]', copyIndex())).outputs.customDnsConfig.value]",
                  "networkInterfaceIds": "[reference(format('cognitiveService_privateEndpoints[{0}]', copyIndex())).outputs.networkInterfaceIds.value]"
                }
              }
            }
          }
        }
      },
      "dependsOn": [
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), format('{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName')))), 'Microsoft.Resources/deployments', 'uami')]",
        "[subscriptionResourceId('Microsoft.Resources/resourceGroups', if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), format('{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName'))))]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "aiserviceaccountDeployment",
      "resourceGroup": "[if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), format('{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName')))]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "kind": {
            "value": "AIServices"
          },
          "name": {
            "value": "[variables('_accounts_aiservice_ms_name')]"
          },
          "customSubDomainName": {
            "value": "[variables('_accounts_aiservice_ms_name')]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "disableLocalAuth": {
            "value": false
          },
          "publicNetworkAccess": "[if(parameters('enableZeroTrust'), createObject('value', 'Disabled'), createObject('value', 'Enabled'))]",
          "networkAcls": "[if(parameters('enableZeroTrust'), createObject('value', createObject('defaultAction', 'Deny', 'bypass', 'AzureServices')), createObject('value', createObject('defaultAction', 'Allow')))]",
          "secretsExportConfiguration": {
            "value": {
              "accessKey1Name": "[format('{0}-accessKey1', variables('_accounts_aiservice_ms_name'))]",
              "accessKey2Name": "[format('{0}-accessKey2', variables('_accounts_aiservice_ms_name'))]",
              "keyVaultResourceId": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), format('{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName')))), 'Microsoft.Resources/deployments', 'keyVault'), '2022-09-01').outputs.resourceId.value]"
            }
          },
          "roleAssignments": {
            "value": [
              {
                "roleDefinitionIdOrName": "Cognitive Services User",
                "principalId": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), format('{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName')))), 'Microsoft.Resources/deployments', 'uami'), '2022-09-01').outputs.principalId.value]",
                "principalType": "ServicePrincipal"
              },
              {
                "roleDefinitionIdOrName": "Cognitive Services User",
                "principalId": "[parameters('principalId')]",
                "principalType": "[variables('principalType')]"
              }
            ]
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "languageVersion": "2.0",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.30.23.60470",
              "templateHash": "1389143417830954770"
            },
            "name": "Cognitive Services",
            "description": "This module deploys a Cognitive Service.",
            "owner": "Azure/module-maintainers"
          },
          "definitions": {
            "diagnosticSettingType": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. The name of diagnostic setting."
                    }
                  },
                  "logCategoriesAndGroups": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "category": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Name of a Diagnostic Log category for a resource type this setting is applied to. Set the specific logs to collect here."
                          }
                        },
                        "categoryGroup": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Name of a Diagnostic Log category group for a resource type this setting is applied to. Set to `allLogs` to collect all logs."
                          }
                        },
                        "enabled": {
                          "type": "bool",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Enable or disable the category explicitly. Default is `true`."
                          }
                        }
                      }
                    },
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. The name of logs that will be streamed. \"allLogs\" includes all possible logs for the resource. Set to `[]` to disable log collection."
                    }
                  },
                  "metricCategories": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "category": {
                          "type": "string",
                          "metadata": {
                            "description": "Required. Name of a Diagnostic Metric category for a resource type this setting is applied to. Set to `AllMetrics` to collect all metrics."
                          }
                        },
                        "enabled": {
                          "type": "bool",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Enable or disable the category explicitly. Default is `true`."
                          }
                        }
                      }
                    },
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. The name of metrics that will be streamed. \"allMetrics\" includes all possible metrics for the resource. Set to `[]` to disable metric collection."
                    }
                  },
                  "logAnalyticsDestinationType": {
                    "type": "string",
                    "allowedValues": [
                      "AzureDiagnostics",
                      "Dedicated"
                    ],
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. A string indicating whether the export to Log Analytics should use the default destination type, i.e. AzureDiagnostics, or use a destination type."
                    }
                  },
                  "workspaceResourceId": {
                    "type": "string",
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. Resource ID of the diagnostic log analytics workspace. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                    }
                  },
                  "storageAccountResourceId": {
                    "type": "string",
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. Resource ID of the diagnostic storage account. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                    }
                  },
                  "eventHubAuthorizationRuleResourceId": {
                    "type": "string",
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. Resource ID of the diagnostic event hub authorization rule for the Event Hubs namespace in which the event hub should be created or streamed to."
                    }
                  },
                  "eventHubName": {
                    "type": "string",
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. Name of the diagnostic event hub within the namespace to which logs are streamed. Without this, an event hub is created for each log category. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                    }
                  },
                  "marketplacePartnerResourceId": {
                    "type": "string",
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. The full ARM resource ID of the Marketplace resource to which you would like to send Diagnostic Logs."
                    }
                  }
                }
              },
              "nullable": true
            },
            "roleAssignmentType": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. The name (as GUID) of the role assignment. If not provided, a GUID will be generated."
                    }
                  },
                  "roleDefinitionIdOrName": {
                    "type": "string",
                    "metadata": {
                      "description": "Required. The role to assign. You can provide either the display name of the role definition, the role definition GUID, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                    }
                  },
                  "principalId": {
                    "type": "string",
                    "metadata": {
                      "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
                    }
                  },
                  "principalType": {
                    "type": "string",
                    "allowedValues": [
                      "Device",
                      "ForeignGroup",
                      "Group",
                      "ServicePrincipal",
                      "User"
                    ],
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. The principal type of the assigned principal ID."
                    }
                  },
                  "description": {
                    "type": "string",
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. The description of the role assignment."
                    }
                  },
                  "condition": {
                    "type": "string",
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\"."
                    }
                  },
                  "conditionVersion": {
                    "type": "string",
                    "allowedValues": [
                      "2.0"
                    ],
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. Version of the condition."
                    }
                  },
                  "delegatedManagedIdentityResourceId": {
                    "type": "string",
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. The Resource Id of the delegated managed identity resource."
                    }
                  }
                }
              },
              "nullable": true
            },
            "privateEndpointType": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. The name of the private endpoint."
                    }
                  },
                  "location": {
                    "type": "string",
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. The location to deploy the private endpoint to."
                    }
                  },
                  "privateLinkServiceConnectionName": {
                    "type": "string",
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. The name of the private link connection to create."
                    }
                  },
                  "service": {
                    "type": "string",
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. The subresource to deploy the private endpoint for. For example \"vault\", \"mysqlServer\" or \"dataFactory\"."
                    }
                  },
                  "subnetResourceId": {
                    "type": "string",
                    "metadata": {
                      "description": "Required. Resource ID of the subnet where the endpoint needs to be created."
                    }
                  },
                  "privateDnsZoneGroup": {
                    "type": "object",
                    "properties": {
                      "name": {
                        "type": "string",
                        "nullable": true,
                        "metadata": {
                          "description": "Optional. The name of the Private DNS Zone Group."
                        }
                      },
                      "privateDnsZoneGroupConfigs": {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "name": {
                              "type": "string",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. The name of the private DNS zone group config."
                              }
                            },
                            "privateDnsZoneResourceId": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The resource id of the private DNS zone."
                              }
                            }
                          }
                        },
                        "metadata": {
                          "description": "Required. The private DNS zone groups to associate the private endpoint. A DNS zone group can support up to 5 DNS zones."
                        }
                      }
                    },
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. The private DNS zone group to configure for the private endpoint."
                    }
                  },
                  "isManualConnection": {
                    "type": "bool",
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. If Manual Private Link Connection is required."
                    }
                  },
                  "manualConnectionRequestMessage": {
                    "type": "string",
                    "nullable": true,
                    "maxLength": 140,
                    "metadata": {
                      "description": "Optional. A message passed to the owner of the remote resource with the manual connection request."
                    }
                  },
                  "customDnsConfigs": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "fqdn": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Required. Fqdn that resolves to private endpoint IP address."
                          }
                        },
                        "ipAddresses": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          },
                          "metadata": {
                            "description": "Required. A list of private IP addresses of the private endpoint."
                          }
                        }
                      }
                    },
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. Custom DNS configurations."
                    }
                  },
                  "ipConfigurations": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "metadata": {
                            "description": "Required. The name of the resource that is unique within a resource group."
                          }
                        },
                        "properties": {
                          "type": "object",
                          "properties": {
                            "groupId": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The ID of a group obtained from the remote resource that this private endpoint should connect to."
                              }
                            },
                            "memberName": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The member name of a group obtained from the remote resource that this private endpoint should connect to."
                              }
                            },
                            "privateIPAddress": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. A private IP address obtained from the private endpoint's subnet."
                              }
                            }
                          },
                          "metadata": {
                            "description": "Required. Properties of private endpoint IP configurations."
                          }
                        }
                      }
                    },
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. A list of IP configurations of the private endpoint. This will be used to map to the First Party Service endpoints."
                    }
                  },
                  "applicationSecurityGroupResourceIds": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. Application security groups in which the private endpoint IP configuration is included."
                    }
                  },
                  "customNetworkInterfaceName": {
                    "type": "string",
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. The custom name of the network interface attached to the private endpoint."
                    }
                  },
                  "lock": {
                    "$ref": "#/definitions/lockType",
                    "metadata": {
                      "description": "Optional. Specify the type of lock."
                    }
                  },
                  "roleAssignments": {
                    "$ref": "#/definitions/roleAssignmentType",
                    "metadata": {
                      "description": "Optional. Array of role assignments to create."
                    }
                  },
                  "tags": {
                    "type": "object",
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. Tags to be applied on all resources/resource groups in this deployment."
                    }
                  },
                  "enableTelemetry": {
                    "type": "bool",
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. Enable/Disable usage telemetry for module."
                    }
                  },
                  "resourceGroupName": {
                    "type": "string",
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. Specify if you want to deploy the Private Endpoint into a different resource group than the main resource."
                    }
                  }
                }
              },
              "nullable": true
            },
            "managedIdentitiesType": {
              "type": "object",
              "properties": {
                "systemAssigned": {
                  "type": "bool",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Enables system assigned managed identity on the resource."
                  }
                },
                "userAssignedResourceIds": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The resource ID(s) to assign to the resource. Required if a user assigned identity is used for encryption."
                  }
                }
              },
              "nullable": true
            },
            "customerManagedKeyType": {
              "type": "object",
              "properties": {
                "keyVaultResourceId": {
                  "type": "string",
                  "metadata": {
                    "description": "Required. The resource ID of a key vault to reference a customer managed key for encryption from."
                  }
                },
                "keyName": {
                  "type": "string",
                  "metadata": {
                    "description": "Required. The name of the customer managed key to use for encryption."
                  }
                },
                "keyVersion": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The version of the customer managed key to reference for encryption. If not provided, using 'latest'."
                  }
                },
                "userAssignedIdentityResourceId": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. User assigned identity to use when fetching the customer managed key. Required if no system assigned identity is available for use."
                  }
                }
              },
              "nullable": true
            },
            "lockType": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Specify the name of lock."
                  }
                },
                "kind": {
                  "type": "string",
                  "allowedValues": [
                    "CanNotDelete",
                    "None",
                    "ReadOnly"
                  ],
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Specify the type of lock."
                  }
                }
              },
              "nullable": true
            },
            "deploymentsType": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. Specify the name of cognitive service account deployment."
                    }
                  },
                  "model": {
                    "type": "object",
                    "properties": {
                      "name": {
                        "type": "string",
                        "metadata": {
                          "description": "Required. The name of Cognitive Services account deployment model."
                        }
                      },
                      "format": {
                        "type": "string",
                        "metadata": {
                          "description": "Required. The format of Cognitive Services account deployment model."
                        }
                      },
                      "version": {
                        "type": "string",
                        "metadata": {
                          "description": "Required. The version of Cognitive Services account deployment model."
                        }
                      }
                    },
                    "metadata": {
                      "description": "Required. Properties of Cognitive Services account deployment model."
                    }
                  },
                  "sku": {
                    "type": "object",
                    "properties": {
                      "name": {
                        "type": "string",
                        "metadata": {
                          "description": "Required. The name of the resource model definition representing SKU."
                        }
                      },
                      "capacity": {
                        "type": "int",
                        "nullable": true,
                        "metadata": {
                          "description": "Optional. The capacity of the resource model definition representing SKU."
                        }
                      }
                    },
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. The resource model definition representing SKU."
                    }
                  },
                  "raiPolicyName": {
                    "type": "string",
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. The name of RAI policy."
                    }
                  }
                }
              },
              "nullable": true
            },
            "endpointsType": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Type of the endpoint."
                  }
                },
                "endpoint": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "The endpoint URI."
                  }
                }
              },
              "nullable": true
            },
            "secretsExportConfigurationType": {
              "type": "object",
              "properties": {
                "keyVaultResourceId": {
                  "type": "string",
                  "metadata": {
                    "description": "Required. The key vault name where to store the keys and connection strings generated by the modules."
                  }
                },
                "accessKey1Name": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The name for the accessKey1 secret to create."
                  }
                },
                "accessKey2Name": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The name for the accessKey2 secret to create."
                  }
                }
              }
            },
            "secretsOutputType": {
              "type": "object",
              "properties": {},
              "additionalProperties": {
                "$ref": "#/definitions/secretSetType",
                "metadata": {
                  "description": "An exported secret's references."
                }
              }
            },
            "secretSetType": {
              "type": "object",
              "properties": {
                "secretResourceId": {
                  "type": "string",
                  "metadata": {
                    "description": "The resourceId of the exported secret."
                  }
                },
                "secretUri": {
                  "type": "string",
                  "metadata": {
                    "description": "The secret URI of the exported secret."
                  }
                }
              },
              "metadata": {
                "__bicep_imported_from!": {
                  "sourceTemplate": "modules/keyVaultExport.bicep"
                }
              }
            }
          },
          "parameters": {
            "name": {
              "type": "string",
              "metadata": {
                "description": "Required. The name of Cognitive Services account."
              }
            },
            "kind": {
              "type": "string",
              "allowedValues": [
                "AIServices",
                "AnomalyDetector",
                "CognitiveServices",
                "ComputerVision",
                "ContentModerator",
                "ContentSafety",
                "ConversationalLanguageUnderstanding",
                "CustomVision.Prediction",
                "CustomVision.Training",
                "Face",
                "FormRecognizer",
                "HealthInsights",
                "ImmersiveReader",
                "Internal.AllInOne",
                "LUIS",
                "LUIS.Authoring",
                "LanguageAuthoring",
                "MetricsAdvisor",
                "OpenAI",
                "Personalizer",
                "QnAMaker.v2",
                "SpeechServices",
                "TextAnalytics",
                "TextTranslation"
              ],
              "metadata": {
                "description": "Required. Kind of the Cognitive Services account. Use 'Get-AzCognitiveServicesAccountSku' to determine a valid combinations of 'kind' and 'SKU' for your Azure region."
              }
            },
            "sku": {
              "type": "string",
              "defaultValue": "S0",
              "allowedValues": [
                "C2",
                "C3",
                "C4",
                "F0",
                "F1",
                "S",
                "S0",
                "S1",
                "S10",
                "S2",
                "S3",
                "S4",
                "S5",
                "S6",
                "S7",
                "S8",
                "S9"
              ],
              "metadata": {
                "description": "Optional. SKU of the Cognitive Services account. Use 'Get-AzCognitiveServicesAccountSku' to determine a valid combinations of 'kind' and 'SKU' for your Azure region."
              }
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]",
              "metadata": {
                "description": "Optional. Location for all Resources."
              }
            },
            "diagnosticSettings": {
              "$ref": "#/definitions/diagnosticSettingType",
              "metadata": {
                "description": "Optional. The diagnostic settings of the service."
              }
            },
            "publicNetworkAccess": {
              "type": "string",
              "nullable": true,
              "allowedValues": [
                "Enabled",
                "Disabled"
              ],
              "metadata": {
                "description": "Optional. Whether or not public network access is allowed for this resource. For security reasons it should be disabled. If not specified, it will be disabled by default if private endpoints are set and networkAcls are not set."
              }
            },
            "customSubDomainName": {
              "type": "string",
              "nullable": true,
              "metadata": {
                "description": "Conditional. Subdomain name used for token-based authentication. Required if 'networkAcls' or 'privateEndpoints' are set."
              }
            },
            "networkAcls": {
              "type": "object",
              "nullable": true,
              "metadata": {
                "description": "Optional. A collection of rules governing the accessibility from specific network locations."
              }
            },
            "privateEndpoints": {
              "$ref": "#/definitions/privateEndpointType",
              "metadata": {
                "description": "Optional. Configuration details for private endpoints. For security reasons, it is recommended to use private endpoints whenever possible."
              }
            },
            "lock": {
              "$ref": "#/definitions/lockType",
              "metadata": {
                "description": "Optional. The lock settings of the service."
              }
            },
            "roleAssignments": {
              "$ref": "#/definitions/roleAssignmentType",
              "metadata": {
                "description": "Optional. Array of role assignments to create."
              }
            },
            "tags": {
              "type": "object",
              "nullable": true,
              "metadata": {
                "description": "Optional. Tags of the resource."
              }
            },
            "allowedFqdnList": {
              "type": "array",
              "nullable": true,
              "metadata": {
                "description": "Optional. List of allowed FQDN."
              }
            },
            "apiProperties": {
              "type": "object",
              "nullable": true,
              "metadata": {
                "description": "Optional. The API properties for special APIs."
              }
            },
            "disableLocalAuth": {
              "type": "bool",
              "defaultValue": true,
              "metadata": {
                "description": "Optional. Allow only Azure AD authentication. Should be enabled for security reasons."
              }
            },
            "customerManagedKey": {
              "$ref": "#/definitions/customerManagedKeyType",
              "metadata": {
                "description": "Optional. The customer managed key definition."
              }
            },
            "dynamicThrottlingEnabled": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Optional. The flag to enable dynamic throttling."
              }
            },
            "migrationToken": {
              "type": "securestring",
              "nullable": true,
              "metadata": {
                "description": "Optional. Resource migration token."
              }
            },
            "restore": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Optional. Restore a soft-deleted cognitive service at deployment time. Will fail if no such soft-deleted resource exists."
              }
            },
            "restrictOutboundNetworkAccess": {
              "type": "bool",
              "defaultValue": true,
              "metadata": {
                "description": "Optional. Restrict outbound network access."
              }
            },
            "userOwnedStorage": {
              "type": "array",
              "nullable": true,
              "metadata": {
                "description": "Optional. The storage accounts for this resource."
              }
            },
            "managedIdentities": {
              "$ref": "#/definitions/managedIdentitiesType",
              "metadata": {
                "description": "Optional. The managed identity definition for this resource."
              }
            },
            "enableTelemetry": {
              "type": "bool",
              "defaultValue": true,
              "metadata": {
                "description": "Optional. Enable/Disable usage telemetry for module."
              }
            },
            "deployments": {
              "$ref": "#/definitions/deploymentsType",
              "metadata": {
                "description": "Optional. Array of deployments about cognitive service accounts to create."
              }
            },
            "secretsExportConfiguration": {
              "$ref": "#/definitions/secretsExportConfigurationType",
              "nullable": true,
              "metadata": {
                "description": "Optional. Key vault reference and secret settings for the module's secrets export."
              }
            }
          },
          "variables": {
            "copy": [
              {
                "name": "formattedRoleAssignments",
                "count": "[length(coalesce(parameters('roleAssignments'), createArray()))]",
                "input": "[union(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')], createObject('roleDefinitionId', coalesce(tryGet(variables('builtInRoleNames'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName), if(contains(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, '/providers/Microsoft.Authorization/roleDefinitions/'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, subscriptionResourceId('Microsoft.Authorization/roleDefinitions', coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName)))))]"
              }
            ],
            "formattedUserAssignedIdentities": "[reduce(map(coalesce(tryGet(parameters('managedIdentities'), 'userAssignedResourceIds'), createArray()), lambda('id', createObject(format('{0}', lambdaVariables('id')), createObject()))), createObject(), lambda('cur', 'next', union(lambdaVariables('cur'), lambdaVariables('next'))))]",
            "identity": "[if(not(empty(parameters('managedIdentities'))), createObject('type', if(coalesce(tryGet(parameters('managedIdentities'), 'systemAssigned'), false()), if(not(empty(coalesce(tryGet(parameters('managedIdentities'), 'userAssignedResourceIds'), createObject()))), 'SystemAssigned, UserAssigned', 'SystemAssigned'), if(not(empty(coalesce(tryGet(parameters('managedIdentities'), 'userAssignedResourceIds'), createObject()))), 'UserAssigned', null())), 'userAssignedIdentities', if(not(empty(variables('formattedUserAssignedIdentities'))), variables('formattedUserAssignedIdentities'), null())), null())]",
            "builtInRoleNames": {
              "Cognitive Services Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '25fbc0a9-bd7c-42a3-aa1a-3b75d497ee68')]",
              "Cognitive Services Custom Vision Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'c1ff6cc2-c111-46fe-8896-e0ef812ad9f3')]",
              "Cognitive Services Custom Vision Deployment": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '5c4089e1-6d96-4d2f-b296-c1bc7137275f')]",
              "Cognitive Services Custom Vision Labeler": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '88424f51-ebe7-446f-bc41-7fa16989e96c')]",
              "Cognitive Services Custom Vision Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '93586559-c37d-4a6b-ba08-b9f0940c2d73')]",
              "Cognitive Services Custom Vision Trainer": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '0a5ae4ab-0d65-4eeb-be61-29fc9b54394b')]",
              "Cognitive Services Data Reader (Preview)": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b59867f0-fa02-499b-be73-45a86b5b3e1c')]",
              "Cognitive Services Face Recognizer": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '9894cab4-e18a-44aa-828b-cb588cd6f2d7')]",
              "Cognitive Services Immersive Reader User": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b2de6794-95db-4659-8781-7e080d3f2b9d')]",
              "Cognitive Services Language Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f07febfe-79bc-46b1-8b37-790e26e6e498')]",
              "Cognitive Services Language Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '7628b7b8-a8b2-4cdc-b46f-e9b35248918e')]",
              "Cognitive Services Language Writer": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f2310ca1-dc64-4889-bb49-c8e0fa3d47a8')]",
              "Cognitive Services LUIS Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f72c8140-2111-481c-87ff-72b910f6e3f8')]",
              "Cognitive Services LUIS Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18e81cdc-4e98-4e29-a639-e7d10c5a6226')]",
              "Cognitive Services LUIS Writer": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '6322a993-d5c9-4bed-b113-e49bbea25b27')]",
              "Cognitive Services Metrics Advisor Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'cb43c632-a144-4ec5-977c-e80c4affc34a')]",
              "Cognitive Services Metrics Advisor User": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '3b20f47b-3825-43cb-8114-4bd2201156a8')]",
              "Cognitive Services OpenAI Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'a001fd3d-188f-4b5d-821b-7da978bf7442')]",
              "Cognitive Services OpenAI User": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '5e0bd9bd-7b93-4f28-af87-19fc36ad61bd')]",
              "Cognitive Services QnA Maker Editor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f4cc2bf9-21be-47a1-bdf1-5c5804381025')]",
              "Cognitive Services QnA Maker Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '466ccd10-b268-4a11-b098-b4849f024126')]",
              "Cognitive Services Speech Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '0e75ca1e-0464-4b4d-8b93-68208a576181')]",
              "Cognitive Services Speech User": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f2dc8367-1007-4938-bd23-fe263f013447')]",
              "Cognitive Services User": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'a97b65f3-24c7-4388-baec-2e87135dc908')]",
              "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
              "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
              "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
              "Role Based Access Control Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]",
              "User Access Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18d7d88d-d35e-4fb5-a5c3-7773c20a72d9')]"
            }
          },
          "resources": {
            "cMKKeyVault::cMKKey": {
              "condition": "[and(not(empty(tryGet(parameters('customerManagedKey'), 'keyVaultResourceId'))), and(not(empty(tryGet(parameters('customerManagedKey'), 'keyVaultResourceId'))), not(empty(tryGet(parameters('customerManagedKey'), 'keyName')))))]",
              "existing": true,
              "type": "Microsoft.KeyVault/vaults/keys",
              "apiVersion": "2023-02-01",
              "subscriptionId": "[split(coalesce(tryGet(parameters('customerManagedKey'), 'keyVaultResourceId'), '//'), '/')[2]]",
              "resourceGroup": "[split(coalesce(tryGet(parameters('customerManagedKey'), 'keyVaultResourceId'), '////'), '/')[4]]",
              "name": "[format('{0}/{1}', last(split(coalesce(tryGet(parameters('customerManagedKey'), 'keyVaultResourceId'), 'dummyVault'), '/')), coalesce(tryGet(parameters('customerManagedKey'), 'keyName'), 'dummyKey'))]",
              "dependsOn": [
                "cMKKeyVault"
              ]
            },
            "avmTelemetry": {
              "condition": "[parameters('enableTelemetry')]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2024-03-01",
              "name": "[format('46d3xbcp.res.cognitiveservices-account.{0}.{1}', replace('0.8.0', '.', '-'), substring(uniqueString(deployment().name, parameters('location')), 0, 4))]",
              "properties": {
                "mode": "Incremental",
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "resources": [],
                  "outputs": {
                    "telemetry": {
                      "type": "String",
                      "value": "For more information, see https://aka.ms/avm/TelemetryInfo"
                    }
                  }
                }
              }
            },
            "cMKKeyVault": {
              "condition": "[not(empty(tryGet(parameters('customerManagedKey'), 'keyVaultResourceId')))]",
              "existing": true,
              "type": "Microsoft.KeyVault/vaults",
              "apiVersion": "2023-02-01",
              "subscriptionId": "[split(coalesce(tryGet(parameters('customerManagedKey'), 'keyVaultResourceId'), '//'), '/')[2]]",
              "resourceGroup": "[split(coalesce(tryGet(parameters('customerManagedKey'), 'keyVaultResourceId'), '////'), '/')[4]]",
              "name": "[last(split(coalesce(tryGet(parameters('customerManagedKey'), 'keyVaultResourceId'), 'dummyVault'), '/'))]"
            },
            "cMKUserAssignedIdentity": {
              "condition": "[not(empty(tryGet(parameters('customerManagedKey'), 'userAssignedIdentityResourceId')))]",
              "existing": true,
              "type": "Microsoft.ManagedIdentity/userAssignedIdentities",
              "apiVersion": "2023-01-31",
              "subscriptionId": "[split(coalesce(tryGet(parameters('customerManagedKey'), 'userAssignedIdentityResourceId'), '//'), '/')[2]]",
              "resourceGroup": "[split(coalesce(tryGet(parameters('customerManagedKey'), 'userAssignedIdentityResourceId'), '////'), '/')[4]]",
              "name": "[last(split(coalesce(tryGet(parameters('customerManagedKey'), 'userAssignedIdentityResourceId'), 'dummyMsi'), '/'))]"
            },
            "cognitiveService": {
              "type": "Microsoft.CognitiveServices/accounts",
              "apiVersion": "2023-05-01",
              "name": "[parameters('name')]",
              "kind": "[parameters('kind')]",
              "identity": "[variables('identity')]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "sku": {
                "name": "[parameters('sku')]"
              },
              "properties": {
                "customSubDomainName": "[parameters('customSubDomainName')]",
                "networkAcls": "[if(not(empty(coalesce(parameters('networkAcls'), createObject()))), createObject('defaultAction', tryGet(parameters('networkAcls'), 'defaultAction'), 'virtualNetworkRules', coalesce(tryGet(parameters('networkAcls'), 'virtualNetworkRules'), createArray()), 'ipRules', coalesce(tryGet(parameters('networkAcls'), 'ipRules'), createArray())), null())]",
                "publicNetworkAccess": "[if(not(equals(parameters('publicNetworkAccess'), null())), parameters('publicNetworkAccess'), if(not(empty(parameters('networkAcls'))), 'Enabled', 'Disabled'))]",
                "allowedFqdnList": "[parameters('allowedFqdnList')]",
                "apiProperties": "[parameters('apiProperties')]",
                "disableLocalAuth": "[parameters('disableLocalAuth')]",
                "encryption": "[if(not(empty(parameters('customerManagedKey'))), createObject('keySource', 'Microsoft.KeyVault', 'keyVaultProperties', createObject('identityClientId', if(not(empty(coalesce(tryGet(parameters('customerManagedKey'), 'userAssignedIdentityResourceId'), ''))), reference('cMKUserAssignedIdentity').clientId, null()), 'keyVaultUri', reference('cMKKeyVault').vaultUri, 'keyName', parameters('customerManagedKey').keyName, 'keyVersion', if(not(empty(coalesce(tryGet(parameters('customerManagedKey'), 'keyVersion'), ''))), parameters('customerManagedKey').keyVersion, last(split(reference('cMKKeyVault::cMKKey').keyUriWithVersion, '/'))))), null())]",
                "migrationToken": "[parameters('migrationToken')]",
                "restore": "[parameters('restore')]",
                "restrictOutboundNetworkAccess": "[parameters('restrictOutboundNetworkAccess')]",
                "userOwnedStorage": "[parameters('userOwnedStorage')]",
                "dynamicThrottlingEnabled": "[parameters('dynamicThrottlingEnabled')]"
              },
              "dependsOn": [
                "cMKKeyVault",
                "cMKUserAssignedIdentity"
              ]
            },
            "cognitiveService_deployments": {
              "copy": {
                "name": "cognitiveService_deployments",
                "count": "[length(coalesce(parameters('deployments'), createArray()))]",
                "mode": "serial",
                "batchSize": 1
              },
              "type": "Microsoft.CognitiveServices/accounts/deployments",
              "apiVersion": "2023-05-01",
              "name": "[format('{0}/{1}', parameters('name'), coalesce(tryGet(coalesce(parameters('deployments'), createArray())[copyIndex()], 'name'), format('{0}-deployments', parameters('name'))))]",
              "properties": {
                "model": "[coalesce(parameters('deployments'), createArray())[copyIndex()].model]",
                "raiPolicyName": "[tryGet(coalesce(parameters('deployments'), createArray())[copyIndex()], 'raiPolicyName')]"
              },
              "sku": "[coalesce(tryGet(coalesce(parameters('deployments'), createArray())[copyIndex()], 'sku'), createObject('name', parameters('sku')))]",
              "dependsOn": [
                "cognitiveService"
              ]
            },
            "cognitiveService_lock": {
              "condition": "[and(not(empty(coalesce(parameters('lock'), createObject()))), not(equals(tryGet(parameters('lock'), 'kind'), 'None')))]",
              "type": "Microsoft.Authorization/locks",
              "apiVersion": "2020-05-01",
              "scope": "[format('Microsoft.CognitiveServices/accounts/{0}', parameters('name'))]",
              "name": "[coalesce(tryGet(parameters('lock'), 'name'), format('lock-{0}', parameters('name')))]",
              "properties": {
                "level": "[coalesce(tryGet(parameters('lock'), 'kind'), '')]",
                "notes": "[if(equals(tryGet(parameters('lock'), 'kind'), 'CanNotDelete'), 'Cannot delete resource or child resources.', 'Cannot delete or modify the resource or child resources.')]"
              },
              "dependsOn": [
                "cognitiveService"
              ]
            },
            "cognitiveService_diagnosticSettings": {
              "copy": {
                "name": "cognitiveService_diagnosticSettings",
                "count": "[length(coalesce(parameters('diagnosticSettings'), createArray()))]"
              },
              "type": "Microsoft.Insights/diagnosticSettings",
              "apiVersion": "2021-05-01-preview",
              "scope": "[format('Microsoft.CognitiveServices/accounts/{0}', parameters('name'))]",
              "name": "[coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'name'), format('{0}-diagnosticSettings', parameters('name')))]",
              "properties": {
                "copy": [
                  {
                    "name": "metrics",
                    "count": "[length(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'metricCategories'), createArray(createObject('category', 'AllMetrics'))))]",
                    "input": {
                      "category": "[coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'metricCategories'), createArray(createObject('category', 'AllMetrics')))[copyIndex('metrics')].category]",
                      "enabled": "[coalesce(tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'metricCategories'), createArray(createObject('category', 'AllMetrics')))[copyIndex('metrics')], 'enabled'), true())]",
                      "timeGrain": null
                    }
                  },
                  {
                    "name": "logs",
                    "count": "[length(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs'))))]",
                    "input": {
                      "categoryGroup": "[tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs')))[copyIndex('logs')], 'categoryGroup')]",
                      "category": "[tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs')))[copyIndex('logs')], 'category')]",
                      "enabled": "[coalesce(tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs')))[copyIndex('logs')], 'enabled'), true())]"
                    }
                  }
                ],
                "storageAccountId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'storageAccountResourceId')]",
                "workspaceId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'workspaceResourceId')]",
                "eventHubAuthorizationRuleId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'eventHubAuthorizationRuleResourceId')]",
                "eventHubName": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'eventHubName')]",
                "marketplacePartnerId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'marketplacePartnerResourceId')]",
                "logAnalyticsDestinationType": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logAnalyticsDestinationType')]"
              },
              "dependsOn": [
                "cognitiveService"
              ]
            },
            "cognitiveService_roleAssignments": {
              "copy": {
                "name": "cognitiveService_roleAssignments",
                "count": "[length(coalesce(variables('formattedRoleAssignments'), createArray()))]"
              },
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.CognitiveServices/accounts/{0}', parameters('name'))]",
              "name": "[coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'name'), guid(resourceId('Microsoft.CognitiveServices/accounts', parameters('name')), coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId, coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId))]",
              "properties": {
                "roleDefinitionId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId]",
                "principalId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId]",
                "description": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'description')]",
                "principalType": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'principalType')]",
                "condition": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition')]",
                "conditionVersion": "[if(not(empty(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition'))), coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'conditionVersion'), '2.0'), null())]",
                "delegatedManagedIdentityResourceId": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'delegatedManagedIdentityResourceId')]"
              },
              "dependsOn": [
                "cognitiveService"
              ]
            },
            "cognitiveService_privateEndpoints": {
              "copy": {
                "name": "cognitiveService_privateEndpoints",
                "count": "[length(coalesce(parameters('privateEndpoints'), createArray()))]"
              },
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('{0}-cognitiveService-PrivateEndpoint-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
              "resourceGroup": "[coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'resourceGroupName'), '')]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "name": {
                    "value": "[coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'name'), format('pep-{0}-{1}-{2}', last(split(resourceId('Microsoft.CognitiveServices/accounts', parameters('name')), '/')), coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'service'), 'account'), copyIndex()))]"
                  },
                  "privateLinkServiceConnections": "[if(not(equals(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'isManualConnection'), true())), createObject('value', createArray(createObject('name', coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'privateLinkServiceConnectionName'), format('{0}-{1}-{2}', last(split(resourceId('Microsoft.CognitiveServices/accounts', parameters('name')), '/')), coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'service'), 'account'), copyIndex())), 'properties', createObject('privateLinkServiceId', resourceId('Microsoft.CognitiveServices/accounts', parameters('name')), 'groupIds', createArray(coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'service'), 'account')))))), createObject('value', null()))]",
                  "manualPrivateLinkServiceConnections": "[if(equals(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'isManualConnection'), true()), createObject('value', createArray(createObject('name', coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'privateLinkServiceConnectionName'), format('{0}-{1}-{2}', last(split(resourceId('Microsoft.CognitiveServices/accounts', parameters('name')), '/')), coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'service'), 'account'), copyIndex())), 'properties', createObject('privateLinkServiceId', resourceId('Microsoft.CognitiveServices/accounts', parameters('name')), 'groupIds', createArray(coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'service'), 'account')), 'requestMessage', coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'manualConnectionRequestMessage'), 'Manual approval required.'))))), createObject('value', null()))]",
                  "subnetResourceId": {
                    "value": "[coalesce(parameters('privateEndpoints'), createArray())[copyIndex()].subnetResourceId]"
                  },
                  "enableTelemetry": {
                    "value": "[coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'enableTelemetry'), parameters('enableTelemetry'))]"
                  },
                  "location": {
                    "value": "[coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'location'), reference(split(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()].subnetResourceId, '/subnets/')[0], '2020-06-01', 'Full').location)]"
                  },
                  "lock": {
                    "value": "[coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'lock'), parameters('lock'))]"
                  },
                  "privateDnsZoneGroup": {
                    "value": "[tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'privateDnsZoneGroup')]"
                  },
                  "roleAssignments": {
                    "value": "[tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'roleAssignments')]"
                  },
                  "tags": {
                    "value": "[coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'tags'), parameters('tags'))]"
                  },
                  "customDnsConfigs": {
                    "value": "[tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'customDnsConfigs')]"
                  },
                  "ipConfigurations": {
                    "value": "[tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'ipConfigurations')]"
                  },
                  "applicationSecurityGroupResourceIds": {
                    "value": "[tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'applicationSecurityGroupResourceIds')]"
                  },
                  "customNetworkInterfaceName": {
                    "value": "[tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'customNetworkInterfaceName')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "languageVersion": "2.0",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.29.47.4906",
                      "templateHash": "10193943972635711937"
                    },
                    "name": "Private Endpoints",
                    "description": "This module deploys a Private Endpoint.",
                    "owner": "Azure/module-maintainers"
                  },
                  "definitions": {
                    "privateDnsZoneGroupType": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The name of the Private DNS Zone Group."
                          }
                        },
                        "privateDnsZoneGroupConfigs": {
                          "type": "array",
                          "items": {
                            "$ref": "#/definitions/privateDnsZoneGroupConfigType"
                          },
                          "metadata": {
                            "description": "Required. The private DNS zone groups to associate the private endpoint. A DNS zone group can support up to 5 DNS zones."
                          }
                        }
                      }
                    },
                    "roleAssignmentType": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "name": {
                            "type": "string",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. The name (as GUID) of the role assignment. If not provided, a GUID will be generated."
                            }
                          },
                          "roleDefinitionIdOrName": {
                            "type": "string",
                            "metadata": {
                              "description": "Required. The role to assign. You can provide either the display name of the role definition, the role definition GUID, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                            }
                          },
                          "principalId": {
                            "type": "string",
                            "metadata": {
                              "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
                            }
                          },
                          "principalType": {
                            "type": "string",
                            "allowedValues": [
                              "Device",
                              "ForeignGroup",
                              "Group",
                              "ServicePrincipal",
                              "User"
                            ],
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. The principal type of the assigned principal ID."
                            }
                          },
                          "description": {
                            "type": "string",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. The description of the role assignment."
                            }
                          },
                          "condition": {
                            "type": "string",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\"."
                            }
                          },
                          "conditionVersion": {
                            "type": "string",
                            "allowedValues": [
                              "2.0"
                            ],
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. Version of the condition."
                            }
                          },
                          "delegatedManagedIdentityResourceId": {
                            "type": "string",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. The Resource Id of the delegated managed identity resource."
                            }
                          }
                        }
                      },
                      "nullable": true
                    },
                    "lockType": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Specify the name of lock."
                          }
                        },
                        "kind": {
                          "type": "string",
                          "allowedValues": [
                            "CanNotDelete",
                            "None",
                            "ReadOnly"
                          ],
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Specify the type of lock."
                          }
                        }
                      },
                      "nullable": true
                    },
                    "ipConfigurationsType": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "name": {
                            "type": "string",
                            "metadata": {
                              "description": "Required. The name of the resource that is unique within a resource group."
                            }
                          },
                          "properties": {
                            "type": "object",
                            "properties": {
                              "groupId": {
                                "type": "string",
                                "metadata": {
                                  "description": "Required. The ID of a group obtained from the remote resource that this private endpoint should connect to. If used with private link service connection, this property must be defined as empty string."
                                }
                              },
                              "memberName": {
                                "type": "string",
                                "metadata": {
                                  "description": "Required. The member name of a group obtained from the remote resource that this private endpoint should connect to. If used with private link service connection, this property must be defined as empty string."
                                }
                              },
                              "privateIPAddress": {
                                "type": "string",
                                "metadata": {
                                  "description": "Required. A private IP address obtained from the private endpoint's subnet."
                                }
                              }
                            },
                            "metadata": {
                              "description": "Required. Properties of private endpoint IP configurations."
                            }
                          }
                        }
                      },
                      "nullable": true
                    },
                    "manualPrivateLinkServiceConnectionsType": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "name": {
                            "type": "string",
                            "metadata": {
                              "description": "Required. The name of the private link service connection."
                            }
                          },
                          "properties": {
                            "type": "object",
                            "properties": {
                              "groupIds": {
                                "type": "array",
                                "items": {
                                  "type": "string"
                                },
                                "metadata": {
                                  "description": "Required. The ID of a group obtained from the remote resource that this private endpoint should connect to. If used with private link service connection, this property must be defined as empty string array `[]`."
                                }
                              },
                              "privateLinkServiceId": {
                                "type": "string",
                                "metadata": {
                                  "description": "Required. The resource id of private link service."
                                }
                              },
                              "requestMessage": {
                                "type": "string",
                                "metadata": {
                                  "description": "Optional. A message passed to the owner of the remote resource with this connection request. Restricted to 140 chars."
                                }
                              }
                            },
                            "metadata": {
                              "description": "Required. Properties of private link service connection."
                            }
                          }
                        }
                      },
                      "nullable": true
                    },
                    "privateLinkServiceConnectionsType": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "name": {
                            "type": "string",
                            "metadata": {
                              "description": "Required. The name of the private link service connection."
                            }
                          },
                          "properties": {
                            "type": "object",
                            "properties": {
                              "groupIds": {
                                "type": "array",
                                "items": {
                                  "type": "string"
                                },
                                "metadata": {
                                  "description": "Required. The ID of a group obtained from the remote resource that this private endpoint should connect to. If used with private link service connection, this property must be defined as empty string array `[]`."
                                }
                              },
                              "privateLinkServiceId": {
                                "type": "string",
                                "metadata": {
                                  "description": "Required. The resource id of private link service."
                                }
                              },
                              "requestMessage": {
                                "type": "string",
                                "nullable": true,
                                "metadata": {
                                  "description": "Optional. A message passed to the owner of the remote resource with this connection request. Restricted to 140 chars."
                                }
                              }
                            },
                            "metadata": {
                              "description": "Required. Properties of private link service connection."
                            }
                          }
                        }
                      },
                      "nullable": true
                    },
                    "customDnsConfigType": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "fqdn": {
                            "type": "string",
                            "metadata": {
                              "description": "Required. Fqdn that resolves to private endpoint IP address."
                            }
                          },
                          "ipAddresses": {
                            "type": "array",
                            "items": {
                              "type": "string"
                            },
                            "metadata": {
                              "description": "Required. A list of private IP addresses of the private endpoint."
                            }
                          }
                        }
                      },
                      "nullable": true
                    },
                    "privateDnsZoneGroupConfigType": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The name of the private DNS zone group config."
                          }
                        },
                        "privateDnsZoneResourceId": {
                          "type": "string",
                          "metadata": {
                            "description": "Required. The resource id of the private DNS zone."
                          }
                        }
                      },
                      "metadata": {
                        "__bicep_imported_from!": {
                          "sourceTemplate": "private-dns-zone-group/main.bicep"
                        }
                      }
                    }
                  },
                  "parameters": {
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. Name of the private endpoint resource to create."
                      }
                    },
                    "subnetResourceId": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. Resource ID of the subnet where the endpoint needs to be created."
                      }
                    },
                    "applicationSecurityGroupResourceIds": {
                      "type": "array",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Application security groups in which the private endpoint IP configuration is included."
                      }
                    },
                    "customNetworkInterfaceName": {
                      "type": "string",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The custom name of the network interface attached to the private endpoint."
                      }
                    },
                    "ipConfigurations": {
                      "$ref": "#/definitions/ipConfigurationsType",
                      "metadata": {
                        "description": "Optional. A list of IP configurations of the private endpoint. This will be used to map to the First Party Service endpoints."
                      }
                    },
                    "privateDnsZoneGroup": {
                      "$ref": "#/definitions/privateDnsZoneGroupType",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The private DNS zone group to configure for the private endpoint."
                      }
                    },
                    "location": {
                      "type": "string",
                      "defaultValue": "[resourceGroup().location]",
                      "metadata": {
                        "description": "Optional. Location for all Resources."
                      }
                    },
                    "lock": {
                      "$ref": "#/definitions/lockType",
                      "metadata": {
                        "description": "Optional. The lock settings of the service."
                      }
                    },
                    "roleAssignments": {
                      "$ref": "#/definitions/roleAssignmentType",
                      "metadata": {
                        "description": "Optional. Array of role assignments to create."
                      }
                    },
                    "tags": {
                      "type": "object",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Tags to be applied on all resources/resource groups in this deployment."
                      }
                    },
                    "customDnsConfigs": {
                      "$ref": "#/definitions/customDnsConfigType",
                      "metadata": {
                        "description": "Optional. Custom DNS configurations."
                      }
                    },
                    "manualPrivateLinkServiceConnections": {
                      "$ref": "#/definitions/manualPrivateLinkServiceConnectionsType",
                      "metadata": {
                        "description": "Optional. A grouping of information about the connection to the remote resource. Used when the network admin does not have access to approve connections to the remote resource."
                      }
                    },
                    "privateLinkServiceConnections": {
                      "$ref": "#/definitions/privateLinkServiceConnectionsType",
                      "metadata": {
                        "description": "Optional. A grouping of information about the connection to the remote resource."
                      }
                    },
                    "enableTelemetry": {
                      "type": "bool",
                      "defaultValue": true,
                      "metadata": {
                        "description": "Optional. Enable/Disable usage telemetry for module."
                      }
                    }
                  },
                  "variables": {
                    "copy": [
                      {
                        "name": "formattedRoleAssignments",
                        "count": "[length(coalesce(parameters('roleAssignments'), createArray()))]",
                        "input": "[union(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')], createObject('roleDefinitionId', coalesce(tryGet(variables('builtInRoleNames'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName), if(contains(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, '/providers/Microsoft.Authorization/roleDefinitions/'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, subscriptionResourceId('Microsoft.Authorization/roleDefinitions', coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName)))))]"
                      }
                    ],
                    "builtInRoleNames": {
                      "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                      "DNS Resolver Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '0f2ebee7-ffd4-4fc0-b3b7-664099fdad5d')]",
                      "DNS Zone Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'befefa01-2a29-4197-83a8-272ff33ce314')]",
                      "Domain Services Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'eeaeda52-9324-47f6-8069-5d5bade478b2')]",
                      "Domain Services Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '361898ef-9ed1-48c2-849c-a832951106bb')]",
                      "Network Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '4d97b98b-1d4f-4787-a291-c67834d212e7')]",
                      "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
                      "Private DNS Zone Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b12aa53e-6015-4669-85d0-8515ebb3ae7f')]",
                      "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
                      "Role Based Access Control Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]"
                    }
                  },
                  "resources": {
                    "avmTelemetry": {
                      "condition": "[parameters('enableTelemetry')]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2024-03-01",
                      "name": "[format('46d3xbcp.res.network-privateendpoint.{0}.{1}', replace('0.8.0', '.', '-'), substring(uniqueString(deployment().name, parameters('location')), 0, 4))]",
                      "properties": {
                        "mode": "Incremental",
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "resources": [],
                          "outputs": {
                            "telemetry": {
                              "type": "String",
                              "value": "For more information, see https://aka.ms/avm/TelemetryInfo"
                            }
                          }
                        }
                      }
                    },
                    "privateEndpoint": {
                      "type": "Microsoft.Network/privateEndpoints",
                      "apiVersion": "2023-11-01",
                      "name": "[parameters('name')]",
                      "location": "[parameters('location')]",
                      "tags": "[parameters('tags')]",
                      "properties": {
                        "copy": [
                          {
                            "name": "applicationSecurityGroups",
                            "count": "[length(coalesce(parameters('applicationSecurityGroupResourceIds'), createArray()))]",
                            "input": {
                              "id": "[coalesce(parameters('applicationSecurityGroupResourceIds'), createArray())[copyIndex('applicationSecurityGroups')]]"
                            }
                          }
                        ],
                        "customDnsConfigs": "[coalesce(parameters('customDnsConfigs'), createArray())]",
                        "customNetworkInterfaceName": "[coalesce(parameters('customNetworkInterfaceName'), '')]",
                        "ipConfigurations": "[coalesce(parameters('ipConfigurations'), createArray())]",
                        "manualPrivateLinkServiceConnections": "[coalesce(parameters('manualPrivateLinkServiceConnections'), createArray())]",
                        "privateLinkServiceConnections": "[coalesce(parameters('privateLinkServiceConnections'), createArray())]",
                        "subnet": {
                          "id": "[parameters('subnetResourceId')]"
                        }
                      }
                    },
                    "privateEndpoint_lock": {
                      "condition": "[and(not(empty(coalesce(parameters('lock'), createObject()))), not(equals(tryGet(parameters('lock'), 'kind'), 'None')))]",
                      "type": "Microsoft.Authorization/locks",
                      "apiVersion": "2020-05-01",
                      "scope": "[format('Microsoft.Network/privateEndpoints/{0}', parameters('name'))]",
                      "name": "[coalesce(tryGet(parameters('lock'), 'name'), format('lock-{0}', parameters('name')))]",
                      "properties": {
                        "level": "[coalesce(tryGet(parameters('lock'), 'kind'), '')]",
                        "notes": "[if(equals(tryGet(parameters('lock'), 'kind'), 'CanNotDelete'), 'Cannot delete resource or child resources.', 'Cannot delete or modify the resource or child resources.')]"
                      },
                      "dependsOn": [
                        "privateEndpoint"
                      ]
                    },
                    "privateEndpoint_roleAssignments": {
                      "copy": {
                        "name": "privateEndpoint_roleAssignments",
                        "count": "[length(coalesce(variables('formattedRoleAssignments'), createArray()))]"
                      },
                      "type": "Microsoft.Authorization/roleAssignments",
                      "apiVersion": "2022-04-01",
                      "scope": "[format('Microsoft.Network/privateEndpoints/{0}', parameters('name'))]",
                      "name": "[coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'name'), guid(resourceId('Microsoft.Network/privateEndpoints', parameters('name')), coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId, coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId))]",
                      "properties": {
                        "roleDefinitionId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId]",
                        "principalId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId]",
                        "description": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'description')]",
                        "principalType": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'principalType')]",
                        "condition": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition')]",
                        "conditionVersion": "[if(not(empty(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition'))), coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'conditionVersion'), '2.0'), null())]",
                        "delegatedManagedIdentityResourceId": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'delegatedManagedIdentityResourceId')]"
                      },
                      "dependsOn": [
                        "privateEndpoint"
                      ]
                    },
                    "privateEndpoint_privateDnsZoneGroup": {
                      "condition": "[not(empty(parameters('privateDnsZoneGroup')))]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('{0}-PrivateEndpoint-PrivateDnsZoneGroup', uniqueString(deployment().name))]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "name": {
                            "value": "[tryGet(parameters('privateDnsZoneGroup'), 'name')]"
                          },
                          "privateEndpointName": {
                            "value": "[parameters('name')]"
                          },
                          "privateDnsZoneConfigs": {
                            "value": "[parameters('privateDnsZoneGroup').privateDnsZoneGroupConfigs]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "languageVersion": "2.0",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.29.47.4906",
                              "templateHash": "5805178546717255803"
                            },
                            "name": "Private Endpoint Private DNS Zone Groups",
                            "description": "This module deploys a Private Endpoint Private DNS Zone Group.",
                            "owner": "Azure/module-maintainers"
                          },
                          "definitions": {
                            "privateDnsZoneGroupConfigType": {
                              "type": "object",
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The name of the private DNS zone group config."
                                  }
                                },
                                "privateDnsZoneResourceId": {
                                  "type": "string",
                                  "metadata": {
                                    "description": "Required. The resource id of the private DNS zone."
                                  }
                                }
                              },
                              "metadata": {
                                "__bicep_export!": true
                              }
                            }
                          },
                          "parameters": {
                            "privateEndpointName": {
                              "type": "string",
                              "metadata": {
                                "description": "Conditional. The name of the parent private endpoint. Required if the template is used in a standalone deployment."
                              }
                            },
                            "privateDnsZoneConfigs": {
                              "type": "array",
                              "items": {
                                "$ref": "#/definitions/privateDnsZoneGroupConfigType"
                              },
                              "minLength": 1,
                              "maxLength": 5,
                              "metadata": {
                                "description": "Required. Array of private DNS zone configurations of the private DNS zone group. A DNS zone group can support up to 5 DNS zones."
                              }
                            },
                            "name": {
                              "type": "string",
                              "defaultValue": "default",
                              "metadata": {
                                "description": "Optional. The name of the private DNS zone group."
                              }
                            }
                          },
                          "variables": {
                            "copy": [
                              {
                                "name": "privateDnsZoneConfigsVar",
                                "count": "[length(parameters('privateDnsZoneConfigs'))]",
                                "input": {
                                  "name": "[coalesce(tryGet(parameters('privateDnsZoneConfigs')[copyIndex('privateDnsZoneConfigsVar')], 'name'), last(split(parameters('privateDnsZoneConfigs')[copyIndex('privateDnsZoneConfigsVar')].privateDnsZoneResourceId, '/')))]",
                                  "properties": {
                                    "privateDnsZoneId": "[parameters('privateDnsZoneConfigs')[copyIndex('privateDnsZoneConfigsVar')].privateDnsZoneResourceId]"
                                  }
                                }
                              }
                            ]
                          },
                          "resources": {
                            "privateEndpoint": {
                              "existing": true,
                              "type": "Microsoft.Network/privateEndpoints",
                              "apiVersion": "2023-11-01",
                              "name": "[parameters('privateEndpointName')]"
                            },
                            "privateDnsZoneGroup": {
                              "type": "Microsoft.Network/privateEndpoints/privateDnsZoneGroups",
                              "apiVersion": "2023-11-01",
                              "name": "[format('{0}/{1}', parameters('privateEndpointName'), parameters('name'))]",
                              "properties": {
                                "privateDnsZoneConfigs": "[variables('privateDnsZoneConfigsVar')]"
                              },
                              "dependsOn": [
                                "privateEndpoint"
                              ]
                            }
                          },
                          "outputs": {
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "The name of the private endpoint DNS zone group."
                              },
                              "value": "[parameters('name')]"
                            },
                            "resourceId": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource ID of the private endpoint DNS zone group."
                              },
                              "value": "[resourceId('Microsoft.Network/privateEndpoints/privateDnsZoneGroups', parameters('privateEndpointName'), parameters('name'))]"
                            },
                            "resourceGroupName": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource group the private endpoint DNS zone group was deployed into."
                              },
                              "value": "[resourceGroup().name]"
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "privateEndpoint"
                      ]
                    }
                  },
                  "outputs": {
                    "resourceGroupName": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource group the private endpoint was deployed into."
                      },
                      "value": "[resourceGroup().name]"
                    },
                    "resourceId": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource ID of the private endpoint."
                      },
                      "value": "[resourceId('Microsoft.Network/privateEndpoints', parameters('name'))]"
                    },
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the private endpoint."
                      },
                      "value": "[parameters('name')]"
                    },
                    "location": {
                      "type": "string",
                      "metadata": {
                        "description": "The location the resource was deployed into."
                      },
                      "value": "[reference('privateEndpoint', '2023-11-01', 'full').location]"
                    },
                    "customDnsConfig": {
                      "$ref": "#/definitions/customDnsConfigType",
                      "metadata": {
                        "description": "The custom DNS configurations of the private endpoint."
                      },
                      "value": "[reference('privateEndpoint').customDnsConfigs]"
                    },
                    "networkInterfaceIds": {
                      "type": "array",
                      "metadata": {
                        "description": "The IDs of the network interfaces associated with the private endpoint."
                      },
                      "value": "[reference('privateEndpoint').networkInterfaces]"
                    },
                    "groupId": {
                      "type": "string",
                      "metadata": {
                        "description": "The group Id for the private endpoint Group."
                      },
                      "value": "[if(and(not(empty(reference('privateEndpoint').manualPrivateLinkServiceConnections)), greater(length(tryGet(reference('privateEndpoint').manualPrivateLinkServiceConnections[0].properties, 'groupIds')), 0)), coalesce(tryGet(reference('privateEndpoint').manualPrivateLinkServiceConnections[0].properties, 'groupIds', 0), ''), if(and(not(empty(reference('privateEndpoint').privateLinkServiceConnections)), greater(length(tryGet(reference('privateEndpoint').privateLinkServiceConnections[0].properties, 'groupIds')), 0)), coalesce(tryGet(reference('privateEndpoint').privateLinkServiceConnections[0].properties, 'groupIds', 0), ''), ''))]"
                    }
                  }
                }
              },
              "dependsOn": [
                "cognitiveService"
              ]
            },
            "secretsExport": {
              "condition": "[not(equals(parameters('secretsExportConfiguration'), null()))]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('{0}-secrets-kv', uniqueString(deployment().name, parameters('location')))]",
              "subscriptionId": "[split(coalesce(tryGet(parameters('secretsExportConfiguration'), 'keyVaultResourceId'), '//'), '/')[2]]",
              "resourceGroup": "[split(coalesce(tryGet(parameters('secretsExportConfiguration'), 'keyVaultResourceId'), '////'), '/')[4]]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "keyVaultName": {
                    "value": "[last(split(coalesce(tryGet(parameters('secretsExportConfiguration'), 'keyVaultResourceId'), '//'), '/'))]"
                  },
                  "secretsToSet": {
                    "value": "[union(createArray(), if(contains(parameters('secretsExportConfiguration'), 'accessKey1Name'), createArray(createObject('name', parameters('secretsExportConfiguration').accessKey1Name, 'value', listKeys(resourceId('Microsoft.CognitiveServices/accounts', parameters('name')), '2023-05-01').key1)), createArray()), if(contains(parameters('secretsExportConfiguration'), 'accessKey2Name'), createArray(createObject('name', parameters('secretsExportConfiguration').accessKey2Name, 'value', listKeys(resourceId('Microsoft.CognitiveServices/accounts', parameters('name')), '2023-05-01').key2)), createArray()))]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "languageVersion": "2.0",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.30.23.60470",
                      "templateHash": "12263717469683062316"
                    }
                  },
                  "definitions": {
                    "secretSetType": {
                      "type": "object",
                      "properties": {
                        "secretResourceId": {
                          "type": "string",
                          "metadata": {
                            "description": "The resourceId of the exported secret."
                          }
                        },
                        "secretUri": {
                          "type": "string",
                          "metadata": {
                            "description": "The secret URI of the exported secret."
                          }
                        }
                      },
                      "metadata": {
                        "__bicep_export!": true
                      }
                    },
                    "secretToSetType": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "metadata": {
                            "description": "Required. The name of the secret to set."
                          }
                        },
                        "value": {
                          "type": "securestring",
                          "metadata": {
                            "description": "Required. The value of the secret to set."
                          }
                        }
                      }
                    }
                  },
                  "parameters": {
                    "keyVaultName": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. The name of the Key Vault to set the ecrets in."
                      }
                    },
                    "secretsToSet": {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/secretToSetType"
                      },
                      "metadata": {
                        "description": "Required. The secrets to set in the Key Vault."
                      }
                    }
                  },
                  "resources": {
                    "keyVault": {
                      "existing": true,
                      "type": "Microsoft.KeyVault/vaults",
                      "apiVersion": "2022-07-01",
                      "name": "[parameters('keyVaultName')]"
                    },
                    "secrets": {
                      "copy": {
                        "name": "secrets",
                        "count": "[length(parameters('secretsToSet'))]"
                      },
                      "type": "Microsoft.KeyVault/vaults/secrets",
                      "apiVersion": "2023-07-01",
                      "name": "[format('{0}/{1}', parameters('keyVaultName'), parameters('secretsToSet')[copyIndex()].name)]",
                      "properties": {
                        "value": "[parameters('secretsToSet')[copyIndex()].value]"
                      },
                      "dependsOn": [
                        "keyVault"
                      ]
                    }
                  },
                  "outputs": {
                    "secretsSet": {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/secretSetType"
                      },
                      "metadata": {
                        "description": "The references to the secrets exported to the provided Key Vault."
                      },
                      "copy": {
                        "count": "[length(range(0, length(coalesce(parameters('secretsToSet'), createArray()))))]",
                        "input": {
                          "secretResourceId": "[resourceId('Microsoft.KeyVault/vaults/secrets', parameters('keyVaultName'), parameters('secretsToSet')[range(0, length(coalesce(parameters('secretsToSet'), createArray())))[copyIndex()]].name)]",
                          "secretUri": "[reference(format('secrets[{0}]', range(0, length(coalesce(parameters('secretsToSet'), createArray())))[copyIndex()])).secretUri]"
                        }
                      }
                    }
                  }
                }
              },
              "dependsOn": [
                "cognitiveService"
              ]
            }
          },
          "outputs": {
            "name": {
              "type": "string",
              "metadata": {
                "description": "The name of the cognitive services account."
              },
              "value": "[parameters('name')]"
            },
            "resourceId": {
              "type": "string",
              "metadata": {
                "description": "The resource ID of the cognitive services account."
              },
              "value": "[resourceId('Microsoft.CognitiveServices/accounts', parameters('name'))]"
            },
            "resourceGroupName": {
              "type": "string",
              "metadata": {
                "description": "The resource group the cognitive services account was deployed into."
              },
              "value": "[resourceGroup().name]"
            },
            "endpoint": {
              "type": "string",
              "metadata": {
                "description": "The service endpoint of the cognitive services account."
              },
              "value": "[reference('cognitiveService').endpoint]"
            },
            "endpoints": {
              "$ref": "#/definitions/endpointsType",
              "metadata": {
                "description": "All endpoints available for the cognitive services account, types depends on the cognitive service kind."
              },
              "value": "[reference('cognitiveService').endpoints]"
            },
            "systemAssignedMIPrincipalId": {
              "type": "string",
              "metadata": {
                "description": "The principal ID of the system assigned identity."
              },
              "value": "[coalesce(tryGet(tryGet(reference('cognitiveService', '2023-05-01', 'full'), 'identity'), 'principalId'), '')]"
            },
            "location": {
              "type": "string",
              "metadata": {
                "description": "The location the resource was deployed into."
              },
              "value": "[reference('cognitiveService', '2023-05-01', 'full').location]"
            },
            "exportedSecrets": {
              "$ref": "#/definitions/secretsOutputType",
              "metadata": {
                "description": "A hashtable of references to the secrets exported to the provided Key Vault. The key of each reference is each secret's name."
              },
              "value": "[if(not(equals(parameters('secretsExportConfiguration'), null())), toObject(reference('secretsExport').outputs.secretsSet.value, lambda('secret', last(split(lambdaVariables('secret').secretResourceId, '/'))), lambda('secret', lambdaVariables('secret'))), createObject())]"
            },
            "privateEndpoints": {
              "type": "array",
              "metadata": {
                "description": "The private endpoints of the congitive services account."
              },
              "copy": {
                "count": "[length(if(not(empty(parameters('privateEndpoints'))), array(parameters('privateEndpoints')), createArray()))]",
                "input": {
                  "name": "[reference(format('cognitiveService_privateEndpoints[{0}]', copyIndex())).outputs.name.value]",
                  "resourceId": "[reference(format('cognitiveService_privateEndpoints[{0}]', copyIndex())).outputs.resourceId.value]",
                  "groupId": "[reference(format('cognitiveService_privateEndpoints[{0}]', copyIndex())).outputs.groupId.value]",
                  "customDnsConfig": "[reference(format('cognitiveService_privateEndpoints[{0}]', copyIndex())).outputs.customDnsConfig.value]",
                  "networkInterfaceIds": "[reference(format('cognitiveService_privateEndpoints[{0}]', copyIndex())).outputs.networkInterfaceIds.value]"
                }
              }
            }
          }
        }
      },
      "dependsOn": [
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), format('{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName')))), 'Microsoft.Resources/deployments', 'uami')]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), format('{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName')))), 'Microsoft.Resources/deployments', 'keyVault')]",
        "[subscriptionResourceId('Microsoft.Resources/resourceGroups', if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), format('{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName'))))]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "monitor",
      "resourceGroup": "[if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), format('{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName')))]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "logAnalyticsName": {
            "value": "[variables('logAnalyticsName')]"
          },
          "resourceToken": {
            "value": "[variables('resourceToken')]"
          },
          "tags": {
            "value": "[parameters('tags')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.36.177.2456",
              "templateHash": "15031266820583365427"
            }
          },
          "parameters": {
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]",
              "metadata": {
                "description": "Location for all resources"
              }
            },
            "logAnalyticsName": {
              "type": "string"
            },
            "resourceToken": {
              "type": "string"
            },
            "tags": {
              "type": "object",
              "defaultValue": {}
            }
          },
          "variables": {
            "appInsightsName": "[format('insights-{0}', parameters('resourceToken'))]"
          },
          "resources": [
            {
              "type": "Microsoft.OperationalInsights/workspaces",
              "apiVersion": "2021-12-01-preview",
              "name": "[parameters('logAnalyticsName')]",
              "location": "[parameters('location')]",
              "properties": {
                "retentionInDays": 30,
                "features": {
                  "searchVersion": 1
                },
                "sku": {
                  "name": "PerGB2018"
                },
                "publicNetworkAccessForIngestion": "Enabled",
                "publicNetworkAccessForQuery": "Enabled"
              },
              "tags": "[union(parameters('tags'), createObject('azd-service-name', parameters('logAnalyticsName')))]"
            },
            {
              "type": "Microsoft.Insights/components",
              "apiVersion": "2020-02-02",
              "name": "[variables('appInsightsName')]",
              "location": "[parameters('location')]",
              "kind": "web",
              "properties": {
                "Application_Type": "web",
                "WorkspaceResourceId": "[resourceId('Microsoft.OperationalInsights/workspaces', parameters('logAnalyticsName'))]",
                "publicNetworkAccessForIngestion": "Enabled",
                "publicNetworkAccessForQuery": "Enabled"
              },
              "tags": "[union(parameters('tags'), createObject('azd-service-name', variables('appInsightsName')))]",
              "dependsOn": [
                "[resourceId('Microsoft.OperationalInsights/workspaces', parameters('logAnalyticsName'))]"
              ]
            }
          ],
          "outputs": {
            "appInsightsName": {
              "type": "string",
              "value": "[variables('appInsightsName')]"
            },
            "appInsightsConnectionString": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.Insights/components', variables('appInsightsName')), '2020-02-02').ConnectionString]"
            },
            "logAnalyticsName": {
              "type": "string",
              "value": "[parameters('logAnalyticsName')]"
            },
            "logAnalyticsWorkspaceId": {
              "type": "string",
              "value": "[resourceId('Microsoft.OperationalInsights/workspaces', parameters('logAnalyticsName'))]"
            }
          }
        }
      },
      "dependsOn": [
        "[subscriptionResourceId('Microsoft.Resources/resourceGroups', if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), format('{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName'))))]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "registry",
      "resourceGroup": "[if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), format('{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName')))]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "location": {
            "value": "[parameters('location')]"
          },
          "identityName": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), format('{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName')))), 'Microsoft.Resources/deployments', 'uami'), '2022-09-01').outputs.name.value]"
          },
          "tags": {
            "value": "[parameters('tags')]"
          },
          "name": {
            "value": "[format('{0}{1}', variables('abbrs').containerRegistryRegistries, variables('resourceToken'))]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.36.177.2456",
              "templateHash": "6661880482126537299"
            }
          },
          "parameters": {
            "name": {
              "type": "string"
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]"
            },
            "tags": {
              "type": "object",
              "defaultValue": {}
            },
            "adminUserEnabled": {
              "type": "bool",
              "defaultValue": true
            },
            "anonymousPullEnabled": {
              "type": "bool",
              "defaultValue": false
            },
            "dataEndpointEnabled": {
              "type": "bool",
              "defaultValue": false
            },
            "encryption": {
              "type": "object",
              "defaultValue": {
                "status": "disabled"
              }
            },
            "networkRuleBypassOptions": {
              "type": "string",
              "defaultValue": "AzureServices"
            },
            "publicNetworkAccess": {
              "type": "string",
              "defaultValue": "Enabled"
            },
            "sku": {
              "type": "object",
              "defaultValue": {
                "name": "Standard"
              }
            },
            "zoneRedundancy": {
              "type": "string",
              "defaultValue": "Disabled"
            },
            "identityName": {
              "type": "string"
            }
          },
          "resources": [
            {
              "type": "Microsoft.ContainerRegistry/registries",
              "apiVersion": "2022-02-01-preview",
              "name": "[parameters('name')]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "sku": "[parameters('sku')]",
              "properties": {
                "adminUserEnabled": "[parameters('adminUserEnabled')]",
                "anonymousPullEnabled": "[parameters('anonymousPullEnabled')]",
                "dataEndpointEnabled": "[parameters('dataEndpointEnabled')]",
                "encryption": "[parameters('encryption')]",
                "networkRuleBypassOptions": "[parameters('networkRuleBypassOptions')]",
                "publicNetworkAccess": "[parameters('publicNetworkAccess')]",
                "zoneRedundancy": "[parameters('zoneRedundancy')]"
              }
            },
            {
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.ContainerRegistry/registries/{0}', parameters('name'))]",
              "name": "[guid(subscription().id, resourceGroup().id, resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('identityName')), 'acrPullRole')]",
              "properties": {
                "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '7f951dda-4ed3-4680-a7ca-43fe172d538d')]",
                "principalType": "ServicePrincipal",
                "principalId": "[reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('identityName')), '2023-01-31').principalId]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.ContainerRegistry/registries', parameters('name'))]"
              ]
            }
          ],
          "outputs": {
            "loginServer": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.ContainerRegistry/registries', parameters('name')), '2022-02-01-preview').loginServer]"
            },
            "name": {
              "type": "string",
              "value": "[parameters('name')]"
            }
          }
        }
      },
      "dependsOn": [
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), format('{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName')))), 'Microsoft.Resources/deployments', 'uami')]",
        "[subscriptionResourceId('Microsoft.Resources/resourceGroups', if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), format('{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName'))))]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "cosmosdb",
      "resourceGroup": "[if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), format('{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName')))]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "cosmosDbAccountName": {
            "value": "[format('cosmos{0}', variables('resourceToken'))]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "identityName": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), format('{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName')))), 'Microsoft.Resources/deployments', 'uami'), '2022-09-01').outputs.name.value]"
          },
          "principalId": {
            "value": "[parameters('principalId')]"
          },
          "principalType": {
            "value": "[variables('principalType')]"
          },
          "tags": {
            "value": "[parameters('tags')]"
          },
          "enableZeroTrust": {
            "value": "[parameters('enableZeroTrust')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.36.177.2456",
              "templateHash": "1523555696916585754"
            }
          },
          "parameters": {
            "cosmosDbAccountName": {
              "type": "string"
            },
            "databaseName": {
              "type": "string",
              "defaultValue": "GenAI"
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]"
            },
            "tags": {
              "type": "object",
              "defaultValue": {}
            },
            "enableZeroTrust": {
              "type": "bool"
            },
            "identityName": {
              "type": "string"
            },
            "principalId": {
              "type": "string"
            },
            "principalType": {
              "type": "string"
            }
          },
          "variables": {
            "cosmosDataContributor": "00000000-0000-0000-0000-000000000002"
          },
          "resources": [
            {
              "type": "Microsoft.DocumentDB/databaseAccounts",
              "apiVersion": "2024-05-15",
              "name": "[parameters('cosmosDbAccountName')]",
              "location": "[parameters('location')]",
              "kind": "GlobalDocumentDB",
              "tags": "[parameters('tags')]",
              "properties": {
                "databaseAccountOfferType": "Standard",
                "locations": [
                  {
                    "locationName": "[parameters('location')]",
                    "failoverPriority": 0,
                    "isZoneRedundant": false
                  }
                ],
                "consistencyPolicy": {
                  "defaultConsistencyLevel": "Session"
                },
                "capabilities": [
                  {
                    "name": "EnableServerless"
                  }
                ],
                "publicNetworkAccess": "[if(parameters('enableZeroTrust'), 'Disabled', 'Enabled')]",
                "isVirtualNetworkFilterEnabled": "[parameters('enableZeroTrust')]",
                "virtualNetworkRules": [],
                "ipRules": []
              }
            },
            {
              "type": "Microsoft.DocumentDB/databaseAccounts/sqlDatabases",
              "apiVersion": "2024-05-15",
              "name": "[format('{0}/{1}', parameters('cosmosDbAccountName'), parameters('databaseName'))]",
              "properties": {
                "resource": {
                  "id": "[parameters('databaseName')]"
                },
                "options": {}
              },
              "dependsOn": [
                "[resourceId('Microsoft.DocumentDB/databaseAccounts', parameters('cosmosDbAccountName'))]"
              ]
            },
            {
              "type": "Microsoft.DocumentDB/databaseAccounts/sqlDatabases/containers",
              "apiVersion": "2024-05-15",
              "name": "[format('{0}/{1}/{2}', parameters('cosmosDbAccountName'), parameters('databaseName'), 'AI_Conversations')]",
              "location": "[parameters('location')]",
              "properties": {
                "resource": {
                  "id": "AI_Conversations",
                  "createMode": "Default",
                  "partitionKey": {
                    "kind": "Hash",
                    "paths": [
                      "/customer_id"
                    ]
                  }
                },
                "options": {}
              },
              "dependsOn": [
                "[resourceId('Microsoft.DocumentDB/databaseAccounts/sqlDatabases', parameters('cosmosDbAccountName'), parameters('databaseName'))]"
              ]
            },
            {
              "type": "Microsoft.DocumentDB/databaseAccounts/sqlDatabases/containers",
              "apiVersion": "2024-05-15",
              "name": "[format('{0}/{1}/{2}', parameters('cosmosDbAccountName'), parameters('databaseName'), 'Customer')]",
              "location": "[parameters('location')]",
              "properties": {
                "resource": {
                  "id": "Customer",
                  "createMode": "Default",
                  "partitionKey": {
                    "kind": "Hash",
                    "paths": [
                      "/customer_id"
                    ]
                  }
                },
                "options": {}
              },
              "dependsOn": [
                "[resourceId('Microsoft.DocumentDB/databaseAccounts/sqlDatabases', parameters('cosmosDbAccountName'), parameters('databaseName'))]"
              ]
            },
            {
              "type": "Microsoft.DocumentDB/databaseAccounts/sqlDatabases/containers",
              "apiVersion": "2024-05-15",
              "name": "[format('{0}/{1}/{2}', parameters('cosmosDbAccountName'), parameters('databaseName'), 'Human_Conversations')]",
              "location": "[parameters('location')]",
              "properties": {
                "resource": {
                  "id": "Human_Conversations",
                  "createMode": "Default",
                  "partitionKey": {
                    "kind": "Hash",
                    "paths": [
                      "/customer_id"
                    ]
                  }
                },
                "options": {}
              },
              "dependsOn": [
                "[resourceId('Microsoft.DocumentDB/databaseAccounts/sqlDatabases', parameters('cosmosDbAccountName'), parameters('databaseName'))]"
              ]
            },
            {
              "type": "Microsoft.DocumentDB/databaseAccounts/sqlDatabases/containers",
              "apiVersion": "2024-05-15",
              "name": "[format('{0}/{1}/{2}', parameters('cosmosDbAccountName'), parameters('databaseName'), 'Product')]",
              "location": "[parameters('location')]",
              "properties": {
                "resource": {
                  "id": "Product",
                  "createMode": "Default",
                  "partitionKey": {
                    "kind": "Hash",
                    "paths": [
                      "/product_id"
                    ]
                  }
                },
                "options": {}
              },
              "dependsOn": [
                "[resourceId('Microsoft.DocumentDB/databaseAccounts/sqlDatabases', parameters('cosmosDbAccountName'), parameters('databaseName'))]"
              ]
            },
            {
              "type": "Microsoft.DocumentDB/databaseAccounts/sqlDatabases/containers",
              "apiVersion": "2024-05-15",
              "name": "[format('{0}/{1}/{2}', parameters('cosmosDbAccountName'), parameters('databaseName'), 'Purchases')]",
              "location": "[parameters('location')]",
              "properties": {
                "resource": {
                  "id": "Purchases",
                  "createMode": "Default",
                  "partitionKey": {
                    "kind": "Hash",
                    "paths": [
                      "/customer_id"
                    ]
                  }
                },
                "options": {}
              },
              "dependsOn": [
                "[resourceId('Microsoft.DocumentDB/databaseAccounts/sqlDatabases', parameters('cosmosDbAccountName'), parameters('databaseName'))]"
              ]
            },
            {
              "type": "Microsoft.DocumentDB/databaseAccounts/sqlDatabases/containers",
              "apiVersion": "2024-05-15",
              "name": "[format('{0}/{1}/{2}', parameters('cosmosDbAccountName'), parameters('databaseName'), 'ProductUrl')]",
              "location": "[parameters('location')]",
              "properties": {
                "resource": {
                  "id": "ProductUrl",
                  "createMode": "Default",
                  "partitionKey": {
                    "kind": "Hash",
                    "paths": [
                      "/company_name"
                    ]
                  }
                },
                "options": {}
              },
              "dependsOn": [
                "[resourceId('Microsoft.DocumentDB/databaseAccounts/sqlDatabases', parameters('cosmosDbAccountName'), parameters('databaseName'))]"
              ]
            },
            {
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2020-04-01-preview",
              "scope": "[format('Microsoft.DocumentDB/databaseAccounts/{0}', parameters('cosmosDbAccountName'))]",
              "name": "[guid(resourceId('Microsoft.DocumentDB/databaseAccounts', parameters('cosmosDbAccountName')), resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('identityName')), 'cosmosDbContributor')]",
              "properties": {
                "roleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                "principalId": "[reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('identityName')), '2023-01-31').principalId]",
                "principalType": "ServicePrincipal"
              },
              "dependsOn": [
                "[resourceId('Microsoft.DocumentDB/databaseAccounts', parameters('cosmosDbAccountName'))]"
              ]
            },
            {
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2020-04-01-preview",
              "scope": "[format('Microsoft.DocumentDB/databaseAccounts/{0}', parameters('cosmosDbAccountName'))]",
              "name": "[guid(resourceId('Microsoft.DocumentDB/databaseAccounts', parameters('cosmosDbAccountName')), parameters('principalId'), 'cosmosDbContributor')]",
              "properties": {
                "roleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                "principalId": "[parameters('principalId')]",
                "principalType": "[parameters('principalType')]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.DocumentDB/databaseAccounts', parameters('cosmosDbAccountName'))]"
              ]
            },
            {
              "type": "Microsoft.DocumentDB/databaseAccounts/sqlRoleAssignments",
              "apiVersion": "2021-04-15",
              "name": "[format('{0}/{1}', parameters('cosmosDbAccountName'), guid(variables('cosmosDataContributor'), resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('identityName')), resourceId('Microsoft.DocumentDB/databaseAccounts', parameters('cosmosDbAccountName'))))]",
              "properties": {
                "roleDefinitionId": "[resourceId('Microsoft.DocumentDB/databaseAccounts/sqlRoleDefinitions', parameters('cosmosDbAccountName'), variables('cosmosDataContributor'))]",
                "principalId": "[reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('identityName')), '2023-01-31').principalId]",
                "scope": "[resourceId('Microsoft.DocumentDB/databaseAccounts', parameters('cosmosDbAccountName'))]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.DocumentDB/databaseAccounts', parameters('cosmosDbAccountName'))]"
              ]
            },
            {
              "type": "Microsoft.DocumentDB/databaseAccounts/sqlRoleAssignments",
              "apiVersion": "2021-04-15",
              "name": "[format('{0}/{1}', parameters('cosmosDbAccountName'), guid(variables('cosmosDataContributor'), parameters('principalId'), resourceId('Microsoft.DocumentDB/databaseAccounts', parameters('cosmosDbAccountName'))))]",
              "properties": {
                "roleDefinitionId": "[resourceId('Microsoft.DocumentDB/databaseAccounts/sqlRoleDefinitions', parameters('cosmosDbAccountName'), variables('cosmosDataContributor'))]",
                "principalId": "[parameters('principalId')]",
                "scope": "[resourceId('Microsoft.DocumentDB/databaseAccounts', parameters('cosmosDbAccountName'))]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.DocumentDB/databaseAccounts', parameters('cosmosDbAccountName'))]"
              ]
            }
          ],
          "outputs": {
            "cosmosDbDatabase": {
              "type": "string",
              "value": "[parameters('databaseName')]"
            },
            "cosmosDbAIConversationsContainer": {
              "type": "string",
              "value": "AI_Conversations"
            },
            "cosmosDbCustomerContainer": {
              "type": "string",
              "value": "Customer"
            },
            "cosmosDbHumanConversationsContainer": {
              "type": "string",
              "value": "Human_Conversations"
            },
            "cosmosDbProductContainer": {
              "type": "string",
              "value": "Product"
            },
            "cosmosDbPurchasesContainer": {
              "type": "string",
              "value": "Purchases"
            },
            "cosmosDbProductUrlContainer": {
              "type": "string",
              "value": "ProductUrl"
            },
            "cosmosDbEndpoint": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.DocumentDB/databaseAccounts', parameters('cosmosDbAccountName')), '2024-05-15').documentEndpoint]"
            },
            "cosmosDbAccountId": {
              "type": "string",
              "value": "[resourceId('Microsoft.DocumentDB/databaseAccounts', parameters('cosmosDbAccountName'))]"
            }
          }
        }
      },
      "dependsOn": [
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), format('{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName')))), 'Microsoft.Resources/deployments', 'uami')]",
        "[subscriptionResourceId('Microsoft.Resources/resourceGroups', if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), format('{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName'))))]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "office365",
      "resourceGroup": "[if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), format('{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName')))]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "name": {
            "value": "office365"
          },
          "api": {
            "value": {
              "id": "[format('/subscriptions/{0}/providers/Microsoft.Web/locations/{1}/managedApis/office365', subscription().subscriptionId, parameters('location'))]"
            }
          },
          "displayName": {
            "value": "office365"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "languageVersion": "2.0",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.30.23.60470",
              "templateHash": "5520459911173931706"
            },
            "name": "API Connections",
            "description": "This module deploys an Azure API Connection.",
            "owner": "Azure/module-maintainers"
          },
          "definitions": {
            "lockType": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Specify the name of lock."
                  }
                },
                "kind": {
                  "type": "string",
                  "allowedValues": [
                    "CanNotDelete",
                    "None",
                    "ReadOnly"
                  ],
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Specify the type of lock."
                  }
                }
              },
              "metadata": {
                "description": "An AVM-aligned type for a lock.",
                "__bicep_imported_from!": {
                  "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.2.1"
                }
              }
            },
            "roleAssignmentType": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The name (as GUID) of the role assignment. If not provided, a GUID will be generated."
                  }
                },
                "roleDefinitionIdOrName": {
                  "type": "string",
                  "metadata": {
                    "description": "Required. The role to assign. You can provide either the display name of the role definition, the role definition GUID, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                  }
                },
                "principalId": {
                  "type": "string",
                  "metadata": {
                    "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
                  }
                },
                "principalType": {
                  "type": "string",
                  "allowedValues": [
                    "Device",
                    "ForeignGroup",
                    "Group",
                    "ServicePrincipal",
                    "User"
                  ],
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The principal type of the assigned principal ID."
                  }
                },
                "description": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The description of the role assignment."
                  }
                },
                "condition": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\"."
                  }
                },
                "conditionVersion": {
                  "type": "string",
                  "allowedValues": [
                    "2.0"
                  ],
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Version of the condition."
                  }
                },
                "delegatedManagedIdentityResourceId": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The Resource Id of the delegated managed identity resource."
                  }
                }
              },
              "metadata": {
                "description": "An AVM-aligned type for a role assignment.",
                "__bicep_imported_from!": {
                  "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.2.1"
                }
              }
            }
          },
          "parameters": {
            "name": {
              "type": "string",
              "metadata": {
                "description": "Required. Connection name for connection. It can change depending on the resource."
              }
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]",
              "metadata": {
                "description": "Optional. Location of the deployment."
              }
            },
            "enableTelemetry": {
              "type": "bool",
              "defaultValue": true,
              "metadata": {
                "description": "Optional. Enable/Disable usage telemetry for module."
              }
            },
            "api": {
              "type": "object",
              "nullable": true,
              "metadata": {
                "example": "  // for a Service Bus connection\n  {\n    type: 'Microsoft.Web/locations/managedApis'\n    id: subscriptionResourceId('Microsoft.Web/locations/managedApis', '${resourceLocation}', 'servicebus')\n  }\n",
                "description": "Optional. Specific values for some API connections."
              }
            },
            "customParameterValues": {
              "type": "object",
              "nullable": true,
              "metadata": {
                "description": "Optional. Dictionary of custom parameter values for specific connections."
              }
            },
            "displayName": {
              "type": "string",
              "metadata": {
                "description": "Required. Display name connection. Example: `blobconnection` when using blobs. It can change depending on the resource."
              }
            },
            "nonSecretParameterValues": {
              "type": "object",
              "nullable": true,
              "metadata": {
                "description": "Optional. Dictionary of nonsecret parameter values."
              }
            },
            "parameterValues": {
              "type": "secureObject",
              "nullable": true,
              "metadata": {
                "example": "    {\n      connectionString: 'listKeys('/subscriptions/<subscriptionId>/resourceGroups/<resourceGroupName>/Microsoft.ServiceBus/namespaces/AuthorizationRules/<serviceBusName>/RootManagedSharedAccessKey', '2023-01-01').primaryConnectionString'\n    }\n    {\n      rootfolder: fileshareConnection.rootfolder\n      authType: fileshareConnection.authType\n      // to add an object, use the any() function\n      gateway: any({\n        name: fileshareConnection.odgw.name\n        id: resourceId(fileshareConnection.odgw.resourceGroup, 'Microsoft.Web/connectionGateways', fileshareConnection.odgw.name)\n        type: 'Microsoft.Web/connectionGateways'\n      })\n      username: username\n      password: password\n    }\n  ",
                "description": "Optional. Connection strings or access keys for connection. Example: `accountName` and `accessKey` when using blobs. It can change depending on the resource."
              }
            },
            "parameterValueSet": {
              "type": "object",
              "nullable": true,
              "metadata": {
                "example": "  // for a Service Bus connection\n  {\n    name: 'managedIdentityAuth'\n    values: {\n      namespaceEndpoint: {\n        value: 'sb://${dependency.outputs.serviceBusEndpoint}'\n      }\n    }\n  }\n",
                "description": "Optional. Additional parameter value set used for authentication settings."
              }
            },
            "roleAssignments": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/roleAssignmentType"
              },
              "nullable": true,
              "metadata": {
                "description": "Optional. Array of role assignments to create."
              }
            },
            "statuses": {
              "type": "array",
              "items": {
                "type": "object"
              },
              "nullable": true,
              "metadata": {
                "description": "Optional. The status of the connection."
              }
            },
            "lock": {
              "$ref": "#/definitions/lockType",
              "nullable": true,
              "metadata": {
                "description": "Optional. The lock settings of the service."
              }
            },
            "tags": {
              "type": "object",
              "nullable": true,
              "metadata": {
                "example": "  {\n      key1: 'value1'\n      key2: 'value2'\n  }\n  ",
                "description": "Optional. Tags of the resource."
              }
            },
            "testLinks": {
              "type": "array",
              "items": {
                "type": "object"
              },
              "nullable": true,
              "metadata": {
                "description": "Optional. Links to test the API connection."
              }
            }
          },
          "variables": {
            "copy": [
              {
                "name": "formattedRoleAssignments",
                "count": "[length(coalesce(parameters('roleAssignments'), createArray()))]",
                "input": "[union(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')], createObject('roleDefinitionId', coalesce(tryGet(variables('builtInRoleNames'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName), if(contains(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, '/providers/Microsoft.Authorization/roleDefinitions/'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, subscriptionResourceId('Microsoft.Authorization/roleDefinitions', coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName)))))]"
              }
            ],
            "builtInRoleNames": {
              "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
              "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
              "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
              "Role Based Access Control Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]",
              "User Access Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18d7d88d-d35e-4fb5-a5c3-7773c20a72d9')]"
            }
          },
          "resources": {
            "avmTelemetry": {
              "condition": "[parameters('enableTelemetry')]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2024-03-01",
              "name": "[format('46d3xbcp.res.web-connection.{0}.{1}', replace('0.4.1', '.', '-'), substring(uniqueString(deployment().name, parameters('location')), 0, 4))]",
              "properties": {
                "mode": "Incremental",
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "resources": [],
                  "outputs": {
                    "telemetry": {
                      "type": "String",
                      "value": "For more information, see https://aka.ms/avm/TelemetryInfo"
                    }
                  }
                }
              }
            },
            "connection": {
              "type": "Microsoft.Web/connections",
              "apiVersion": "2016-06-01",
              "name": "[parameters('name')]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "properties": {
                "displayName": "[parameters('displayName')]",
                "customParameterValues": "[parameters('customParameterValues')]",
                "api": "[parameters('api')]",
                "parameterValues": "[parameters('parameterValues')]",
                "nonSecretParameterValues": "[parameters('nonSecretParameterValues')]",
                "testLinks": "[parameters('testLinks')]",
                "statuses": "[parameters('statuses')]",
                "parameterValueSet": "[parameters('parameterValueSet')]"
              }
            },
            "connection_lock": {
              "condition": "[and(not(empty(coalesce(parameters('lock'), createObject()))), not(equals(tryGet(parameters('lock'), 'kind'), 'None')))]",
              "type": "Microsoft.Authorization/locks",
              "apiVersion": "2020-05-01",
              "scope": "[format('Microsoft.Web/connections/{0}', parameters('name'))]",
              "name": "[coalesce(tryGet(parameters('lock'), 'name'), format('lock-{0}', parameters('name')))]",
              "properties": {
                "level": "[coalesce(tryGet(parameters('lock'), 'kind'), '')]",
                "notes": "[if(equals(tryGet(parameters('lock'), 'kind'), 'CanNotDelete'), 'Cannot delete resource or child resources.', 'Cannot delete or modify the resource or child resources.')]"
              },
              "dependsOn": [
                "connection"
              ]
            },
            "connection_roleAssignments": {
              "copy": {
                "name": "connection_roleAssignments",
                "count": "[length(coalesce(variables('formattedRoleAssignments'), createArray()))]"
              },
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.Web/connections/{0}', parameters('name'))]",
              "name": "[coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'name'), guid(resourceId('Microsoft.Web/connections', parameters('name')), coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId, coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId))]",
              "properties": {
                "roleDefinitionId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId]",
                "principalId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId]",
                "description": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'description')]",
                "principalType": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'principalType')]",
                "condition": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition')]",
                "conditionVersion": "[if(not(empty(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition'))), coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'conditionVersion'), '2.0'), null())]",
                "delegatedManagedIdentityResourceId": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'delegatedManagedIdentityResourceId')]"
              },
              "dependsOn": [
                "connection"
              ]
            }
          },
          "outputs": {
            "resourceId": {
              "type": "string",
              "metadata": {
                "description": "The resource ID of the connection."
              },
              "value": "[resourceId('Microsoft.Web/connections', parameters('name'))]"
            },
            "resourceGroupName": {
              "type": "string",
              "metadata": {
                "description": "The resource group the connection was deployed into."
              },
              "value": "[resourceGroup().name]"
            },
            "name": {
              "type": "string",
              "metadata": {
                "description": "The name of the connection."
              },
              "value": "[parameters('name')]"
            },
            "location": {
              "type": "string",
              "metadata": {
                "description": "The location the resource was deployed into."
              },
              "value": "[reference('connection', '2016-06-01', 'full').location]"
            }
          }
        }
      },
      "dependsOn": [
        "[subscriptionResourceId('Microsoft.Resources/resourceGroups', if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), format('{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName'))))]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "sendEmailLogic",
      "resourceGroup": "[if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), format('{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName')))]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "name": {
            "value": "[format('{0}sendemail-{1}', variables('abbrs').logicWorkflows, variables('resourceToken'))]"
          },
          "location": {
            "value": "[reference(subscriptionResourceId('Microsoft.Resources/resourceGroups', if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), format('{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName')))), '2021-04-01', 'full').location]"
          },
          "managedIdentities": {
            "value": {
              "userAssignedResourceIds": [
                "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), format('{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName')))), 'Microsoft.Resources/deployments', 'uami'), '2022-09-01').outputs.identityId.value]"
              ]
            }
          },
          "diagnosticSettings": {
            "value": [
              {
                "name": "customSetting",
                "metricCategories": [
                  {
                    "category": "AllMetrics"
                  }
                ],
                "workspaceResourceId": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), format('{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName')))), 'Microsoft.Resources/deployments', 'monitor'), '2022-09-01').outputs.logAnalyticsWorkspaceId.value]"
              }
            ]
          },
          "workflowActions": {
            "value": "[variables('$fxv#1')]"
          },
          "workflowTriggers": {
            "value": "[variables('$fxv#2')]"
          },
          "workflowParameters": {
            "value": "[variables('$fxv#3')]"
          },
          "definitionParameters": {
            "value": {
              "$connections": {
                "value": {
                  "office365": {
                    "id": "[format('/subscriptions/{0}/providers/Microsoft.Web/locations/{1}/managedApis/office365', subscription().subscriptionId, parameters('location'))]",
                    "connectionId": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), format('{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName')))), 'Microsoft.Resources/deployments', 'office365'), '2022-09-01').outputs.resourceId.value]",
                    "connectionName": "office365"
                  }
                }
              }
            }
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "languageVersion": "2.0",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.29.47.4906",
              "templateHash": "16455601514454326777"
            },
            "name": "Logic Apps (Workflows)",
            "description": "This module deploys a Logic App (Workflow).",
            "owner": "Azure/module-maintainers"
          },
          "definitions": {
            "diagnosticSettingType": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. The name of diagnostic setting."
                    }
                  },
                  "logCategoriesAndGroups": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "category": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Name of a Diagnostic Log category for a resource type this setting is applied to. Set the specific logs to collect here."
                          }
                        },
                        "categoryGroup": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Name of a Diagnostic Log category group for a resource type this setting is applied to. Set to `allLogs` to collect all logs."
                          }
                        },
                        "enabled": {
                          "type": "bool",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Enable or disable the category explicitly. Default is `true`."
                          }
                        }
                      }
                    },
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. The name of logs that will be streamed. \"allLogs\" includes all possible logs for the resource. Set to `[]` to disable log collection."
                    }
                  },
                  "metricCategories": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "category": {
                          "type": "string",
                          "metadata": {
                            "description": "Required. Name of a Diagnostic Metric category for a resource type this setting is applied to. Set to `AllMetrics` to collect all metrics."
                          }
                        },
                        "enabled": {
                          "type": "bool",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Enable or disable the category explicitly. Default is `true`."
                          }
                        }
                      }
                    },
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. The name of metrics that will be streamed. \"allMetrics\" includes all possible metrics for the resource. Set to `[]` to disable metric collection."
                    }
                  },
                  "logAnalyticsDestinationType": {
                    "type": "string",
                    "allowedValues": [
                      "AzureDiagnostics",
                      "Dedicated"
                    ],
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. A string indicating whether the export to Log Analytics should use the default destination type, i.e. AzureDiagnostics, or use a destination type."
                    }
                  },
                  "workspaceResourceId": {
                    "type": "string",
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. Resource ID of the diagnostic log analytics workspace. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                    }
                  },
                  "storageAccountResourceId": {
                    "type": "string",
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. Resource ID of the diagnostic storage account. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                    }
                  },
                  "eventHubAuthorizationRuleResourceId": {
                    "type": "string",
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. Resource ID of the diagnostic event hub authorization rule for the Event Hubs namespace in which the event hub should be created or streamed to."
                    }
                  },
                  "eventHubName": {
                    "type": "string",
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. Name of the diagnostic event hub within the namespace to which logs are streamed. Without this, an event hub is created for each log category. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                    }
                  },
                  "marketplacePartnerResourceId": {
                    "type": "string",
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. The full ARM resource ID of the Marketplace resource to which you would like to send Diagnostic Logs."
                    }
                  }
                }
              },
              "nullable": true
            },
            "integrationServiceEnvironmentType": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The integration service environment Id."
                  }
                }
              },
              "nullable": true
            },
            "lockType": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Specify the name of lock."
                  }
                },
                "kind": {
                  "type": "string",
                  "allowedValues": [
                    "CanNotDelete",
                    "None",
                    "ReadOnly"
                  ],
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Specify the type of lock."
                  }
                }
              },
              "nullable": true
            },
            "managedIdentitiesType": {
              "type": "object",
              "properties": {
                "systemAssigned": {
                  "type": "bool",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Enables system assigned managed identity on the resource."
                  }
                },
                "userAssignedResourceIds": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The resource ID(s) to assign to the resource."
                  }
                }
              },
              "nullable": true
            },
            "roleAssignmentType": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. The name (as GUID) of the role assignment. If not provided, a GUID will be generated."
                    }
                  },
                  "roleDefinitionIdOrName": {
                    "type": "string",
                    "metadata": {
                      "description": "Required. The role to assign. You can provide either the display name of the role definition, the role definition GUID, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                    }
                  },
                  "principalId": {
                    "type": "string",
                    "metadata": {
                      "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
                    }
                  },
                  "principalType": {
                    "type": "string",
                    "allowedValues": [
                      "Device",
                      "ForeignGroup",
                      "Group",
                      "ServicePrincipal",
                      "User"
                    ],
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. The principal type of the assigned principal ID."
                    }
                  },
                  "description": {
                    "type": "string",
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. The description of the role assignment."
                    }
                  },
                  "condition": {
                    "type": "string",
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\"."
                    }
                  },
                  "conditionVersion": {
                    "type": "string",
                    "allowedValues": [
                      "2.0"
                    ],
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. Version of the condition."
                    }
                  },
                  "delegatedManagedIdentityResourceId": {
                    "type": "string",
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. The Resource Id of the delegated managed identity resource."
                    }
                  }
                }
              },
              "nullable": true
            }
          },
          "parameters": {
            "name": {
              "type": "string",
              "metadata": {
                "description": "Required. The logic app workflow name."
              }
            },
            "actionsAccessControlConfiguration": {
              "type": "object",
              "nullable": true,
              "metadata": {
                "description": "Optional. The access control configuration for workflow actions."
              }
            },
            "connectorEndpointsConfiguration": {
              "type": "object",
              "nullable": true,
              "metadata": {
                "description": "Optional. The endpoints configuration:  Access endpoint and outgoing IP addresses for the connector."
              }
            },
            "contentsAccessControlConfiguration": {
              "type": "object",
              "nullable": true,
              "metadata": {
                "description": "Optional. The access control configuration for accessing workflow run contents."
              }
            },
            "enableTelemetry": {
              "type": "bool",
              "defaultValue": true,
              "metadata": {
                "description": "Optional. Enable/Disable usage telemetry for module."
              }
            },
            "definitionParameters": {
              "type": "object",
              "nullable": true,
              "metadata": {
                "description": "Optional. Parameters for the definition template."
              }
            },
            "managedIdentities": {
              "$ref": "#/definitions/managedIdentitiesType",
              "metadata": {
                "description": "Optional. The managed identity definition for this resource. Only one type of identity is supported: system-assigned or user-assigned, but not both."
              }
            },
            "integrationAccount": {
              "type": "object",
              "nullable": true,
              "metadata": {
                "description": "Optional. The integration account."
              }
            },
            "integrationServiceEnvironment": {
              "$ref": "#/definitions/integrationServiceEnvironmentType",
              "nullable": true,
              "metadata": {
                "description": "Optional. The integration service environment settings."
              }
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]",
              "metadata": {
                "description": "Optional. Location for all resources."
              }
            },
            "diagnosticSettings": {
              "$ref": "#/definitions/diagnosticSettingType",
              "metadata": {
                "description": "Optional. The diagnostic settings of the service."
              }
            },
            "lock": {
              "$ref": "#/definitions/lockType",
              "metadata": {
                "description": "Optional. The lock settings of the service."
              }
            },
            "roleAssignments": {
              "$ref": "#/definitions/roleAssignmentType",
              "metadata": {
                "description": "Optional. Array of role assignments to create."
              }
            },
            "state": {
              "type": "string",
              "defaultValue": "Enabled",
              "allowedValues": [
                "NotSpecified",
                "Completed",
                "Enabled",
                "Disabled",
                "Deleted",
                "Suspended"
              ],
              "metadata": {
                "description": "Optional. The state. - NotSpecified, Completed, Enabled, Disabled, Deleted, Suspended."
              }
            },
            "tags": {
              "type": "object",
              "nullable": true,
              "metadata": {
                "description": "Optional. Tags of the resource."
              }
            },
            "triggersAccessControlConfiguration": {
              "type": "object",
              "nullable": true,
              "metadata": {
                "description": "Optional. The access control configuration for invoking workflow triggers."
              }
            },
            "workflowActions": {
              "type": "object",
              "nullable": true,
              "metadata": {
                "description": "Optional. The definitions for one or more actions to execute at workflow runtime."
              }
            },
            "workflowEndpointsConfiguration": {
              "type": "object",
              "nullable": true,
              "metadata": {
                "description": "Optional. The endpoints configuration:  Access endpoint and outgoing IP addresses for the workflow."
              }
            },
            "workflowManagementAccessControlConfiguration": {
              "type": "object",
              "nullable": true,
              "metadata": {
                "description": "Optional. The access control configuration for workflow management."
              }
            },
            "workflowOutputs": {
              "type": "object",
              "nullable": true,
              "metadata": {
                "description": "Optional. The definitions for the outputs to return from a workflow run."
              }
            },
            "workflowParameters": {
              "type": "object",
              "nullable": true,
              "metadata": {
                "description": "Optional. The definitions for one or more parameters that pass the values to use at your logic app's runtime."
              }
            },
            "workflowStaticResults": {
              "type": "object",
              "nullable": true,
              "metadata": {
                "description": "Optional. The definitions for one or more static results returned by actions as mock outputs when static results are enabled on those actions. In each action definition, the runtimeConfiguration.staticResult.name attribute references the corresponding definition inside staticResults."
              }
            },
            "workflowTriggers": {
              "type": "object",
              "nullable": true,
              "metadata": {
                "description": "Optional. The definitions for one or more triggers that instantiate your workflow. You can define more than one trigger, but only with the Workflow Definition Language, not visually through the Logic Apps Designer."
              }
            }
          },
          "variables": {
            "copy": [
              {
                "name": "formattedRoleAssignments",
                "count": "[length(coalesce(parameters('roleAssignments'), createArray()))]",
                "input": "[union(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')], createObject('roleDefinitionId', coalesce(tryGet(variables('builtInRoleNames'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName), if(contains(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, '/providers/Microsoft.Authorization/roleDefinitions/'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, subscriptionResourceId('Microsoft.Authorization/roleDefinitions', coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName)))))]"
              }
            ],
            "formattedUserAssignedIdentities": "[reduce(map(coalesce(tryGet(parameters('managedIdentities'), 'userAssignedResourceIds'), createArray()), lambda('id', createObject(format('{0}', lambdaVariables('id')), createObject()))), createObject(), lambda('cur', 'next', union(lambdaVariables('cur'), lambdaVariables('next'))))]",
            "identity": "[if(not(empty(parameters('managedIdentities'))), createObject('type', if(coalesce(tryGet(parameters('managedIdentities'), 'systemAssigned'), false()), 'SystemAssigned', if(not(empty(coalesce(tryGet(parameters('managedIdentities'), 'userAssignedResourceIds'), createObject()))), 'UserAssigned', 'None')), 'userAssignedIdentities', if(not(empty(variables('formattedUserAssignedIdentities'))), variables('formattedUserAssignedIdentities'), null())), null())]",
            "builtInRoleNames": {
              "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
              "Logic App Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '87a39d53-fc1b-424a-814c-f7e04687dc9e')]",
              "Logic App Operator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '515c2055-d9d4-4321-b1b9-bd0c9a0f79fe')]",
              "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
              "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
              "Role Based Access Control Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]",
              "User Access Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18d7d88d-d35e-4fb5-a5c3-7773c20a72d9')]"
            }
          },
          "resources": {
            "avmTelemetry": {
              "condition": "[parameters('enableTelemetry')]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2024-03-01",
              "name": "[format('46d3xbcp.res.logic-workflow.{0}.{1}', replace('0.4.0', '.', '-'), substring(uniqueString(deployment().name, parameters('location')), 0, 4))]",
              "properties": {
                "mode": "Incremental",
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "resources": [],
                  "outputs": {
                    "telemetry": {
                      "type": "String",
                      "value": "For more information, see https://aka.ms/avm/TelemetryInfo"
                    }
                  }
                }
              }
            },
            "logicApp": {
              "type": "Microsoft.Logic/workflows",
              "apiVersion": "2019-05-01",
              "name": "[parameters('name')]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "identity": "[variables('identity')]",
              "properties": {
                "state": "[parameters('state')]",
                "endpointsConfiguration": {
                  "workflow": "[parameters('workflowEndpointsConfiguration')]",
                  "connector": "[parameters('connectorEndpointsConfiguration')]"
                },
                "accessControl": {
                  "triggers": "[parameters('triggersAccessControlConfiguration')]",
                  "contents": "[parameters('contentsAccessControlConfiguration')]",
                  "actions": "[parameters('actionsAccessControlConfiguration')]",
                  "workflowManagement": "[parameters('workflowManagementAccessControlConfiguration')]"
                },
                "integrationAccount": "[parameters('integrationAccount')]",
                "integrationServiceEnvironment": "[parameters('integrationServiceEnvironment')]",
                "definition": {
                  "$schema": "https://schema.management.azure.com/providers/Microsoft.Logic/schemas/2016-06-01/workflowdefinition.json#",
                  "actions": "[parameters('workflowActions')]",
                  "contentVersion": "1.0.0.0",
                  "outputs": "[parameters('workflowOutputs')]",
                  "parameters": "[parameters('workflowParameters')]",
                  "staticResults": "[parameters('workflowStaticResults')]",
                  "triggers": "[parameters('workflowTriggers')]"
                },
                "parameters": "[parameters('definitionParameters')]"
              }
            },
            "logicApp_lock": {
              "condition": "[and(not(empty(coalesce(parameters('lock'), createObject()))), not(equals(tryGet(parameters('lock'), 'kind'), 'None')))]",
              "type": "Microsoft.Authorization/locks",
              "apiVersion": "2020-05-01",
              "scope": "[format('Microsoft.Logic/workflows/{0}', parameters('name'))]",
              "name": "[coalesce(tryGet(parameters('lock'), 'name'), format('lock-{0}', parameters('name')))]",
              "properties": {
                "level": "[coalesce(tryGet(parameters('lock'), 'kind'), '')]",
                "notes": "[if(equals(tryGet(parameters('lock'), 'kind'), 'CanNotDelete'), 'Cannot delete resource or child resources.', 'Cannot delete or modify the resource or child resources.')]"
              },
              "dependsOn": [
                "logicApp"
              ]
            },
            "logicApp_diagnosticSettings": {
              "copy": {
                "name": "logicApp_diagnosticSettings",
                "count": "[length(coalesce(parameters('diagnosticSettings'), createArray()))]"
              },
              "type": "Microsoft.Insights/diagnosticSettings",
              "apiVersion": "2021-05-01-preview",
              "scope": "[format('Microsoft.Logic/workflows/{0}', parameters('name'))]",
              "name": "[coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'name'), format('{0}-diagnosticSettings', parameters('name')))]",
              "properties": {
                "copy": [
                  {
                    "name": "metrics",
                    "count": "[length(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'metricCategories'), createArray(createObject('category', 'AllMetrics'))))]",
                    "input": {
                      "category": "[coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'metricCategories'), createArray(createObject('category', 'AllMetrics')))[copyIndex('metrics')].category]",
                      "enabled": "[coalesce(tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'metricCategories'), createArray(createObject('category', 'AllMetrics')))[copyIndex('metrics')], 'enabled'), true())]",
                      "timeGrain": null
                    }
                  },
                  {
                    "name": "logs",
                    "count": "[length(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs'))))]",
                    "input": {
                      "categoryGroup": "[tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs')))[copyIndex('logs')], 'categoryGroup')]",
                      "category": "[tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs')))[copyIndex('logs')], 'category')]",
                      "enabled": "[coalesce(tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs')))[copyIndex('logs')], 'enabled'), true())]"
                    }
                  }
                ],
                "storageAccountId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'storageAccountResourceId')]",
                "workspaceId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'workspaceResourceId')]",
                "eventHubAuthorizationRuleId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'eventHubAuthorizationRuleResourceId')]",
                "eventHubName": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'eventHubName')]",
                "marketplacePartnerId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'marketplacePartnerResourceId')]",
                "logAnalyticsDestinationType": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logAnalyticsDestinationType')]"
              },
              "dependsOn": [
                "logicApp"
              ]
            },
            "logicApp_roleAssignments": {
              "copy": {
                "name": "logicApp_roleAssignments",
                "count": "[length(coalesce(variables('formattedRoleAssignments'), createArray()))]"
              },
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.Logic/workflows/{0}', parameters('name'))]",
              "name": "[coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'name'), guid(resourceId('Microsoft.Logic/workflows', parameters('name')), coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId, coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId))]",
              "properties": {
                "roleDefinitionId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId]",
                "principalId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId]",
                "description": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'description')]",
                "principalType": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'principalType')]",
                "condition": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition')]",
                "conditionVersion": "[if(not(empty(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition'))), coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'conditionVersion'), '2.0'), null())]",
                "delegatedManagedIdentityResourceId": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'delegatedManagedIdentityResourceId')]"
              },
              "dependsOn": [
                "logicApp"
              ]
            }
          },
          "outputs": {
            "name": {
              "type": "string",
              "metadata": {
                "description": "The name of the logic app."
              },
              "value": "[parameters('name')]"
            },
            "resourceGroupName": {
              "type": "string",
              "metadata": {
                "description": "The resource group the logic app was deployed into."
              },
              "value": "[resourceGroup().name]"
            },
            "resourceId": {
              "type": "string",
              "metadata": {
                "description": "The resource ID of the logic app."
              },
              "value": "[resourceId('Microsoft.Logic/workflows', parameters('name'))]"
            },
            "systemAssignedMIPrincipalId": {
              "type": "string",
              "metadata": {
                "description": "The principal ID of the system assigned identity."
              },
              "value": "[coalesce(tryGet(tryGet(reference('logicApp', '2019-05-01', 'full'), 'identity'), 'principalId'), '')]"
            },
            "location": {
              "type": "string",
              "metadata": {
                "description": "The location the resource was deployed into."
              },
              "value": "[reference('logicApp', '2019-05-01', 'full').location]"
            }
          }
        }
      },
      "dependsOn": [
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), format('{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName')))), 'Microsoft.Resources/deployments', 'uami')]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), format('{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName')))), 'Microsoft.Resources/deployments', 'monitor')]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), format('{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName')))), 'Microsoft.Resources/deployments', 'office365')]",
        "[subscriptionResourceId('Microsoft.Resources/resourceGroups', if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), format('{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName'))))]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "sendMailUrl",
      "resourceGroup": "[if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), format('{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName')))]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "logicAppName": {
            "value": "[format('{0}sendemail-{1}', variables('abbrs').logicWorkflows, variables('resourceToken'))]"
          },
          "triggerName": {
            "value": "When_a_HTTP_request_is_received"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.36.177.2456",
              "templateHash": "2152047062519238894"
            }
          },
          "parameters": {
            "logicAppName": {
              "type": "string"
            },
            "triggerName": {
              "type": "string"
            }
          },
          "resources": [],
          "outputs": {
            "url": {
              "type": "string",
              "value": "[listCallbackUrl(resourceId('Microsoft.Logic/workflows/triggers', parameters('logicAppName'), parameters('triggerName')), '2019-05-01').value]"
            }
          }
        }
      },
      "dependsOn": [
        "[subscriptionResourceId('Microsoft.Resources/resourceGroups', if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), format('{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName'))))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), format('{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName')))), 'Microsoft.Resources/deployments', 'sendEmailLogic')]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "frontend",
      "resourceGroup": "[if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), format('{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName')))]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "appName": {
            "value": "[format('{0}frontend-{1}', variables('abbrs').appContainerApps, variables('resourceToken'))]"
          },
          "serviceName": {
            "value": "frontend"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "tags": {
            "value": "[parameters('tags')]"
          },
          "identityId": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), format('{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName')))), 'Microsoft.Resources/deployments', 'uami'), '2022-09-01').outputs.identityId.value]"
          },
          "containerAppsEnvironmentId": "[if(parameters('enableZeroTrust'), createObject('value', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), format('{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName')))), 'Microsoft.Resources/deployments', 'containerAppsEnvironmentZeroTrust'), '2022-09-01').outputs.id.value), createObject('value', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), format('{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName')))), 'Microsoft.Resources/deployments', 'containerAppsEnvironment'), '2022-09-01').outputs.id.value))]",
          "containerRegistryName": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), format('{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName')))), 'Microsoft.Resources/deployments', 'registry'), '2022-09-01').outputs.name.value]"
          },
          "exists": {
            "value": "[parameters('appExists')]"
          },
          "targetPort": {
            "value": 80
          },
          "env": {
            "value": "[union(createObject('AZURE_CLIENT_ID', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), format('{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName')))), 'Microsoft.Resources/deployments', 'uami'), '2022-09-01').outputs.clientId.value, 'AZURE_USER_ASSIGNED_IDENTITY_ID', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), format('{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName')))), 'Microsoft.Resources/deployments', 'uami'), '2022-09-01').outputs.identityId.value, 'APPLICATIONINSIGHTS_CONNECTION_STRING', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), format('{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName')))), 'Microsoft.Resources/deployments', 'monitor'), '2022-09-01').outputs.appInsightsConnectionString.value, 'AZURE_OPENAI_ENDPOINT', if(not(empty(parameters('openAiRealtimeName'))), format('https://{0}.openai.azure.com', parameters('openAiRealtimeName')), reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), format('{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName')))), 'Microsoft.Resources/deployments', 'openai'), '2022-09-01').outputs.endpoint.value), 'AZURE_OPENAI_GPT4o_REALTIME_DEPLOYMENT', parameters('aoaiGpt4oRealtimeModelName'), 'AZURE_SEARCH_ENDPOINT', format('https://{0}.search.windows.net', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), format('{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName')))), 'Microsoft.Resources/deployments', 'search-service'), '2022-09-01').outputs.name.value), 'AZURE_SEARCH_INDEX', parameters('searchIndexName'), 'SEND_EMAIL_LOGIC_APP_URL', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), format('{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName')))), 'Microsoft.Resources/deployments', 'sendMailUrl'), '2022-09-01').outputs.url.value, 'COSMOSDB_ENDPOINT', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), format('{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName')))), 'Microsoft.Resources/deployments', 'cosmosdb'), '2022-09-01').outputs.cosmosDbEndpoint.value, 'COSMOSDB_DATABASE', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), format('{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName')))), 'Microsoft.Resources/deployments', 'cosmosdb'), '2022-09-01').outputs.cosmosDbDatabase.value, 'COSMOSDB_AIConversations_CONTAINER', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), format('{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName')))), 'Microsoft.Resources/deployments', 'cosmosdb'), '2022-09-01').outputs.cosmosDbAIConversationsContainer.value, 'COSMOSDB_Customer_CONTAINER', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), format('{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName')))), 'Microsoft.Resources/deployments', 'cosmosdb'), '2022-09-01').outputs.cosmosDbCustomerContainer.value, 'COSMOSDB_HumanConversations_CONTAINER', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), format('{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName')))), 'Microsoft.Resources/deployments', 'cosmosdb'), '2022-09-01').outputs.cosmosDbHumanConversationsContainer.value, 'COSMOSDB_Product_CONTAINER', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), format('{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName')))), 'Microsoft.Resources/deployments', 'cosmosdb'), '2022-09-01').outputs.cosmosDbProductContainer.value, 'COSMOSDB_Purchases_CONTAINER', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), format('{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName')))), 'Microsoft.Resources/deployments', 'cosmosdb'), '2022-09-01').outputs.cosmosDbPurchasesContainer.value, 'COSMOSDB_ProductUrl_CONTAINER', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), format('{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName')))), 'Microsoft.Resources/deployments', 'cosmosdb'), '2022-09-01').outputs.cosmosDbProductUrlContainer.value, 'BING_SEARCH_API_ENDPOINT', parameters('bingSearchApiEndpoint')), union(if(empty(parameters('openAiRealtimeName')), createObject(), createObject('AZURE_OPENAI_API_KEY', parameters('openAiRealtimeKey'))), if(not(empty(parameters('bingSearchApiKey'))), createObject('BING_SEARCH_API_KEY', format('@Microsoft.KeyVault(SecretUri=https://{0}.vault.azure.net/secrets/bingSearchApiKey/)', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), format('{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName')))), 'Microsoft.Resources/deployments', 'keyVault'), '2022-09-01').outputs.name.value)), createObject())))]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.36.177.2456",
              "templateHash": "572890418018723919"
            }
          },
          "parameters": {
            "appName": {
              "type": "string"
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]"
            },
            "tags": {
              "type": "object",
              "defaultValue": {}
            },
            "serviceName": {
              "type": "string"
            },
            "env": {
              "type": "object",
              "defaultValue": {},
              "metadata": {
                "description": "The environment variables for the container in key value pairs"
              }
            },
            "identityId": {
              "type": "string"
            },
            "containerRegistryName": {
              "type": "string"
            },
            "containerAppsEnvironmentId": {
              "type": "string"
            },
            "exists": {
              "type": "bool"
            },
            "targetPort": {
              "type": "int",
              "defaultValue": 80
            }
          },
          "resources": [
            {
              "type": "Microsoft.App/containerApps",
              "apiVersion": "2024-03-01",
              "name": "[parameters('appName')]",
              "location": "[parameters('location')]",
              "tags": "[union(parameters('tags'), createObject('azd-service-name', parameters('serviceName')))]",
              "identity": {
                "type": "UserAssigned",
                "userAssignedIdentities": {
                  "[format('{0}', parameters('identityId'))]": {}
                }
              },
              "properties": {
                "managedEnvironmentId": "[parameters('containerAppsEnvironmentId')]",
                "workloadProfileName": "Consumption",
                "configuration": {
                  "ingress": {
                    "external": true,
                    "targetPort": "[parameters('targetPort')]",
                    "transport": "auto"
                  },
                  "registries": [
                    {
                      "server": "[format('{0}.azurecr.io', parameters('containerRegistryName'))]",
                      "identity": "[parameters('identityId')]"
                    }
                  ]
                },
                "template": {
                  "containers": [
                    {
                      "copy": [
                        {
                          "name": "env",
                          "count": "[length(objectKeys(parameters('env')))]",
                          "input": {
                            "name": "[objectKeys(parameters('env'))[copyIndex('env')]]",
                            "value": "[format('{0}', parameters('env')[objectKeys(parameters('env'))[copyIndex('env')]])]"
                          }
                        }
                      ],
                      "image": "[coalesce(tryGet(tryGet(tryGet(tryGet(reference(resourceId('Microsoft.Resources/deployments', format('{0}-fetch-image', parameters('appName'))), '2022-09-01').outputs, 'containers'), 'value'), 0), 'image'), 'mcr.microsoft.com/azuredocs/containerapps-helloworld:latest')]",
                      "name": "main",
                      "resources": {
                        "cpu": "[json('1.0')]",
                        "memory": "2.0Gi"
                      }
                    }
                  ],
                  "scale": {
                    "minReplicas": 0,
                    "maxReplicas": 3
                  }
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', format('{0}-fetch-image', parameters('appName')))]"
              ]
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('{0}-fetch-image', parameters('appName'))]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "exists": {
                    "value": "[parameters('exists')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.36.177.2456",
                      "templateHash": "12386394806253841272"
                    }
                  },
                  "parameters": {
                    "exists": {
                      "type": "bool"
                    }
                  },
                  "variables": {
                    "defaultImage": "mcr.microsoft.com/azuredocs/containerapps-helloworld:latest",
                    "image": "[if(parameters('exists'), variables('defaultImage'), variables('defaultImage'))]"
                  },
                  "resources": [],
                  "outputs": {
                    "containers": {
                      "type": "array",
                      "value": [
                        {
                          "image": "[variables('image')]"
                        }
                      ]
                    }
                  }
                }
              }
            }
          ],
          "outputs": {
            "name": {
              "type": "string",
              "value": "[parameters('appName')]"
            },
            "uri": {
              "type": "string",
              "value": "[format('https://{0}', reference(resourceId('Microsoft.App/containerApps', parameters('appName')), '2024-03-01').configuration.ingress.fqdn)]"
            },
            "id": {
              "type": "string",
              "value": "[resourceId('Microsoft.App/containerApps', parameters('appName'))]"
            }
          }
        }
      },
      "dependsOn": [
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), format('{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName')))), 'Microsoft.Resources/deployments', 'uami')]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), format('{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName')))), 'Microsoft.Resources/deployments', 'containerAppsEnvironment')]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), format('{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName')))), 'Microsoft.Resources/deployments', 'containerAppsEnvironmentZeroTrust')]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), format('{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName')))), 'Microsoft.Resources/deployments', 'cosmosdb')]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), format('{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName')))), 'Microsoft.Resources/deployments', 'keyVault')]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), format('{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName')))), 'Microsoft.Resources/deployments', 'monitor')]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), format('{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName')))), 'Microsoft.Resources/deployments', 'openai')]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), format('{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName')))), 'Microsoft.Resources/deployments', 'registry')]",
        "[subscriptionResourceId('Microsoft.Resources/resourceGroups', if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), format('{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName'))))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), format('{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName')))), 'Microsoft.Resources/deployments', 'search-service')]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), format('{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName')))), 'Microsoft.Resources/deployments', 'sendMailUrl')]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "backend",
      "resourceGroup": "[if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), format('{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName')))]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "appName": {
            "value": "[format('{0}backend-{1}', variables('abbrs').appContainerApps, variables('resourceToken'))]"
          },
          "serviceName": {
            "value": "backend"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "tags": {
            "value": "[parameters('tags')]"
          },
          "identityId": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), format('{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName')))), 'Microsoft.Resources/deployments', 'uami'), '2022-09-01').outputs.identityId.value]"
          },
          "containerAppsEnvironmentId": "[if(parameters('enableZeroTrust'), createObject('value', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), format('{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName')))), 'Microsoft.Resources/deployments', 'containerAppsEnvironmentZeroTrust'), '2022-09-01').outputs.id.value), createObject('value', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), format('{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName')))), 'Microsoft.Resources/deployments', 'containerAppsEnvironment'), '2022-09-01').outputs.id.value))]",
          "containerRegistryName": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), format('{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName')))), 'Microsoft.Resources/deployments', 'registry'), '2022-09-01').outputs.name.value]"
          },
          "exists": {
            "value": "[parameters('appExists')]"
          },
          "targetPort": {
            "value": 80
          },
          "env": {
            "value": "[union(createObject('AZURE_CLIENT_ID', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), format('{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName')))), 'Microsoft.Resources/deployments', 'uami'), '2022-09-01').outputs.clientId.value, 'AZURE_USER_ASSIGNED_IDENTITY_ID', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), format('{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName')))), 'Microsoft.Resources/deployments', 'uami'), '2022-09-01').outputs.identityId.value, 'APPLICATIONINSIGHTS_CONNECTION_STRING', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), format('{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName')))), 'Microsoft.Resources/deployments', 'monitor'), '2022-09-01').outputs.appInsightsConnectionString.value, 'AZURE_OPENAI_ENDPOINT', if(not(empty(parameters('openAiRealtimeName'))), format('https://{0}.openai.azure.com', parameters('openAiRealtimeName')), reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), format('{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName')))), 'Microsoft.Resources/deployments', 'openai'), '2022-09-01').outputs.endpoint.value), 'AZURE_OPENAI_EMBEDDING_ENDPOINT', if(not(empty(parameters('openAiRealtimeName'))), format('https://{0}.openai.azure.com', parameters('openAiRealtimeName')), reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), format('{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName')))), 'Microsoft.Resources/deployments', 'openai'), '2022-09-01').outputs.endpoint.value), 'AZURE_OPENAI_EMBEDDING_DEPLOYMENT', parameters('embedModel'), 'AZURE_OPENAI_EMBEDDING_MODEL', parameters('embedModel'), 'AZURE_OPENAI_GPT4o_MINI_DEPLOYMENT', parameters('aoaiGpt4oMiniModelName'), 'AZURE_SEARCH_ENDPOINT', format('https://{0}.search.windows.net', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), format('{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName')))), 'Microsoft.Resources/deployments', 'search-service'), '2022-09-01').outputs.name.value), 'AZURE_SEARCH_INDEX', parameters('searchIndexName'), 'AZURE_STORAGE_ENDPOINT', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), format('{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName')))), 'Microsoft.Resources/deployments', 'storage'), '2022-09-01').outputs.primaryBlobEndpoint.value, 'AZURE_STORAGE_CONNECTION_STRING', format('ResourceId=/subscriptions/{0}/resourceGroups/{1}/providers/Microsoft.Storage/storageAccounts/{2};', subscription().subscriptionId, if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), format('{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName'))), reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), format('{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName')))), 'Microsoft.Resources/deployments', 'storage'), '2022-09-01').outputs.name.value), 'AZURE_STORAGE_CONTAINER', variables('storageContainerName'), 'COSMOSDB_ENDPOINT', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), format('{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName')))), 'Microsoft.Resources/deployments', 'cosmosdb'), '2022-09-01').outputs.cosmosDbEndpoint.value, 'COSMOSDB_DATABASE', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), format('{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName')))), 'Microsoft.Resources/deployments', 'cosmosdb'), '2022-09-01').outputs.cosmosDbDatabase.value, 'COSMOSDB_AIConversations_CONTAINER', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), format('{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName')))), 'Microsoft.Resources/deployments', 'cosmosdb'), '2022-09-01').outputs.cosmosDbAIConversationsContainer.value, 'COSMOSDB_Customer_CONTAINER', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), format('{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName')))), 'Microsoft.Resources/deployments', 'cosmosdb'), '2022-09-01').outputs.cosmosDbCustomerContainer.value, 'COSMOSDB_HumanConversations_CONTAINER', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), format('{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName')))), 'Microsoft.Resources/deployments', 'cosmosdb'), '2022-09-01').outputs.cosmosDbHumanConversationsContainer.value, 'COSMOSDB_Product_CONTAINER', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), format('{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName')))), 'Microsoft.Resources/deployments', 'cosmosdb'), '2022-09-01').outputs.cosmosDbProductContainer.value, 'COSMOSDB_Purchases_CONTAINER', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), format('{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName')))), 'Microsoft.Resources/deployments', 'cosmosdb'), '2022-09-01').outputs.cosmosDbPurchasesContainer.value, 'COSMOSDB_ProductUrl_CONTAINER', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), format('{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName')))), 'Microsoft.Resources/deployments', 'cosmosdb'), '2022-09-01').outputs.cosmosDbProductUrlContainer.value, 'AZURE_AI_SERVICES_ENDPOINT', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), format('{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName')))), 'Microsoft.Resources/deployments', 'aiserviceaccountDeployment'), '2022-09-01').outputs.endpoint.value, 'AZURE_AI_SERVICES_KEY', format('@Microsoft.KeyVault(SecretUri=https://{0}.vault.azure.net/secrets/{1}-accessKey1/)', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), format('{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName')))), 'Microsoft.Resources/deployments', 'keyVault'), '2022-09-01').outputs.name.value, variables('_accounts_aiservice_ms_name'))), if(empty(parameters('openAiRealtimeName')), createObject(), createObject('AZURE_OPENAI_API_KEY', parameters('openAiRealtimeKey'))))]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.36.177.2456",
              "templateHash": "572890418018723919"
            }
          },
          "parameters": {
            "appName": {
              "type": "string"
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]"
            },
            "tags": {
              "type": "object",
              "defaultValue": {}
            },
            "serviceName": {
              "type": "string"
            },
            "env": {
              "type": "object",
              "defaultValue": {},
              "metadata": {
                "description": "The environment variables for the container in key value pairs"
              }
            },
            "identityId": {
              "type": "string"
            },
            "containerRegistryName": {
              "type": "string"
            },
            "containerAppsEnvironmentId": {
              "type": "string"
            },
            "exists": {
              "type": "bool"
            },
            "targetPort": {
              "type": "int",
              "defaultValue": 80
            }
          },
          "resources": [
            {
              "type": "Microsoft.App/containerApps",
              "apiVersion": "2024-03-01",
              "name": "[parameters('appName')]",
              "location": "[parameters('location')]",
              "tags": "[union(parameters('tags'), createObject('azd-service-name', parameters('serviceName')))]",
              "identity": {
                "type": "UserAssigned",
                "userAssignedIdentities": {
                  "[format('{0}', parameters('identityId'))]": {}
                }
              },
              "properties": {
                "managedEnvironmentId": "[parameters('containerAppsEnvironmentId')]",
                "workloadProfileName": "Consumption",
                "configuration": {
                  "ingress": {
                    "external": true,
                    "targetPort": "[parameters('targetPort')]",
                    "transport": "auto"
                  },
                  "registries": [
                    {
                      "server": "[format('{0}.azurecr.io', parameters('containerRegistryName'))]",
                      "identity": "[parameters('identityId')]"
                    }
                  ]
                },
                "template": {
                  "containers": [
                    {
                      "copy": [
                        {
                          "name": "env",
                          "count": "[length(objectKeys(parameters('env')))]",
                          "input": {
                            "name": "[objectKeys(parameters('env'))[copyIndex('env')]]",
                            "value": "[format('{0}', parameters('env')[objectKeys(parameters('env'))[copyIndex('env')]])]"
                          }
                        }
                      ],
                      "image": "[coalesce(tryGet(tryGet(tryGet(tryGet(reference(resourceId('Microsoft.Resources/deployments', format('{0}-fetch-image', parameters('appName'))), '2022-09-01').outputs, 'containers'), 'value'), 0), 'image'), 'mcr.microsoft.com/azuredocs/containerapps-helloworld:latest')]",
                      "name": "main",
                      "resources": {
                        "cpu": "[json('1.0')]",
                        "memory": "2.0Gi"
                      }
                    }
                  ],
                  "scale": {
                    "minReplicas": 0,
                    "maxReplicas": 3
                  }
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', format('{0}-fetch-image', parameters('appName')))]"
              ]
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('{0}-fetch-image', parameters('appName'))]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "exists": {
                    "value": "[parameters('exists')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.36.177.2456",
                      "templateHash": "12386394806253841272"
                    }
                  },
                  "parameters": {
                    "exists": {
                      "type": "bool"
                    }
                  },
                  "variables": {
                    "defaultImage": "mcr.microsoft.com/azuredocs/containerapps-helloworld:latest",
                    "image": "[if(parameters('exists'), variables('defaultImage'), variables('defaultImage'))]"
                  },
                  "resources": [],
                  "outputs": {
                    "containers": {
                      "type": "array",
                      "value": [
                        {
                          "image": "[variables('image')]"
                        }
                      ]
                    }
                  }
                }
              }
            }
          ],
          "outputs": {
            "name": {
              "type": "string",
              "value": "[parameters('appName')]"
            },
            "uri": {
              "type": "string",
              "value": "[format('https://{0}', reference(resourceId('Microsoft.App/containerApps', parameters('appName')), '2024-03-01').configuration.ingress.fqdn)]"
            },
            "id": {
              "type": "string",
              "value": "[resourceId('Microsoft.App/containerApps', parameters('appName'))]"
            }
          }
        }
      },
      "dependsOn": [
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), format('{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName')))), 'Microsoft.Resources/deployments', 'aiserviceaccountDeployment')]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), format('{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName')))), 'Microsoft.Resources/deployments', 'uami')]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), format('{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName')))), 'Microsoft.Resources/deployments', 'containerAppsEnvironment')]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), format('{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName')))), 'Microsoft.Resources/deployments', 'containerAppsEnvironmentZeroTrust')]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), format('{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName')))), 'Microsoft.Resources/deployments', 'cosmosdb')]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), format('{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName')))), 'Microsoft.Resources/deployments', 'keyVault')]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), format('{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName')))), 'Microsoft.Resources/deployments', 'monitor')]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), format('{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName')))), 'Microsoft.Resources/deployments', 'openai')]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), format('{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName')))), 'Microsoft.Resources/deployments', 'registry')]",
        "[subscriptionResourceId('Microsoft.Resources/resourceGroups', if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), format('{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName'))))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), format('{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName')))), 'Microsoft.Resources/deployments', 'search-service')]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), format('{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName')))), 'Microsoft.Resources/deployments', 'storage')]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "search-service",
      "resourceGroup": "[if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), format('{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName')))]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "name": {
            "value": "[format('aisearch-{0}', variables('resourceToken'))]"
          },
          "location": "[if(not(empty(parameters('searchServiceLocation'))), createObject('value', parameters('searchServiceLocation')), createObject('value', parameters('location')))]",
          "tags": {
            "value": "[parameters('tags')]"
          },
          "disableLocalAuth": {
            "value": false
          },
          "sku": {
            "value": "standard"
          },
          "replicaCount": {
            "value": 1
          },
          "semanticSearch": {
            "value": "standard"
          },
          "publicNetworkAccess": "[if(parameters('enableZeroTrust'), createObject('value', 'Disabled'), createObject('value', 'Enabled'))]",
          "managedIdentities": {
            "value": {
              "userAssignedResourceIds": [
                "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), format('{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName')))), 'Microsoft.Resources/deployments', 'uami'), '2022-09-01').outputs.identityId.value]"
              ]
            }
          },
          "roleAssignments": {
            "value": [
              {
                "roleDefinitionIdOrName": "Search Index Data Reader",
                "principalId": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), format('{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName')))), 'Microsoft.Resources/deployments', 'uami'), '2022-09-01').outputs.principalId.value]",
                "principalType": "ServicePrincipal"
              },
              {
                "roleDefinitionIdOrName": "Search Index Data Contributor",
                "principalId": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), format('{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName')))), 'Microsoft.Resources/deployments', 'uami'), '2022-09-01').outputs.principalId.value]",
                "principalType": "ServicePrincipal"
              },
              {
                "roleDefinitionIdOrName": "Search Service Contributor",
                "principalId": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), format('{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName')))), 'Microsoft.Resources/deployments', 'uami'), '2022-09-01').outputs.principalId.value]",
                "principalType": "ServicePrincipal"
              },
              {
                "roleDefinitionIdOrName": "Search Index Data Reader",
                "principalId": "[parameters('principalId')]",
                "principalType": "[variables('principalType')]"
              },
              {
                "roleDefinitionIdOrName": "Search Index Data Contributor",
                "principalId": "[parameters('principalId')]",
                "principalType": "[variables('principalType')]"
              },
              {
                "roleDefinitionIdOrName": "Search Service Contributor",
                "principalId": "[parameters('principalId')]",
                "principalType": "[variables('principalType')]"
              }
            ]
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "languageVersion": "2.0",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.30.23.60470",
              "templateHash": "3661116936272953912"
            },
            "name": "Search Services",
            "description": "This module deploys a Search Service.",
            "owner": "Azure/module-maintainers"
          },
          "definitions": {
            "managedIdentitiesType": {
              "type": "object",
              "properties": {
                "systemAssigned": {
                  "type": "bool",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Enables system assigned managed identity on the resource."
                  }
                },
                "userAssignedResourceIds": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The resource ID(s) to assign to the resource. Required if a user assigned identity is used for encryption."
                  }
                }
              },
              "nullable": true
            },
            "lockType": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Specify the name of lock."
                  }
                },
                "kind": {
                  "type": "string",
                  "allowedValues": [
                    "CanNotDelete",
                    "None",
                    "ReadOnly"
                  ],
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Specify the type of lock."
                  }
                }
              },
              "nullable": true
            },
            "roleAssignmentType": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. The name (as GUID) of the role assignment. If not provided, a GUID will be generated."
                    }
                  },
                  "roleDefinitionIdOrName": {
                    "type": "string",
                    "metadata": {
                      "description": "Required. The role to assign. You can provide either the display name of the role definition, the role definition GUID, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                    }
                  },
                  "principalId": {
                    "type": "string",
                    "metadata": {
                      "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
                    }
                  },
                  "principalType": {
                    "type": "string",
                    "allowedValues": [
                      "Device",
                      "ForeignGroup",
                      "Group",
                      "ServicePrincipal",
                      "User"
                    ],
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. The principal type of the assigned principal ID."
                    }
                  },
                  "description": {
                    "type": "string",
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. The description of the role assignment."
                    }
                  },
                  "condition": {
                    "type": "string",
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\"."
                    }
                  },
                  "conditionVersion": {
                    "type": "string",
                    "allowedValues": [
                      "2.0"
                    ],
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. Version of the condition."
                    }
                  },
                  "delegatedManagedIdentityResourceId": {
                    "type": "string",
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. The Resource Id of the delegated managed identity resource."
                    }
                  }
                }
              },
              "nullable": true
            },
            "privateEndpointType": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. The name of the private endpoint."
                    }
                  },
                  "location": {
                    "type": "string",
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. The location to deploy the private endpoint to."
                    }
                  },
                  "privateLinkServiceConnectionName": {
                    "type": "string",
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. The name of the private link connection to create."
                    }
                  },
                  "service": {
                    "type": "string",
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. The subresource to deploy the private endpoint for. For example \"vault\", \"mysqlServer\" or \"dataFactory\"."
                    }
                  },
                  "subnetResourceId": {
                    "type": "string",
                    "metadata": {
                      "description": "Required. Resource ID of the subnet where the endpoint needs to be created."
                    }
                  },
                  "privateDnsZoneGroup": {
                    "type": "object",
                    "properties": {
                      "name": {
                        "type": "string",
                        "nullable": true,
                        "metadata": {
                          "description": "Optional. The name of the Private DNS Zone Group."
                        }
                      },
                      "privateDnsZoneGroupConfigs": {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "name": {
                              "type": "string",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. The name of the private DNS zone group config."
                              }
                            },
                            "privateDnsZoneResourceId": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The resource id of the private DNS zone."
                              }
                            }
                          }
                        },
                        "metadata": {
                          "description": "Required. The private DNS zone groups to associate the private endpoint. A DNS zone group can support up to 5 DNS zones."
                        }
                      }
                    },
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. The private DNS zone group to configure for the private endpoint."
                    }
                  },
                  "isManualConnection": {
                    "type": "bool",
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. If Manual Private Link Connection is required."
                    }
                  },
                  "manualConnectionRequestMessage": {
                    "type": "string",
                    "nullable": true,
                    "maxLength": 140,
                    "metadata": {
                      "description": "Optional. A message passed to the owner of the remote resource with the manual connection request."
                    }
                  },
                  "customDnsConfigs": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "fqdn": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Required. Fqdn that resolves to private endpoint IP address."
                          }
                        },
                        "ipAddresses": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          },
                          "metadata": {
                            "description": "Required. A list of private IP addresses of the private endpoint."
                          }
                        }
                      }
                    },
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. Custom DNS configurations."
                    }
                  },
                  "ipConfigurations": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "metadata": {
                            "description": "Required. The name of the resource that is unique within a resource group."
                          }
                        },
                        "properties": {
                          "type": "object",
                          "properties": {
                            "groupId": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The ID of a group obtained from the remote resource that this private endpoint should connect to."
                              }
                            },
                            "memberName": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The member name of a group obtained from the remote resource that this private endpoint should connect to."
                              }
                            },
                            "privateIPAddress": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. A private IP address obtained from the private endpoint's subnet."
                              }
                            }
                          },
                          "metadata": {
                            "description": "Required. Properties of private endpoint IP configurations."
                          }
                        }
                      }
                    },
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. A list of IP configurations of the private endpoint. This will be used to map to the First Party Service endpoints."
                    }
                  },
                  "applicationSecurityGroupResourceIds": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. Application security groups in which the private endpoint IP configuration is included."
                    }
                  },
                  "customNetworkInterfaceName": {
                    "type": "string",
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. The custom name of the network interface attached to the private endpoint."
                    }
                  },
                  "lock": {
                    "$ref": "#/definitions/lockType",
                    "metadata": {
                      "description": "Optional. Specify the type of lock."
                    }
                  },
                  "roleAssignments": {
                    "$ref": "#/definitions/roleAssignmentType",
                    "metadata": {
                      "description": "Optional. Array of role assignments to create."
                    }
                  },
                  "tags": {
                    "type": "object",
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. Tags to be applied on all resources/resource groups in this deployment."
                    }
                  },
                  "enableTelemetry": {
                    "type": "bool",
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. Enable/Disable usage telemetry for module."
                    }
                  },
                  "resourceGroupName": {
                    "type": "string",
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. Specify if you want to deploy the Private Endpoint into a different resource group than the main resource."
                    }
                  }
                }
              },
              "nullable": true
            },
            "diagnosticSettingType": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. The name of diagnostic setting."
                    }
                  },
                  "logCategoriesAndGroups": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "category": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Name of a Diagnostic Log category for a resource type this setting is applied to. Set the specific logs to collect here."
                          }
                        },
                        "categoryGroup": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Name of a Diagnostic Log category group for a resource type this setting is applied to. Set to `allLogs` to collect all logs."
                          }
                        },
                        "enabled": {
                          "type": "bool",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Enable or disable the category explicitly. Default is `true`."
                          }
                        }
                      }
                    },
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. The name of logs that will be streamed. \"allLogs\" includes all possible logs for the resource. Set to `[]` to disable log collection."
                    }
                  },
                  "metricCategories": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "category": {
                          "type": "string",
                          "metadata": {
                            "description": "Required. Name of a Diagnostic Metric category for a resource type this setting is applied to. Set to `AllMetrics` to collect all metrics."
                          }
                        },
                        "enabled": {
                          "type": "bool",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Enable or disable the category explicitly. Default is `true`."
                          }
                        }
                      }
                    },
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. The name of metrics that will be streamed. \"allMetrics\" includes all possible metrics for the resource. Set to `[]` to disable metric collection."
                    }
                  },
                  "logAnalyticsDestinationType": {
                    "type": "string",
                    "allowedValues": [
                      "AzureDiagnostics",
                      "Dedicated"
                    ],
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. A string indicating whether the export to Log Analytics should use the default destination type, i.e. AzureDiagnostics, or use a destination type."
                    }
                  },
                  "workspaceResourceId": {
                    "type": "string",
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. Resource ID of the diagnostic log analytics workspace. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                    }
                  },
                  "storageAccountResourceId": {
                    "type": "string",
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. Resource ID of the diagnostic storage account. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                    }
                  },
                  "eventHubAuthorizationRuleResourceId": {
                    "type": "string",
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. Resource ID of the diagnostic event hub authorization rule for the Event Hubs namespace in which the event hub should be created or streamed to."
                    }
                  },
                  "eventHubName": {
                    "type": "string",
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. Name of the diagnostic event hub within the namespace to which logs are streamed. Without this, an event hub is created for each log category. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                    }
                  },
                  "marketplacePartnerResourceId": {
                    "type": "string",
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. The full ARM resource ID of the Marketplace resource to which you would like to send Diagnostic Logs."
                    }
                  }
                }
              },
              "nullable": true
            },
            "secretsExportConfigurationType": {
              "type": "object",
              "properties": {
                "keyVaultResourceId": {
                  "type": "string",
                  "metadata": {
                    "description": "Required. The key vault name where to store the API Admin keys generated by the modules."
                  }
                },
                "primaryAdminKeyName": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The primaryAdminKey secret name to create."
                  }
                },
                "secondaryAdminKeyName": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The secondaryAdminKey secret name to create."
                  }
                }
              }
            },
            "secretsOutputType": {
              "type": "object",
              "properties": {},
              "additionalProperties": {
                "$ref": "#/definitions/secretSetType",
                "metadata": {
                  "description": "An exported secret's references."
                }
              }
            },
            "secretSetType": {
              "type": "object",
              "properties": {
                "secretResourceId": {
                  "type": "string",
                  "metadata": {
                    "description": "The resourceId of the exported secret."
                  }
                },
                "secretUri": {
                  "type": "string",
                  "metadata": {
                    "description": "The secret URI of the exported secret."
                  }
                }
              },
              "metadata": {
                "__bicep_imported_from!": {
                  "sourceTemplate": "modules/keyVaultExport.bicep"
                }
              }
            }
          },
          "parameters": {
            "name": {
              "type": "string",
              "metadata": {
                "description": "Required. The name of the Azure Cognitive Search service to create or update. Search service names must only contain lowercase letters, digits or dashes, cannot use dash as the first two or last one characters, cannot contain consecutive dashes, and must be between 2 and 60 characters in length. Search service names must be globally unique since they are part of the service URI (https://<name>.search.windows.net). You cannot change the service name after the service is created."
              }
            },
            "authOptions": {
              "type": "object",
              "defaultValue": {},
              "metadata": {
                "description": "Optional. Defines the options for how the data plane API of a Search service authenticates requests. Must remain an empty object {} if 'disableLocalAuth' is set to true."
              }
            },
            "disableLocalAuth": {
              "type": "bool",
              "defaultValue": true,
              "metadata": {
                "description": "Optional. When set to true, calls to the search service will not be permitted to utilize API keys for authentication. This cannot be set to true if 'authOptions' are defined."
              }
            },
            "enableTelemetry": {
              "type": "bool",
              "defaultValue": true,
              "metadata": {
                "description": "Optional. Enable/Disable usage telemetry for module."
              }
            },
            "cmkEnforcement": {
              "type": "string",
              "defaultValue": "Unspecified",
              "allowedValues": [
                "Disabled",
                "Enabled",
                "Unspecified"
              ],
              "metadata": {
                "description": "Optional. Describes a policy that determines how resources within the search service are to be encrypted with Customer Managed Keys."
              }
            },
            "hostingMode": {
              "type": "string",
              "defaultValue": "default",
              "allowedValues": [
                "default",
                "highDensity"
              ],
              "metadata": {
                "description": "Optional. Applicable only for the standard3 SKU. You can set this property to enable up to 3 high density partitions that allow up to 1000 indexes, which is much higher than the maximum indexes allowed for any other SKU. For the standard3 SKU, the value is either 'default' or 'highDensity'. For all other SKUs, this value must be 'default'."
              }
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]",
              "metadata": {
                "description": "Optional. Location for all Resources."
              }
            },
            "lock": {
              "$ref": "#/definitions/lockType",
              "metadata": {
                "description": "Optional. The lock settings of the service."
              }
            },
            "networkRuleSet": {
              "type": "object",
              "defaultValue": {},
              "metadata": {
                "description": "Optional. Network specific rules that determine how the Azure Cognitive Search service may be reached."
              }
            },
            "partitionCount": {
              "type": "int",
              "defaultValue": 1,
              "minValue": 1,
              "maxValue": 12,
              "metadata": {
                "description": "Optional. The number of partitions in the search service; if specified, it can be 1, 2, 3, 4, 6, or 12. Values greater than 1 are only valid for standard SKUs. For 'standard3' services with hostingMode set to 'highDensity', the allowed values are between 1 and 3."
              }
            },
            "privateEndpoints": {
              "$ref": "#/definitions/privateEndpointType",
              "metadata": {
                "description": "Optional. Configuration details for private endpoints. For security reasons, it is recommended to use private endpoints whenever possible."
              }
            },
            "sharedPrivateLinkResources": {
              "type": "array",
              "defaultValue": [],
              "metadata": {
                "description": "Optional. The sharedPrivateLinkResources to create as part of the search Service."
              }
            },
            "publicNetworkAccess": {
              "type": "string",
              "defaultValue": "Enabled",
              "allowedValues": [
                "Enabled",
                "Disabled"
              ],
              "metadata": {
                "description": "Optional. This value can be set to 'Enabled' to avoid breaking changes on existing customer resources and templates. If set to 'Disabled', traffic over public interface is not allowed, and private endpoint connections would be the exclusive access method."
              }
            },
            "secretsExportConfiguration": {
              "$ref": "#/definitions/secretsExportConfigurationType",
              "nullable": true,
              "metadata": {
                "description": "Optional. Key vault reference and secret settings for the module's secrets export."
              }
            },
            "replicaCount": {
              "type": "int",
              "defaultValue": 3,
              "minValue": 1,
              "maxValue": 12,
              "metadata": {
                "description": "Optional. The number of replicas in the search service. If specified, it must be a value between 1 and 12 inclusive for standard SKUs or between 1 and 3 inclusive for basic SKU."
              }
            },
            "roleAssignments": {
              "$ref": "#/definitions/roleAssignmentType",
              "metadata": {
                "description": "Optional. Array of role assignments to create."
              }
            },
            "semanticSearch": {
              "type": "string",
              "nullable": true,
              "allowedValues": [
                "disabled",
                "free",
                "standard"
              ],
              "metadata": {
                "description": "Optional. Sets options that control the availability of semantic search. This configuration is only possible for certain search SKUs in certain locations."
              }
            },
            "sku": {
              "type": "string",
              "defaultValue": "standard",
              "allowedValues": [
                "basic",
                "free",
                "standard",
                "standard2",
                "standard3",
                "storage_optimized_l1",
                "storage_optimized_l2"
              ],
              "metadata": {
                "description": "Optional. Defines the SKU of an Azure Cognitive Search Service, which determines price tier and capacity limits."
              }
            },
            "managedIdentities": {
              "$ref": "#/definitions/managedIdentitiesType",
              "metadata": {
                "description": "Optional. The managed identity definition for this resource."
              }
            },
            "diagnosticSettings": {
              "$ref": "#/definitions/diagnosticSettingType",
              "metadata": {
                "description": "Optional. The diagnostic settings of the service."
              }
            },
            "tags": {
              "type": "object",
              "nullable": true,
              "metadata": {
                "description": "Optional. Tags to help categorize the resource in the Azure portal."
              }
            }
          },
          "variables": {
            "copy": [
              {
                "name": "formattedRoleAssignments",
                "count": "[length(coalesce(parameters('roleAssignments'), createArray()))]",
                "input": "[union(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')], createObject('roleDefinitionId', coalesce(tryGet(variables('builtInRoleNames'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName), if(contains(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, '/providers/Microsoft.Authorization/roleDefinitions/'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, subscriptionResourceId('Microsoft.Authorization/roleDefinitions', coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName)))))]"
              }
            ],
            "formattedUserAssignedIdentities": "[reduce(map(coalesce(tryGet(parameters('managedIdentities'), 'userAssignedResourceIds'), createArray()), lambda('id', createObject(format('{0}', lambdaVariables('id')), createObject()))), createObject(), lambda('cur', 'next', union(lambdaVariables('cur'), lambdaVariables('next'))))]",
            "identity": "[if(not(empty(parameters('managedIdentities'))), createObject('type', if(coalesce(tryGet(parameters('managedIdentities'), 'systemAssigned'), false()), if(not(empty(coalesce(tryGet(parameters('managedIdentities'), 'userAssignedResourceIds'), createObject()))), 'SystemAssigned,UserAssigned', 'SystemAssigned'), if(not(empty(coalesce(tryGet(parameters('managedIdentities'), 'userAssignedResourceIds'), createObject()))), 'UserAssigned', '')), 'userAssignedIdentities', if(not(empty(variables('formattedUserAssignedIdentities'))), variables('formattedUserAssignedIdentities'), null())), null())]",
            "builtInRoleNames": {
              "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
              "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
              "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
              "Role Based Access Control Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]",
              "Search Index Data Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8ebe5a00-799e-43f5-93ac-243d3dce84a7')]",
              "Search Index Data Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '1407120a-92aa-4202-b7e9-c0e197c71c8f')]",
              "Search Service Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '7ca78c08-252a-4471-8644-bb5ff32d4ba0')]",
              "User Access Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18d7d88d-d35e-4fb5-a5c3-7773c20a72d9')]"
            }
          },
          "resources": {
            "avmTelemetry": {
              "condition": "[parameters('enableTelemetry')]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2024-03-01",
              "name": "[format('46d3xbcp.res.search-searchservice.{0}.{1}', replace('0.7.1', '.', '-'), substring(uniqueString(deployment().name, parameters('location')), 0, 4))]",
              "properties": {
                "mode": "Incremental",
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "resources": [],
                  "outputs": {
                    "telemetry": {
                      "type": "String",
                      "value": "For more information, see https://aka.ms/avm/TelemetryInfo"
                    }
                  }
                }
              }
            },
            "searchService": {
              "type": "Microsoft.Search/searchServices",
              "apiVersion": "2024-03-01-preview",
              "name": "[parameters('name')]",
              "location": "[parameters('location')]",
              "sku": {
                "name": "[parameters('sku')]"
              },
              "tags": "[parameters('tags')]",
              "identity": "[variables('identity')]",
              "properties": {
                "authOptions": "[if(not(empty(parameters('authOptions'))), parameters('authOptions'), null())]",
                "disableLocalAuth": "[parameters('disableLocalAuth')]",
                "encryptionWithCmk": {
                  "enforcement": "[parameters('cmkEnforcement')]"
                },
                "hostingMode": "[parameters('hostingMode')]",
                "networkRuleSet": "[parameters('networkRuleSet')]",
                "partitionCount": "[parameters('partitionCount')]",
                "replicaCount": "[parameters('replicaCount')]",
                "publicNetworkAccess": "[toLower(parameters('publicNetworkAccess'))]",
                "semanticSearch": "[parameters('semanticSearch')]"
              }
            },
            "searchService_diagnosticSettings": {
              "copy": {
                "name": "searchService_diagnosticSettings",
                "count": "[length(coalesce(parameters('diagnosticSettings'), createArray()))]"
              },
              "type": "Microsoft.Insights/diagnosticSettings",
              "apiVersion": "2021-05-01-preview",
              "scope": "[format('Microsoft.Search/searchServices/{0}', parameters('name'))]",
              "name": "[coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'name'), format('{0}-diagnosticSettings', parameters('name')))]",
              "properties": {
                "copy": [
                  {
                    "name": "metrics",
                    "count": "[length(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'metricCategories'), createArray(createObject('category', 'AllMetrics'))))]",
                    "input": {
                      "category": "[coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'metricCategories'), createArray(createObject('category', 'AllMetrics')))[copyIndex('metrics')].category]",
                      "enabled": "[coalesce(tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'metricCategories'), createArray(createObject('category', 'AllMetrics')))[copyIndex('metrics')], 'enabled'), true())]",
                      "timeGrain": null
                    }
                  },
                  {
                    "name": "logs",
                    "count": "[length(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs'))))]",
                    "input": {
                      "categoryGroup": "[tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs')))[copyIndex('logs')], 'categoryGroup')]",
                      "category": "[tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs')))[copyIndex('logs')], 'category')]",
                      "enabled": "[coalesce(tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs')))[copyIndex('logs')], 'enabled'), true())]"
                    }
                  }
                ],
                "storageAccountId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'storageAccountResourceId')]",
                "workspaceId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'workspaceResourceId')]",
                "eventHubAuthorizationRuleId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'eventHubAuthorizationRuleResourceId')]",
                "eventHubName": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'eventHubName')]",
                "marketplacePartnerId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'marketplacePartnerResourceId')]",
                "logAnalyticsDestinationType": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logAnalyticsDestinationType')]"
              },
              "dependsOn": [
                "searchService"
              ]
            },
            "searchService_lock": {
              "condition": "[and(not(empty(coalesce(parameters('lock'), createObject()))), not(equals(tryGet(parameters('lock'), 'kind'), 'None')))]",
              "type": "Microsoft.Authorization/locks",
              "apiVersion": "2020-05-01",
              "scope": "[format('Microsoft.Search/searchServices/{0}', parameters('name'))]",
              "name": "[coalesce(tryGet(parameters('lock'), 'name'), format('lock-{0}', parameters('name')))]",
              "properties": {
                "level": "[coalesce(tryGet(parameters('lock'), 'kind'), '')]",
                "notes": "[if(equals(tryGet(parameters('lock'), 'kind'), 'CanNotDelete'), 'Cannot delete resource or child resources.', 'Cannot delete or modify the resource or child resources.')]"
              },
              "dependsOn": [
                "searchService"
              ]
            },
            "searchService_roleAssignments": {
              "copy": {
                "name": "searchService_roleAssignments",
                "count": "[length(coalesce(variables('formattedRoleAssignments'), createArray()))]"
              },
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.Search/searchServices/{0}', parameters('name'))]",
              "name": "[coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'name'), guid(resourceId('Microsoft.Search/searchServices', parameters('name')), coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId, coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId))]",
              "properties": {
                "roleDefinitionId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId]",
                "principalId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId]",
                "description": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'description')]",
                "principalType": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'principalType')]",
                "condition": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition')]",
                "conditionVersion": "[if(not(empty(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition'))), coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'conditionVersion'), '2.0'), null())]",
                "delegatedManagedIdentityResourceId": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'delegatedManagedIdentityResourceId')]"
              },
              "dependsOn": [
                "searchService"
              ]
            },
            "searchService_privateEndpoints": {
              "copy": {
                "name": "searchService_privateEndpoints",
                "count": "[length(coalesce(parameters('privateEndpoints'), createArray()))]"
              },
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('{0}-searchService-PrivateEndpoint-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
              "resourceGroup": "[coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'resourceGroupName'), '')]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "name": {
                    "value": "[coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'name'), format('pep-{0}-{1}-{2}', last(split(resourceId('Microsoft.Search/searchServices', parameters('name')), '/')), coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'service'), 'searchService'), copyIndex()))]"
                  },
                  "privateLinkServiceConnections": "[if(not(equals(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'isManualConnection'), true())), createObject('value', createArray(createObject('name', coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'privateLinkServiceConnectionName'), format('{0}-{1}-{2}', last(split(resourceId('Microsoft.Search/searchServices', parameters('name')), '/')), coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'service'), 'searchService'), copyIndex())), 'properties', createObject('privateLinkServiceId', resourceId('Microsoft.Search/searchServices', parameters('name')), 'groupIds', createArray(coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'service'), 'searchService')))))), createObject('value', null()))]",
                  "manualPrivateLinkServiceConnections": "[if(equals(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'isManualConnection'), true()), createObject('value', createArray(createObject('name', coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'privateLinkServiceConnectionName'), format('{0}-{1}-{2}', last(split(resourceId('Microsoft.Search/searchServices', parameters('name')), '/')), coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'service'), 'searchService'), copyIndex())), 'properties', createObject('privateLinkServiceId', resourceId('Microsoft.Search/searchServices', parameters('name')), 'groupIds', createArray(coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'service'), 'searchService')), 'requestMessage', coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'manualConnectionRequestMessage'), 'Manual approval required.'))))), createObject('value', null()))]",
                  "subnetResourceId": {
                    "value": "[coalesce(parameters('privateEndpoints'), createArray())[copyIndex()].subnetResourceId]"
                  },
                  "enableTelemetry": {
                    "value": "[coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'enableTelemetry'), parameters('enableTelemetry'))]"
                  },
                  "location": {
                    "value": "[coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'location'), reference(split(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()].subnetResourceId, '/subnets/')[0], '2020-06-01', 'Full').location)]"
                  },
                  "lock": {
                    "value": "[coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'lock'), parameters('lock'))]"
                  },
                  "privateDnsZoneGroup": {
                    "value": "[tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'privateDnsZoneGroup')]"
                  },
                  "roleAssignments": {
                    "value": "[tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'roleAssignments')]"
                  },
                  "tags": {
                    "value": "[coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'tags'), parameters('tags'))]"
                  },
                  "customDnsConfigs": {
                    "value": "[tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'customDnsConfigs')]"
                  },
                  "ipConfigurations": {
                    "value": "[tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'ipConfigurations')]"
                  },
                  "applicationSecurityGroupResourceIds": {
                    "value": "[tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'applicationSecurityGroupResourceIds')]"
                  },
                  "customNetworkInterfaceName": {
                    "value": "[tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'customNetworkInterfaceName')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "languageVersion": "2.0",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.29.47.4906",
                      "templateHash": "1277254088602407590"
                    },
                    "name": "Private Endpoints",
                    "description": "This module deploys a Private Endpoint.",
                    "owner": "Azure/module-maintainers"
                  },
                  "definitions": {
                    "privateDnsZoneGroupType": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The name of the Private DNS Zone Group."
                          }
                        },
                        "privateDnsZoneGroupConfigs": {
                          "type": "array",
                          "items": {
                            "$ref": "#/definitions/privateDnsZoneGroupConfigType"
                          },
                          "metadata": {
                            "description": "Required. The private DNS zone groups to associate the private endpoint. A DNS zone group can support up to 5 DNS zones."
                          }
                        }
                      }
                    },
                    "roleAssignmentType": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "name": {
                            "type": "string",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. The name (as GUID) of the role assignment. If not provided, a GUID will be generated."
                            }
                          },
                          "roleDefinitionIdOrName": {
                            "type": "string",
                            "metadata": {
                              "description": "Required. The role to assign. You can provide either the display name of the role definition, the role definition GUID, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                            }
                          },
                          "principalId": {
                            "type": "string",
                            "metadata": {
                              "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
                            }
                          },
                          "principalType": {
                            "type": "string",
                            "allowedValues": [
                              "Device",
                              "ForeignGroup",
                              "Group",
                              "ServicePrincipal",
                              "User"
                            ],
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. The principal type of the assigned principal ID."
                            }
                          },
                          "description": {
                            "type": "string",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. The description of the role assignment."
                            }
                          },
                          "condition": {
                            "type": "string",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\"."
                            }
                          },
                          "conditionVersion": {
                            "type": "string",
                            "allowedValues": [
                              "2.0"
                            ],
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. Version of the condition."
                            }
                          },
                          "delegatedManagedIdentityResourceId": {
                            "type": "string",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. The Resource Id of the delegated managed identity resource."
                            }
                          }
                        }
                      },
                      "nullable": true
                    },
                    "lockType": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Specify the name of lock."
                          }
                        },
                        "kind": {
                          "type": "string",
                          "allowedValues": [
                            "CanNotDelete",
                            "None",
                            "ReadOnly"
                          ],
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Specify the type of lock."
                          }
                        }
                      },
                      "nullable": true
                    },
                    "ipConfigurationsType": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "name": {
                            "type": "string",
                            "metadata": {
                              "description": "Required. The name of the resource that is unique within a resource group."
                            }
                          },
                          "properties": {
                            "type": "object",
                            "properties": {
                              "groupId": {
                                "type": "string",
                                "metadata": {
                                  "description": "Required. The ID of a group obtained from the remote resource that this private endpoint should connect to. If used with private link service connection, this property must be defined as empty string."
                                }
                              },
                              "memberName": {
                                "type": "string",
                                "metadata": {
                                  "description": "Required. The member name of a group obtained from the remote resource that this private endpoint should connect to. If used with private link service connection, this property must be defined as empty string."
                                }
                              },
                              "privateIPAddress": {
                                "type": "string",
                                "metadata": {
                                  "description": "Required. A private IP address obtained from the private endpoint's subnet."
                                }
                              }
                            },
                            "metadata": {
                              "description": "Required. Properties of private endpoint IP configurations."
                            }
                          }
                        }
                      },
                      "nullable": true
                    },
                    "manualPrivateLinkServiceConnectionsType": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "name": {
                            "type": "string",
                            "metadata": {
                              "description": "Required. The name of the private link service connection."
                            }
                          },
                          "properties": {
                            "type": "object",
                            "properties": {
                              "groupIds": {
                                "type": "array",
                                "items": {
                                  "type": "string"
                                },
                                "metadata": {
                                  "description": "Required. The ID of a group obtained from the remote resource that this private endpoint should connect to. If used with private link service connection, this property must be defined as empty string array `[]`."
                                }
                              },
                              "privateLinkServiceId": {
                                "type": "string",
                                "metadata": {
                                  "description": "Required. The resource id of private link service."
                                }
                              },
                              "requestMessage": {
                                "type": "string",
                                "metadata": {
                                  "description": "Optional. A message passed to the owner of the remote resource with this connection request. Restricted to 140 chars."
                                }
                              }
                            },
                            "metadata": {
                              "description": "Required. Properties of private link service connection."
                            }
                          }
                        }
                      },
                      "nullable": true
                    },
                    "privateLinkServiceConnectionsType": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "name": {
                            "type": "string",
                            "metadata": {
                              "description": "Required. The name of the private link service connection."
                            }
                          },
                          "properties": {
                            "type": "object",
                            "properties": {
                              "groupIds": {
                                "type": "array",
                                "items": {
                                  "type": "string"
                                },
                                "metadata": {
                                  "description": "Required. The ID of a group obtained from the remote resource that this private endpoint should connect to. If used with private link service connection, this property must be defined as empty string array `[]`."
                                }
                              },
                              "privateLinkServiceId": {
                                "type": "string",
                                "metadata": {
                                  "description": "Required. The resource id of private link service."
                                }
                              },
                              "requestMessage": {
                                "type": "string",
                                "nullable": true,
                                "metadata": {
                                  "description": "Optional. A message passed to the owner of the remote resource with this connection request. Restricted to 140 chars."
                                }
                              }
                            },
                            "metadata": {
                              "description": "Required. Properties of private link service connection."
                            }
                          }
                        }
                      },
                      "nullable": true
                    },
                    "customDnsConfigType": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "fqdn": {
                            "type": "string",
                            "metadata": {
                              "description": "Required. Fqdn that resolves to private endpoint IP address."
                            }
                          },
                          "ipAddresses": {
                            "type": "array",
                            "items": {
                              "type": "string"
                            },
                            "metadata": {
                              "description": "Required. A list of private IP addresses of the private endpoint."
                            }
                          }
                        }
                      },
                      "nullable": true
                    },
                    "privateDnsZoneGroupConfigType": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The name of the private DNS zone group config."
                          }
                        },
                        "privateDnsZoneResourceId": {
                          "type": "string",
                          "metadata": {
                            "description": "Required. The resource id of the private DNS zone."
                          }
                        }
                      },
                      "metadata": {
                        "__bicep_imported_from!": {
                          "sourceTemplate": "private-dns-zone-group/main.bicep"
                        }
                      }
                    }
                  },
                  "parameters": {
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. Name of the private endpoint resource to create."
                      }
                    },
                    "subnetResourceId": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. Resource ID of the subnet where the endpoint needs to be created."
                      }
                    },
                    "applicationSecurityGroupResourceIds": {
                      "type": "array",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Application security groups in which the private endpoint IP configuration is included."
                      }
                    },
                    "customNetworkInterfaceName": {
                      "type": "string",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The custom name of the network interface attached to the private endpoint."
                      }
                    },
                    "ipConfigurations": {
                      "$ref": "#/definitions/ipConfigurationsType",
                      "metadata": {
                        "description": "Optional. A list of IP configurations of the private endpoint. This will be used to map to the First Party Service endpoints."
                      }
                    },
                    "privateDnsZoneGroup": {
                      "$ref": "#/definitions/privateDnsZoneGroupType",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The private DNS zone group to configure for the private endpoint."
                      }
                    },
                    "location": {
                      "type": "string",
                      "defaultValue": "[resourceGroup().location]",
                      "metadata": {
                        "description": "Optional. Location for all Resources."
                      }
                    },
                    "lock": {
                      "$ref": "#/definitions/lockType",
                      "metadata": {
                        "description": "Optional. The lock settings of the service."
                      }
                    },
                    "roleAssignments": {
                      "$ref": "#/definitions/roleAssignmentType",
                      "metadata": {
                        "description": "Optional. Array of role assignments to create."
                      }
                    },
                    "tags": {
                      "type": "object",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Tags to be applied on all resources/resource groups in this deployment."
                      }
                    },
                    "customDnsConfigs": {
                      "$ref": "#/definitions/customDnsConfigType",
                      "metadata": {
                        "description": "Optional. Custom DNS configurations."
                      }
                    },
                    "manualPrivateLinkServiceConnections": {
                      "$ref": "#/definitions/manualPrivateLinkServiceConnectionsType",
                      "metadata": {
                        "description": "Optional. A grouping of information about the connection to the remote resource. Used when the network admin does not have access to approve connections to the remote resource."
                      }
                    },
                    "privateLinkServiceConnections": {
                      "$ref": "#/definitions/privateLinkServiceConnectionsType",
                      "metadata": {
                        "description": "Optional. A grouping of information about the connection to the remote resource."
                      }
                    },
                    "enableTelemetry": {
                      "type": "bool",
                      "defaultValue": true,
                      "metadata": {
                        "description": "Optional. Enable/Disable usage telemetry for module."
                      }
                    }
                  },
                  "variables": {
                    "copy": [
                      {
                        "name": "formattedRoleAssignments",
                        "count": "[length(coalesce(parameters('roleAssignments'), createArray()))]",
                        "input": "[union(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')], createObject('roleDefinitionId', coalesce(tryGet(variables('builtInRoleNames'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName), if(contains(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, '/providers/Microsoft.Authorization/roleDefinitions/'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, subscriptionResourceId('Microsoft.Authorization/roleDefinitions', coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName)))))]"
                      }
                    ],
                    "builtInRoleNames": {
                      "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                      "DNS Resolver Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '0f2ebee7-ffd4-4fc0-b3b7-664099fdad5d')]",
                      "DNS Zone Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'befefa01-2a29-4197-83a8-272ff33ce314')]",
                      "Domain Services Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'eeaeda52-9324-47f6-8069-5d5bade478b2')]",
                      "Domain Services Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '361898ef-9ed1-48c2-849c-a832951106bb')]",
                      "Network Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '4d97b98b-1d4f-4787-a291-c67834d212e7')]",
                      "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
                      "Private DNS Zone Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b12aa53e-6015-4669-85d0-8515ebb3ae7f')]",
                      "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
                      "Role Based Access Control Administrator (Preview)": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]"
                    }
                  },
                  "resources": {
                    "avmTelemetry": {
                      "condition": "[parameters('enableTelemetry')]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2024-03-01",
                      "name": "[format('46d3xbcp.res.network-privateendpoint.{0}.{1}', replace('0.7.1', '.', '-'), substring(uniqueString(deployment().name, parameters('location')), 0, 4))]",
                      "properties": {
                        "mode": "Incremental",
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "resources": [],
                          "outputs": {
                            "telemetry": {
                              "type": "String",
                              "value": "For more information, see https://aka.ms/avm/TelemetryInfo"
                            }
                          }
                        }
                      }
                    },
                    "privateEndpoint": {
                      "type": "Microsoft.Network/privateEndpoints",
                      "apiVersion": "2023-11-01",
                      "name": "[parameters('name')]",
                      "location": "[parameters('location')]",
                      "tags": "[parameters('tags')]",
                      "properties": {
                        "copy": [
                          {
                            "name": "applicationSecurityGroups",
                            "count": "[length(coalesce(parameters('applicationSecurityGroupResourceIds'), createArray()))]",
                            "input": {
                              "id": "[coalesce(parameters('applicationSecurityGroupResourceIds'), createArray())[copyIndex('applicationSecurityGroups')]]"
                            }
                          }
                        ],
                        "customDnsConfigs": "[coalesce(parameters('customDnsConfigs'), createArray())]",
                        "customNetworkInterfaceName": "[coalesce(parameters('customNetworkInterfaceName'), '')]",
                        "ipConfigurations": "[coalesce(parameters('ipConfigurations'), createArray())]",
                        "manualPrivateLinkServiceConnections": "[coalesce(parameters('manualPrivateLinkServiceConnections'), createArray())]",
                        "privateLinkServiceConnections": "[coalesce(parameters('privateLinkServiceConnections'), createArray())]",
                        "subnet": {
                          "id": "[parameters('subnetResourceId')]"
                        }
                      }
                    },
                    "privateEndpoint_lock": {
                      "condition": "[and(not(empty(coalesce(parameters('lock'), createObject()))), not(equals(tryGet(parameters('lock'), 'kind'), 'None')))]",
                      "type": "Microsoft.Authorization/locks",
                      "apiVersion": "2020-05-01",
                      "scope": "[format('Microsoft.Network/privateEndpoints/{0}', parameters('name'))]",
                      "name": "[coalesce(tryGet(parameters('lock'), 'name'), format('lock-{0}', parameters('name')))]",
                      "properties": {
                        "level": "[coalesce(tryGet(parameters('lock'), 'kind'), '')]",
                        "notes": "[if(equals(tryGet(parameters('lock'), 'kind'), 'CanNotDelete'), 'Cannot delete resource or child resources.', 'Cannot delete or modify the resource or child resources.')]"
                      },
                      "dependsOn": [
                        "privateEndpoint"
                      ]
                    },
                    "privateEndpoint_roleAssignments": {
                      "copy": {
                        "name": "privateEndpoint_roleAssignments",
                        "count": "[length(coalesce(variables('formattedRoleAssignments'), createArray()))]"
                      },
                      "type": "Microsoft.Authorization/roleAssignments",
                      "apiVersion": "2022-04-01",
                      "scope": "[format('Microsoft.Network/privateEndpoints/{0}', parameters('name'))]",
                      "name": "[coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'name'), guid(resourceId('Microsoft.Network/privateEndpoints', parameters('name')), coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId, coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId))]",
                      "properties": {
                        "roleDefinitionId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId]",
                        "principalId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId]",
                        "description": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'description')]",
                        "principalType": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'principalType')]",
                        "condition": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition')]",
                        "conditionVersion": "[if(not(empty(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition'))), coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'conditionVersion'), '2.0'), null())]",
                        "delegatedManagedIdentityResourceId": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'delegatedManagedIdentityResourceId')]"
                      },
                      "dependsOn": [
                        "privateEndpoint"
                      ]
                    },
                    "privateEndpoint_privateDnsZoneGroup": {
                      "condition": "[not(empty(parameters('privateDnsZoneGroup')))]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('{0}-PrivateEndpoint-PrivateDnsZoneGroup', uniqueString(deployment().name))]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "name": {
                            "value": "[tryGet(parameters('privateDnsZoneGroup'), 'name')]"
                          },
                          "privateEndpointName": {
                            "value": "[parameters('name')]"
                          },
                          "privateDnsZoneConfigs": {
                            "value": "[parameters('privateDnsZoneGroup').privateDnsZoneGroupConfigs]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "languageVersion": "2.0",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.29.47.4906",
                              "templateHash": "5805178546717255803"
                            },
                            "name": "Private Endpoint Private DNS Zone Groups",
                            "description": "This module deploys a Private Endpoint Private DNS Zone Group.",
                            "owner": "Azure/module-maintainers"
                          },
                          "definitions": {
                            "privateDnsZoneGroupConfigType": {
                              "type": "object",
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The name of the private DNS zone group config."
                                  }
                                },
                                "privateDnsZoneResourceId": {
                                  "type": "string",
                                  "metadata": {
                                    "description": "Required. The resource id of the private DNS zone."
                                  }
                                }
                              },
                              "metadata": {
                                "__bicep_export!": true
                              }
                            }
                          },
                          "parameters": {
                            "privateEndpointName": {
                              "type": "string",
                              "metadata": {
                                "description": "Conditional. The name of the parent private endpoint. Required if the template is used in a standalone deployment."
                              }
                            },
                            "privateDnsZoneConfigs": {
                              "type": "array",
                              "items": {
                                "$ref": "#/definitions/privateDnsZoneGroupConfigType"
                              },
                              "minLength": 1,
                              "maxLength": 5,
                              "metadata": {
                                "description": "Required. Array of private DNS zone configurations of the private DNS zone group. A DNS zone group can support up to 5 DNS zones."
                              }
                            },
                            "name": {
                              "type": "string",
                              "defaultValue": "default",
                              "metadata": {
                                "description": "Optional. The name of the private DNS zone group."
                              }
                            }
                          },
                          "variables": {
                            "copy": [
                              {
                                "name": "privateDnsZoneConfigsVar",
                                "count": "[length(parameters('privateDnsZoneConfigs'))]",
                                "input": {
                                  "name": "[coalesce(tryGet(parameters('privateDnsZoneConfigs')[copyIndex('privateDnsZoneConfigsVar')], 'name'), last(split(parameters('privateDnsZoneConfigs')[copyIndex('privateDnsZoneConfigsVar')].privateDnsZoneResourceId, '/')))]",
                                  "properties": {
                                    "privateDnsZoneId": "[parameters('privateDnsZoneConfigs')[copyIndex('privateDnsZoneConfigsVar')].privateDnsZoneResourceId]"
                                  }
                                }
                              }
                            ]
                          },
                          "resources": {
                            "privateEndpoint": {
                              "existing": true,
                              "type": "Microsoft.Network/privateEndpoints",
                              "apiVersion": "2023-11-01",
                              "name": "[parameters('privateEndpointName')]"
                            },
                            "privateDnsZoneGroup": {
                              "type": "Microsoft.Network/privateEndpoints/privateDnsZoneGroups",
                              "apiVersion": "2023-11-01",
                              "name": "[format('{0}/{1}', parameters('privateEndpointName'), parameters('name'))]",
                              "properties": {
                                "privateDnsZoneConfigs": "[variables('privateDnsZoneConfigsVar')]"
                              },
                              "dependsOn": [
                                "privateEndpoint"
                              ]
                            }
                          },
                          "outputs": {
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "The name of the private endpoint DNS zone group."
                              },
                              "value": "[parameters('name')]"
                            },
                            "resourceId": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource ID of the private endpoint DNS zone group."
                              },
                              "value": "[resourceId('Microsoft.Network/privateEndpoints/privateDnsZoneGroups', parameters('privateEndpointName'), parameters('name'))]"
                            },
                            "resourceGroupName": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource group the private endpoint DNS zone group was deployed into."
                              },
                              "value": "[resourceGroup().name]"
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "privateEndpoint"
                      ]
                    }
                  },
                  "outputs": {
                    "resourceGroupName": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource group the private endpoint was deployed into."
                      },
                      "value": "[resourceGroup().name]"
                    },
                    "resourceId": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource ID of the private endpoint."
                      },
                      "value": "[resourceId('Microsoft.Network/privateEndpoints', parameters('name'))]"
                    },
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the private endpoint."
                      },
                      "value": "[parameters('name')]"
                    },
                    "location": {
                      "type": "string",
                      "metadata": {
                        "description": "The location the resource was deployed into."
                      },
                      "value": "[reference('privateEndpoint', '2023-11-01', 'full').location]"
                    },
                    "customDnsConfig": {
                      "$ref": "#/definitions/customDnsConfigType",
                      "metadata": {
                        "description": "The custom DNS configurations of the private endpoint."
                      },
                      "value": "[reference('privateEndpoint').customDnsConfigs]"
                    },
                    "networkInterfaceIds": {
                      "type": "array",
                      "metadata": {
                        "description": "The IDs of the network interfaces associated with the private endpoint."
                      },
                      "value": "[reference('privateEndpoint').networkInterfaces]"
                    },
                    "groupId": {
                      "type": "string",
                      "metadata": {
                        "description": "The group Id for the private endpoint Group."
                      },
                      "value": "[if(and(not(empty(reference('privateEndpoint').manualPrivateLinkServiceConnections)), greater(length(tryGet(reference('privateEndpoint').manualPrivateLinkServiceConnections[0].properties, 'groupIds')), 0)), coalesce(tryGet(reference('privateEndpoint').manualPrivateLinkServiceConnections[0].properties, 'groupIds', 0), ''), if(and(not(empty(reference('privateEndpoint').privateLinkServiceConnections)), greater(length(tryGet(reference('privateEndpoint').privateLinkServiceConnections[0].properties, 'groupIds')), 0)), coalesce(tryGet(reference('privateEndpoint').privateLinkServiceConnections[0].properties, 'groupIds', 0), ''), ''))]"
                    }
                  }
                }
              },
              "dependsOn": [
                "searchService"
              ]
            },
            "searchService_sharedPrivateLinkResources": {
              "copy": {
                "name": "searchService_sharedPrivateLinkResources",
                "count": "[length(parameters('sharedPrivateLinkResources'))]",
                "mode": "serial",
                "batchSize": 1
              },
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('{0}-searchService-SharedPrivateLink-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "name": {
                    "value": "[coalesce(tryGet(parameters('sharedPrivateLinkResources')[copyIndex()], 'name'), format('spl-{0}-{1}-{2}', last(split(resourceId('Microsoft.Search/searchServices', parameters('name')), '/')), parameters('sharedPrivateLinkResources')[copyIndex()].groupId, copyIndex()))]"
                  },
                  "searchServiceName": {
                    "value": "[parameters('name')]"
                  },
                  "privateLinkResourceId": {
                    "value": "[parameters('sharedPrivateLinkResources')[copyIndex()].privateLinkResourceId]"
                  },
                  "groupId": {
                    "value": "[parameters('sharedPrivateLinkResources')[copyIndex()].groupId]"
                  },
                  "requestMessage": {
                    "value": "[parameters('sharedPrivateLinkResources')[copyIndex()].requestMessage]"
                  },
                  "resourceRegion": {
                    "value": "[tryGet(parameters('sharedPrivateLinkResources')[copyIndex()], 'resourceRegion')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "languageVersion": "2.0",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.30.23.60470",
                      "templateHash": "1073269867332822875"
                    },
                    "name": "Search Services Private Link Resources",
                    "description": "This module deploys a Search Service Private Link Resource.",
                    "owner": "Azure/module-maintainers"
                  },
                  "parameters": {
                    "searchServiceName": {
                      "type": "string",
                      "metadata": {
                        "description": "Conditional. The name of the parent searchServices. Required if the template is used in a standalone deployment."
                      }
                    },
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. The name of the shared private link resource managed by the Azure Cognitive Search service within the specified resource group."
                      }
                    },
                    "privateLinkResourceId": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. The resource ID of the resource the shared private link resource is for."
                      }
                    },
                    "groupId": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. The group ID from the provider of resource the shared private link resource is for."
                      }
                    },
                    "requestMessage": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. The request message for requesting approval of the shared private link resource."
                      }
                    },
                    "resourceRegion": {
                      "type": "string",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Can be used to specify the Azure Resource Manager location of the resource to which a shared private link is to be created. This is only required for those resources whose DNS configuration are regional (such as Azure Kubernetes Service)."
                      }
                    }
                  },
                  "resources": {
                    "searchService": {
                      "existing": true,
                      "type": "Microsoft.Search/searchServices",
                      "apiVersion": "2023-11-01",
                      "name": "[parameters('searchServiceName')]"
                    },
                    "sharedPrivateLinkResource": {
                      "type": "Microsoft.Search/searchServices/sharedPrivateLinkResources",
                      "apiVersion": "2023-11-01",
                      "name": "[format('{0}/{1}', parameters('searchServiceName'), parameters('name'))]",
                      "properties": {
                        "privateLinkResourceId": "[parameters('privateLinkResourceId')]",
                        "groupId": "[parameters('groupId')]",
                        "requestMessage": "[parameters('requestMessage')]",
                        "resourceRegion": "[parameters('resourceRegion')]"
                      },
                      "dependsOn": [
                        "searchService"
                      ]
                    }
                  },
                  "outputs": {
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the shared private link resource."
                      },
                      "value": "[parameters('name')]"
                    },
                    "resourceId": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource ID of the shared private link resource."
                      },
                      "value": "[resourceId('Microsoft.Search/searchServices/sharedPrivateLinkResources', parameters('searchServiceName'), parameters('name'))]"
                    },
                    "resourceGroupName": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the resource group the shared private link resource was created in."
                      },
                      "value": "[resourceGroup().name]"
                    }
                  }
                }
              },
              "dependsOn": [
                "searchService"
              ]
            },
            "secretsExport": {
              "condition": "[not(equals(parameters('secretsExportConfiguration'), null()))]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('{0}-secrets-kv', uniqueString(deployment().name, parameters('location')))]",
              "subscriptionId": "[split(coalesce(tryGet(parameters('secretsExportConfiguration'), 'keyVaultResourceId'), '//'), '/')[2]]",
              "resourceGroup": "[split(coalesce(tryGet(parameters('secretsExportConfiguration'), 'keyVaultResourceId'), '////'), '/')[4]]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "keyVaultName": {
                    "value": "[last(split(coalesce(tryGet(parameters('secretsExportConfiguration'), 'keyVaultResourceId'), '//'), '/'))]"
                  },
                  "secretsToSet": {
                    "value": "[union(createArray(), if(contains(parameters('secretsExportConfiguration'), 'primaryAdminKeyName'), createArray(createObject('name', parameters('secretsExportConfiguration').primaryAdminKeyName, 'value', listAdminKeys(resourceId('Microsoft.Search/searchServices', parameters('name')), '2024-03-01-preview').primaryKey)), createArray()), if(contains(parameters('secretsExportConfiguration'), 'secondaryAdminKeyName'), createArray(createObject('name', parameters('secretsExportConfiguration').secondaryAdminKeyName, 'value', listAdminKeys(resourceId('Microsoft.Search/searchServices', parameters('name')), '2024-03-01-preview').secondaryKey)), createArray()))]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "languageVersion": "2.0",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.30.23.60470",
                      "templateHash": "12263717469683062316"
                    }
                  },
                  "definitions": {
                    "secretSetType": {
                      "type": "object",
                      "properties": {
                        "secretResourceId": {
                          "type": "string",
                          "metadata": {
                            "description": "The resourceId of the exported secret."
                          }
                        },
                        "secretUri": {
                          "type": "string",
                          "metadata": {
                            "description": "The secret URI of the exported secret."
                          }
                        }
                      },
                      "metadata": {
                        "__bicep_export!": true
                      }
                    },
                    "secretToSetType": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "metadata": {
                            "description": "Required. The name of the secret to set."
                          }
                        },
                        "value": {
                          "type": "securestring",
                          "metadata": {
                            "description": "Required. The value of the secret to set."
                          }
                        }
                      }
                    }
                  },
                  "parameters": {
                    "keyVaultName": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. The name of the Key Vault to set the ecrets in."
                      }
                    },
                    "secretsToSet": {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/secretToSetType"
                      },
                      "metadata": {
                        "description": "Required. The secrets to set in the Key Vault."
                      }
                    }
                  },
                  "resources": {
                    "keyVault": {
                      "existing": true,
                      "type": "Microsoft.KeyVault/vaults",
                      "apiVersion": "2022-07-01",
                      "name": "[parameters('keyVaultName')]"
                    },
                    "secrets": {
                      "copy": {
                        "name": "secrets",
                        "count": "[length(parameters('secretsToSet'))]"
                      },
                      "type": "Microsoft.KeyVault/vaults/secrets",
                      "apiVersion": "2023-07-01",
                      "name": "[format('{0}/{1}', parameters('keyVaultName'), parameters('secretsToSet')[copyIndex()].name)]",
                      "properties": {
                        "value": "[parameters('secretsToSet')[copyIndex()].value]"
                      },
                      "dependsOn": [
                        "keyVault"
                      ]
                    }
                  },
                  "outputs": {
                    "secretsSet": {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/secretSetType"
                      },
                      "metadata": {
                        "description": "The references to the secrets exported to the provided Key Vault."
                      },
                      "copy": {
                        "count": "[length(range(0, length(coalesce(parameters('secretsToSet'), createArray()))))]",
                        "input": {
                          "secretResourceId": "[resourceId('Microsoft.KeyVault/vaults/secrets', parameters('keyVaultName'), parameters('secretsToSet')[range(0, length(coalesce(parameters('secretsToSet'), createArray())))[copyIndex()]].name)]",
                          "secretUri": "[reference(format('secrets[{0}]', range(0, length(coalesce(parameters('secretsToSet'), createArray())))[copyIndex()])).secretUri]"
                        }
                      }
                    }
                  }
                }
              },
              "dependsOn": [
                "searchService"
              ]
            }
          },
          "outputs": {
            "name": {
              "type": "string",
              "metadata": {
                "description": "The name of the search service."
              },
              "value": "[parameters('name')]"
            },
            "resourceId": {
              "type": "string",
              "metadata": {
                "description": "The resource ID of the search service."
              },
              "value": "[resourceId('Microsoft.Search/searchServices', parameters('name'))]"
            },
            "resourceGroupName": {
              "type": "string",
              "metadata": {
                "description": "The name of the resource group the search service was created in."
              },
              "value": "[resourceGroup().name]"
            },
            "systemAssignedMIPrincipalId": {
              "type": "string",
              "metadata": {
                "description": "The principal ID of the system assigned identity."
              },
              "value": "[coalesce(tryGet(tryGet(reference('searchService', '2024-03-01-preview', 'full'), 'identity'), 'principalId'), '')]"
            },
            "location": {
              "type": "string",
              "metadata": {
                "description": "The location the resource was deployed into."
              },
              "value": "[reference('searchService', '2024-03-01-preview', 'full').location]"
            },
            "exportedSecrets": {
              "$ref": "#/definitions/secretsOutputType",
              "metadata": {
                "description": "A hashtable of references to the secrets exported to the provided Key Vault. The key of each reference is each secret's name."
              },
              "value": "[if(not(equals(parameters('secretsExportConfiguration'), null())), toObject(reference('secretsExport').outputs.secretsSet.value, lambda('secret', last(split(lambdaVariables('secret').secretResourceId, '/'))), lambda('secret', lambdaVariables('secret'))), createObject())]"
            }
          }
        }
      },
      "dependsOn": [
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), format('{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName')))), 'Microsoft.Resources/deployments', 'uami')]",
        "[subscriptionResourceId('Microsoft.Resources/resourceGroups', if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), format('{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName'))))]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "storage",
      "resourceGroup": "[if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), format('{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName')))]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "name": {
            "value": "[format('{0}{1}', variables('abbrs').storageStorageAccounts, variables('resourceToken'))]"
          },
          "location": {
            "value": "[reference(subscriptionResourceId('Microsoft.Resources/resourceGroups', if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), format('{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName')))), '2021-04-01', 'full').location]"
          },
          "tags": {
            "value": "[parameters('tags')]"
          },
          "kind": {
            "value": "StorageV2"
          },
          "skuName": {
            "value": "Standard_LRS"
          },
          "publicNetworkAccess": "[if(parameters('enableZeroTrust'), createObject('value', 'Disabled'), createObject('value', 'Enabled'))]",
          "networkAcls": "[if(parameters('enableZeroTrust'), createObject('value', createObject('defaultAction', 'Deny', 'bypass', 'AzureServices')), createObject('value', createObject('defaultAction', 'Allow')))]",
          "allowBlobPublicAccess": {
            "value": false
          },
          "allowSharedKeyAccess": "[if(parameters('enableZeroTrust'), createObject('value', false()), createObject('value', true()))]",
          "blobServices": {
            "value": {
              "deleteRetentionPolicyDays": 2,
              "deleteRetentionPolicyEnabled": true,
              "containers": [
                {
                  "name": "[variables('storageContainerName')]",
                  "publicAccess": "None"
                }
              ]
            }
          },
          "roleAssignments": {
            "value": [
              {
                "roleDefinitionIdOrName": "Storage Blob Data Reader",
                "principalId": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), format('{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName')))), 'Microsoft.Resources/deployments', 'uami'), '2022-09-01').outputs.principalId.value]",
                "principalType": "ServicePrincipal"
              },
              {
                "roleDefinitionIdOrName": "Storage Blob Data Contributor",
                "principalId": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), format('{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName')))), 'Microsoft.Resources/deployments', 'uami'), '2022-09-01').outputs.principalId.value]",
                "principalType": "ServicePrincipal"
              },
              {
                "roleDefinitionIdOrName": "Storage Blob Data Reader",
                "principalId": "[parameters('principalId')]",
                "principalType": "[variables('principalType')]"
              },
              {
                "roleDefinitionIdOrName": "Storage Blob Data Contributor",
                "principalId": "[parameters('principalId')]",
                "principalType": "[variables('principalType')]"
              }
            ]
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "languageVersion": "2.0",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.28.1.47646",
              "templateHash": "3958760216991467865"
            },
            "name": "Storage Accounts",
            "description": "This module deploys a Storage Account.",
            "owner": "Azure/module-maintainers"
          },
          "definitions": {
            "managedIdentitiesType": {
              "type": "object",
              "properties": {
                "systemAssigned": {
                  "type": "bool",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Enables system assigned managed identity on the resource."
                  }
                },
                "userAssignedResourceIds": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The resource ID(s) to assign to the resource."
                  }
                }
              },
              "nullable": true
            },
            "lockType": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Specify the name of lock."
                  }
                },
                "kind": {
                  "type": "string",
                  "allowedValues": [
                    "CanNotDelete",
                    "None",
                    "ReadOnly"
                  ],
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Specify the type of lock."
                  }
                }
              },
              "nullable": true
            },
            "roleAssignmentType": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "roleDefinitionIdOrName": {
                    "type": "string",
                    "metadata": {
                      "description": "Required. The role to assign. You can provide either the display name of the role definition, the role definition GUID, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                    }
                  },
                  "principalId": {
                    "type": "string",
                    "metadata": {
                      "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
                    }
                  },
                  "principalType": {
                    "type": "string",
                    "allowedValues": [
                      "Device",
                      "ForeignGroup",
                      "Group",
                      "ServicePrincipal",
                      "User"
                    ],
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. The principal type of the assigned principal ID."
                    }
                  },
                  "description": {
                    "type": "string",
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. The description of the role assignment."
                    }
                  },
                  "condition": {
                    "type": "string",
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\"."
                    }
                  },
                  "conditionVersion": {
                    "type": "string",
                    "allowedValues": [
                      "2.0"
                    ],
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. Version of the condition."
                    }
                  },
                  "delegatedManagedIdentityResourceId": {
                    "type": "string",
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. The Resource Id of the delegated managed identity resource."
                    }
                  }
                }
              },
              "nullable": true
            },
            "networkAclsType": {
              "type": "object",
              "properties": {
                "resourceAccessRules": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "tenantId": {
                        "type": "string",
                        "metadata": {
                          "description": "Required. The ID of the tenant in which the resource resides in."
                        }
                      },
                      "resourceId": {
                        "type": "string",
                        "metadata": {
                          "description": "Required. The resource ID of the target service. Can also contain a wildcard, if multiple services e.g. in a resource group should be included."
                        }
                      }
                    }
                  },
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Sets the resource access rules. Array entries must consist of \"tenantId\" and \"resourceId\" fields only."
                  }
                },
                "bypass": {
                  "type": "string",
                  "allowedValues": [
                    "AzureServices",
                    "AzureServices, Logging",
                    "AzureServices, Logging, Metrics",
                    "AzureServices, Metrics",
                    "Logging",
                    "Logging, Metrics",
                    "Metrics",
                    "None"
                  ],
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Specifies whether traffic is bypassed for Logging/Metrics/AzureServices. Possible values are any combination of Logging,Metrics,AzureServices (For example, \"Logging, Metrics\"), or None to bypass none of those traffics."
                  }
                },
                "virtualNetworkRules": {
                  "type": "array",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Sets the virtual network rules."
                  }
                },
                "ipRules": {
                  "type": "array",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Sets the IP ACL rules."
                  }
                },
                "defaultAction": {
                  "type": "string",
                  "allowedValues": [
                    "Allow",
                    "Deny"
                  ],
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Specifies the default action of allow or deny when no other rules match."
                  }
                }
              }
            },
            "privateEndpointType": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. The name of the private endpoint."
                    }
                  },
                  "location": {
                    "type": "string",
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. The location to deploy the private endpoint to."
                    }
                  },
                  "service": {
                    "type": "string",
                    "metadata": {
                      "description": "Required. The service (sub-) type to deploy the private endpoint for. For example \"vault\" or \"blob\"."
                    }
                  },
                  "subnetResourceId": {
                    "type": "string",
                    "metadata": {
                      "description": "Required. Resource ID of the subnet where the endpoint needs to be created."
                    }
                  },
                  "privateDnsZoneGroupName": {
                    "type": "string",
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. The name of the private DNS zone group to create if privateDnsZoneResourceIds were provided."
                    }
                  },
                  "privateDnsZoneResourceIds": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. The private DNS zone groups to associate the private endpoint with. A DNS zone group can support up to 5 DNS zones."
                    }
                  },
                  "isManualConnection": {
                    "type": "bool",
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. Manual PrivateLink Service Connections."
                    }
                  },
                  "manualConnectionRequestMessage": {
                    "type": "string",
                    "nullable": true,
                    "maxLength": 140,
                    "metadata": {
                      "description": "Optional. A message passed to the owner of the remote resource with the manual connection request."
                    }
                  },
                  "customDnsConfigs": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "fqdn": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Required. Fqdn that resolves to private endpoint ip address."
                          }
                        },
                        "ipAddresses": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          },
                          "metadata": {
                            "description": "Required. A list of private ip addresses of the private endpoint."
                          }
                        }
                      }
                    },
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. Custom DNS configurations."
                    }
                  },
                  "ipConfigurations": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "metadata": {
                            "description": "Required. The name of the resource that is unique within a resource group."
                          }
                        },
                        "properties": {
                          "type": "object",
                          "properties": {
                            "groupId": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The ID of a group obtained from the remote resource that this private endpoint should connect to."
                              }
                            },
                            "memberName": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The member name of a group obtained from the remote resource that this private endpoint should connect to."
                              }
                            },
                            "privateIPAddress": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. A private ip address obtained from the private endpoint's subnet."
                              }
                            }
                          },
                          "metadata": {
                            "description": "Required. Properties of private endpoint IP configurations."
                          }
                        }
                      }
                    },
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. A list of IP configurations of the private endpoint. This will be used to map to the First Party Service endpoints."
                    }
                  },
                  "applicationSecurityGroupResourceIds": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. Application security groups in which the private endpoint IP configuration is included."
                    }
                  },
                  "customNetworkInterfaceName": {
                    "type": "string",
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. The custom name of the network interface attached to the private endpoint."
                    }
                  },
                  "lock": {
                    "$ref": "#/definitions/lockType",
                    "metadata": {
                      "description": "Optional. Specify the type of lock."
                    }
                  },
                  "roleAssignments": {
                    "$ref": "#/definitions/roleAssignmentType",
                    "metadata": {
                      "description": "Optional. Array of role assignments to create."
                    }
                  },
                  "tags": {
                    "type": "object",
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. Tags to be applied on all resources/resource groups in this deployment."
                    }
                  },
                  "enableTelemetry": {
                    "type": "bool",
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. Enable/Disable usage telemetry for module."
                    }
                  }
                }
              },
              "nullable": true
            },
            "diagnosticSettingType": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. The name of diagnostic setting."
                    }
                  },
                  "metricCategories": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "category": {
                          "type": "string",
                          "metadata": {
                            "description": "Required. Name of a Diagnostic Metric category for a resource type this setting is applied to. Set to `AllMetrics` to collect all metrics."
                          }
                        },
                        "enabled": {
                          "type": "bool",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Enable or disable the category explicitly. Default is `true`."
                          }
                        }
                      }
                    },
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. The name of logs that will be streamed. \"allLogs\" includes all possible logs for the resource. Set to `[]` to disable log collection."
                    }
                  },
                  "logAnalyticsDestinationType": {
                    "type": "string",
                    "allowedValues": [
                      "AzureDiagnostics",
                      "Dedicated"
                    ],
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. A string indicating whether the export to Log Analytics should use the default destination type, i.e. AzureDiagnostics, or use a destination type."
                    }
                  },
                  "workspaceResourceId": {
                    "type": "string",
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. Resource ID of the diagnostic log analytics workspace. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                    }
                  },
                  "storageAccountResourceId": {
                    "type": "string",
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. Resource ID of the diagnostic storage account. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                    }
                  },
                  "eventHubAuthorizationRuleResourceId": {
                    "type": "string",
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. Resource ID of the diagnostic event hub authorization rule for the Event Hubs namespace in which the event hub should be created or streamed to."
                    }
                  },
                  "eventHubName": {
                    "type": "string",
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. Name of the diagnostic event hub within the namespace to which logs are streamed. Without this, an event hub is created for each log category. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                    }
                  },
                  "marketplacePartnerResourceId": {
                    "type": "string",
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. The full ARM resource ID of the Marketplace resource to which you would like to send Diagnostic Logs."
                    }
                  }
                }
              },
              "nullable": true
            },
            "customerManagedKeyType": {
              "type": "object",
              "properties": {
                "keyVaultResourceId": {
                  "type": "string",
                  "metadata": {
                    "description": "Required. The resource ID of a key vault to reference a customer managed key for encryption from."
                  }
                },
                "keyName": {
                  "type": "string",
                  "metadata": {
                    "description": "Required. The name of the customer managed key to use for encryption."
                  }
                },
                "keyVersion": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The version of the customer managed key to reference for encryption. If not provided, using 'latest'."
                  }
                },
                "userAssignedIdentityResourceId": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. User assigned identity to use when fetching the customer managed key. If used must also be specified in `managedIdentities.userAssignedResourceIds`. Required if no system assigned identity is available for use."
                  }
                }
              },
              "nullable": true
            }
          },
          "parameters": {
            "name": {
              "type": "string",
              "maxLength": 24,
              "metadata": {
                "description": "Required. Name of the Storage Account. Must be lower-case."
              }
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]",
              "metadata": {
                "description": "Optional. Location for all resources."
              }
            },
            "roleAssignments": {
              "$ref": "#/definitions/roleAssignmentType",
              "metadata": {
                "description": "Optional. Array of role assignments to create."
              }
            },
            "managedIdentities": {
              "$ref": "#/definitions/managedIdentitiesType",
              "metadata": {
                "description": "Optional. The managed identity definition for this resource."
              }
            },
            "kind": {
              "type": "string",
              "defaultValue": "StorageV2",
              "allowedValues": [
                "Storage",
                "StorageV2",
                "BlobStorage",
                "FileStorage",
                "BlockBlobStorage"
              ],
              "metadata": {
                "description": "Optional. Type of Storage Account to create."
              }
            },
            "skuName": {
              "type": "string",
              "defaultValue": "Standard_GRS",
              "allowedValues": [
                "Standard_LRS",
                "Standard_GRS",
                "Standard_RAGRS",
                "Standard_ZRS",
                "Premium_LRS",
                "Premium_ZRS",
                "Standard_GZRS",
                "Standard_RAGZRS"
              ],
              "metadata": {
                "description": "Optional. Storage Account Sku Name."
              }
            },
            "accessTier": {
              "type": "string",
              "defaultValue": "Hot",
              "allowedValues": [
                "Premium",
                "Hot",
                "Cool"
              ],
              "metadata": {
                "description": "Conditional. Required if the Storage Account kind is set to BlobStorage. The access tier is used for billing. The \"Premium\" access tier is the default value for premium block blobs storage account type and it cannot be changed for the premium block blobs storage account type."
              }
            },
            "largeFileSharesState": {
              "type": "string",
              "defaultValue": "Disabled",
              "allowedValues": [
                "Disabled",
                "Enabled"
              ],
              "metadata": {
                "description": "Optional. Allow large file shares if sets to 'Enabled'. It cannot be disabled once it is enabled. Only supported on locally redundant and zone redundant file shares. It cannot be set on FileStorage storage accounts (storage accounts for premium file shares)."
              }
            },
            "azureFilesIdentityBasedAuthentication": {
              "type": "object",
              "defaultValue": {},
              "metadata": {
                "description": "Optional. Provides the identity based authentication settings for Azure Files."
              }
            },
            "defaultToOAuthAuthentication": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Optional. A boolean flag which indicates whether the default authentication is OAuth or not."
              }
            },
            "allowSharedKeyAccess": {
              "type": "bool",
              "defaultValue": true,
              "metadata": {
                "description": "Optional. Indicates whether the storage account permits requests to be authorized with the account access key via Shared Key. If false, then all requests, including shared access signatures, must be authorized with Azure Active Directory (Azure AD). The default value is null, which is equivalent to true."
              }
            },
            "privateEndpoints": {
              "$ref": "#/definitions/privateEndpointType",
              "metadata": {
                "description": "Optional. Configuration details for private endpoints. For security reasons, it is recommended to use private endpoints whenever possible."
              }
            },
            "managementPolicyRules": {
              "type": "array",
              "nullable": true,
              "metadata": {
                "description": "Optional. The Storage Account ManagementPolicies Rules."
              }
            },
            "networkAcls": {
              "$ref": "#/definitions/networkAclsType",
              "nullable": true,
              "metadata": {
                "description": "Optional. Networks ACLs, this value contains IPs to whitelist and/or Subnet information. If in use, bypass needs to be supplied. For security reasons, it is recommended to set the DefaultAction Deny."
              }
            },
            "requireInfrastructureEncryption": {
              "type": "bool",
              "defaultValue": true,
              "metadata": {
                "description": "Optional. A Boolean indicating whether or not the service applies a secondary layer of encryption with platform managed keys for data at rest. For security reasons, it is recommended to set it to true."
              }
            },
            "allowCrossTenantReplication": {
              "type": "bool",
              "defaultValue": true,
              "metadata": {
                "description": "Optional. Allow or disallow cross AAD tenant object replication."
              }
            },
            "customDomainName": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. Sets the custom domain name assigned to the storage account. Name is the CNAME source."
              }
            },
            "customDomainUseSubDomainName": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Optional. Indicates whether indirect CName validation is enabled. This should only be set on updates."
              }
            },
            "dnsEndpointType": {
              "type": "string",
              "defaultValue": "",
              "allowedValues": [
                "",
                "AzureDnsZone",
                "Standard"
              ],
              "metadata": {
                "description": "Optional. Allows you to specify the type of endpoint. Set this to AzureDNSZone to create a large number of accounts in a single subscription, which creates accounts in an Azure DNS Zone and the endpoint URL will have an alphanumeric DNS Zone identifier."
              }
            },
            "blobServices": {
              "type": "object",
              "defaultValue": "[if(not(equals(parameters('kind'), 'FileStorage')), createObject('containerDeleteRetentionPolicyEnabled', true(), 'containerDeleteRetentionPolicyDays', 7, 'deleteRetentionPolicyEnabled', true(), 'deleteRetentionPolicyDays', 6), createObject())]",
              "metadata": {
                "description": "Optional. Blob service and containers to deploy."
              }
            },
            "fileServices": {
              "type": "object",
              "defaultValue": {},
              "metadata": {
                "description": "Optional. File service and shares to deploy."
              }
            },
            "queueServices": {
              "type": "object",
              "defaultValue": {},
              "metadata": {
                "description": "Optional. Queue service and queues to create."
              }
            },
            "tableServices": {
              "type": "object",
              "defaultValue": {},
              "metadata": {
                "description": "Optional. Table service and tables to create."
              }
            },
            "allowBlobPublicAccess": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Optional. Indicates whether public access is enabled for all blobs or containers in the storage account. For security reasons, it is recommended to set it to false."
              }
            },
            "minimumTlsVersion": {
              "type": "string",
              "defaultValue": "TLS1_2",
              "allowedValues": [
                "TLS1_0",
                "TLS1_1",
                "TLS1_2"
              ],
              "metadata": {
                "description": "Optional. Set the minimum TLS version on request to storage."
              }
            },
            "enableHierarchicalNamespace": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Conditional. If true, enables Hierarchical Namespace for the storage account. Required if enableSftp or enableNfsV3 is set to true."
              }
            },
            "enableSftp": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Optional. If true, enables Secure File Transfer Protocol for the storage account. Requires enableHierarchicalNamespace to be true."
              }
            },
            "localUsers": {
              "type": "array",
              "defaultValue": [],
              "metadata": {
                "description": "Optional. Local users to deploy for SFTP authentication."
              }
            },
            "isLocalUserEnabled": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Optional. Enables local users feature, if set to true."
              }
            },
            "enableNfsV3": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Optional. If true, enables NFS 3.0 support for the storage account. Requires enableHierarchicalNamespace to be true."
              }
            },
            "diagnosticSettings": {
              "$ref": "#/definitions/diagnosticSettingType",
              "metadata": {
                "description": "Optional. The diagnostic settings of the service."
              }
            },
            "lock": {
              "$ref": "#/definitions/lockType",
              "metadata": {
                "description": "Optional. The lock settings of the service."
              }
            },
            "tags": {
              "type": "object",
              "nullable": true,
              "metadata": {
                "description": "Optional. Tags of the resource."
              }
            },
            "enableTelemetry": {
              "type": "bool",
              "defaultValue": true,
              "metadata": {
                "description": "Optional. Enable/Disable usage telemetry for module."
              }
            },
            "allowedCopyScope": {
              "type": "string",
              "defaultValue": "",
              "allowedValues": [
                "",
                "AAD",
                "PrivateLink"
              ],
              "metadata": {
                "description": "Optional. Restrict copy to and from Storage Accounts within an AAD tenant or with Private Links to the same VNet."
              }
            },
            "publicNetworkAccess": {
              "type": "string",
              "defaultValue": "",
              "allowedValues": [
                "",
                "Enabled",
                "Disabled"
              ],
              "metadata": {
                "description": "Optional. Whether or not public network access is allowed for this resource. For security reasons it should be disabled. If not specified, it will be disabled by default if private endpoints are set and networkAcls are not set."
              }
            },
            "supportsHttpsTrafficOnly": {
              "type": "bool",
              "defaultValue": true,
              "metadata": {
                "description": "Optional. Allows HTTPS traffic only to storage service if sets to true."
              }
            },
            "customerManagedKey": {
              "$ref": "#/definitions/customerManagedKeyType",
              "metadata": {
                "description": "Optional. The customer managed key definition."
              }
            },
            "sasExpirationPeriod": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. The SAS expiration period. DD.HH:MM:SS."
              }
            },
            "keyType": {
              "type": "string",
              "nullable": true,
              "allowedValues": [
                "Account",
                "Service"
              ],
              "metadata": {
                "description": "Optional. The keyType to use with Queue & Table services."
              }
            }
          },
          "variables": {
            "supportsBlobService": "[or(or(or(equals(parameters('kind'), 'BlockBlobStorage'), equals(parameters('kind'), 'BlobStorage')), equals(parameters('kind'), 'StorageV2')), equals(parameters('kind'), 'Storage'))]",
            "supportsFileService": "[or(or(equals(parameters('kind'), 'FileStorage'), equals(parameters('kind'), 'StorageV2')), equals(parameters('kind'), 'Storage'))]",
            "formattedUserAssignedIdentities": "[reduce(map(coalesce(tryGet(parameters('managedIdentities'), 'userAssignedResourceIds'), createArray()), lambda('id', createObject(format('{0}', lambdaVariables('id')), createObject()))), createObject(), lambda('cur', 'next', union(lambdaVariables('cur'), lambdaVariables('next'))))]",
            "identity": "[if(not(empty(parameters('managedIdentities'))), createObject('type', if(coalesce(tryGet(parameters('managedIdentities'), 'systemAssigned'), false()), if(not(empty(coalesce(tryGet(parameters('managedIdentities'), 'userAssignedResourceIds'), createObject()))), 'SystemAssigned,UserAssigned', 'SystemAssigned'), if(not(empty(coalesce(tryGet(parameters('managedIdentities'), 'userAssignedResourceIds'), createObject()))), 'UserAssigned', 'None')), 'userAssignedIdentities', if(not(empty(variables('formattedUserAssignedIdentities'))), variables('formattedUserAssignedIdentities'), null())), null())]",
            "builtInRoleNames": {
              "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
              "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
              "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
              "Reader and Data Access": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'c12c1c16-33a1-487b-954d-41c89c60f349')]",
              "Role Based Access Control Administrator (Preview)": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]",
              "Storage Account Backup Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'e5e2a7ff-d759-4cd2-bb51-3152d37e2eb1')]",
              "Storage Account Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '17d1049b-9a84-46fb-8f53-869881c3d3ab')]",
              "Storage Account Key Operator Service Role": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '81a9662b-bebf-436f-a333-f67b29880f12')]",
              "Storage Blob Data Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'ba92f5b4-2d11-453d-a403-e96b0029c9fe')]",
              "Storage Blob Data Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b7e6dc6d-f1e8-4753-8033-0f276bb0955b')]",
              "Storage Blob Data Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '2a2b9908-6ea1-4ae2-8e65-a410df84e7d1')]",
              "Storage Blob Delegator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'db58b8e5-c6ad-4a2a-8342-4190687cbf4a')]",
              "Storage File Data SMB Share Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '0c867c2a-1d8c-454a-a3db-ab2ea1bdc8bb')]",
              "Storage File Data SMB Share Elevated Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'a7264617-510b-434b-a828-9731dc254ea7')]",
              "Storage File Data SMB Share Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'aba4ae5f-2193-4029-9191-0cb91df5e314')]",
              "Storage Queue Data Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '974c5e8b-45b9-4653-ba55-5f855dd0fb88')]",
              "Storage Queue Data Message Processor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8a0f0c08-91a1-4084-bc3d-661d67233fed')]",
              "Storage Queue Data Message Sender": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'c6a89b2d-59bc-44d0-9896-0f6e12d7b80a')]",
              "Storage Queue Data Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '19e7f393-937e-4f77-808e-94535e297925')]",
              "Storage Table Data Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '0a9a7e1f-b9d0-4cc4-a60d-0319b160aaa3')]",
              "Storage Table Data Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '76199698-9eea-4c19-bc75-cec21354c6b6')]",
              "User Access Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18d7d88d-d35e-4fb5-a5c3-7773c20a72d9')]"
            }
          },
          "resources": {
            "cMKKeyVault::cMKKey": {
              "condition": "[and(not(empty(tryGet(parameters('customerManagedKey'), 'keyVaultResourceId'))), and(not(empty(tryGet(parameters('customerManagedKey'), 'keyVaultResourceId'))), not(empty(tryGet(parameters('customerManagedKey'), 'keyName')))))]",
              "existing": true,
              "type": "Microsoft.KeyVault/vaults/keys",
              "apiVersion": "2023-02-01",
              "subscriptionId": "[split(coalesce(tryGet(parameters('customerManagedKey'), 'keyVaultResourceId'), '//'), '/')[2]]",
              "resourceGroup": "[split(coalesce(tryGet(parameters('customerManagedKey'), 'keyVaultResourceId'), '////'), '/')[4]]",
              "name": "[format('{0}/{1}', last(split(coalesce(tryGet(parameters('customerManagedKey'), 'keyVaultResourceId'), 'dummyVault'), '/')), coalesce(tryGet(parameters('customerManagedKey'), 'keyName'), 'dummyKey'))]",
              "dependsOn": [
                "cMKKeyVault"
              ]
            },
            "avmTelemetry": {
              "condition": "[parameters('enableTelemetry')]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2023-07-01",
              "name": "[format('46d3xbcp.res.storage-storageaccount.{0}.{1}', replace('0.9.1', '.', '-'), substring(uniqueString(deployment().name, parameters('location')), 0, 4))]",
              "properties": {
                "mode": "Incremental",
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "resources": [],
                  "outputs": {
                    "telemetry": {
                      "type": "String",
                      "value": "For more information, see https://aka.ms/avm/TelemetryInfo"
                    }
                  }
                }
              }
            },
            "cMKKeyVault": {
              "condition": "[not(empty(tryGet(parameters('customerManagedKey'), 'keyVaultResourceId')))]",
              "existing": true,
              "type": "Microsoft.KeyVault/vaults",
              "apiVersion": "2023-02-01",
              "subscriptionId": "[split(coalesce(tryGet(parameters('customerManagedKey'), 'keyVaultResourceId'), '//'), '/')[2]]",
              "resourceGroup": "[split(coalesce(tryGet(parameters('customerManagedKey'), 'keyVaultResourceId'), '////'), '/')[4]]",
              "name": "[last(split(coalesce(tryGet(parameters('customerManagedKey'), 'keyVaultResourceId'), 'dummyVault'), '/'))]"
            },
            "cMKUserAssignedIdentity": {
              "condition": "[not(empty(tryGet(parameters('customerManagedKey'), 'userAssignedIdentityResourceId')))]",
              "existing": true,
              "type": "Microsoft.ManagedIdentity/userAssignedIdentities",
              "apiVersion": "2023-01-31",
              "subscriptionId": "[split(coalesce(tryGet(parameters('customerManagedKey'), 'userAssignedIdentityResourceId'), '//'), '/')[2]]",
              "resourceGroup": "[split(coalesce(tryGet(parameters('customerManagedKey'), 'userAssignedIdentityResourceId'), '////'), '/')[4]]",
              "name": "[last(split(coalesce(tryGet(parameters('customerManagedKey'), 'userAssignedIdentityResourceId'), 'dummyMsi'), '/'))]"
            },
            "storageAccount": {
              "type": "Microsoft.Storage/storageAccounts",
              "apiVersion": "2022-09-01",
              "name": "[parameters('name')]",
              "location": "[parameters('location')]",
              "kind": "[parameters('kind')]",
              "sku": {
                "name": "[parameters('skuName')]"
              },
              "identity": "[variables('identity')]",
              "tags": "[parameters('tags')]",
              "properties": {
                "allowSharedKeyAccess": "[parameters('allowSharedKeyAccess')]",
                "defaultToOAuthAuthentication": "[parameters('defaultToOAuthAuthentication')]",
                "allowCrossTenantReplication": "[parameters('allowCrossTenantReplication')]",
                "allowedCopyScope": "[if(not(empty(parameters('allowedCopyScope'))), parameters('allowedCopyScope'), null())]",
                "customDomain": {
                  "name": "[parameters('customDomainName')]",
                  "useSubDomainName": "[parameters('customDomainUseSubDomainName')]"
                },
                "dnsEndpointType": "[if(not(empty(parameters('dnsEndpointType'))), parameters('dnsEndpointType'), null())]",
                "isLocalUserEnabled": "[parameters('isLocalUserEnabled')]",
                "encryption": "[union(createObject('keySource', if(not(empty(parameters('customerManagedKey'))), 'Microsoft.Keyvault', 'Microsoft.Storage'), 'services', createObject('blob', if(variables('supportsBlobService'), createObject('enabled', true()), null()), 'file', if(variables('supportsFileService'), createObject('enabled', true()), null()), 'table', createObject('enabled', true(), 'keyType', parameters('keyType')), 'queue', createObject('enabled', true(), 'keyType', parameters('keyType'))), 'keyvaultproperties', if(not(empty(parameters('customerManagedKey'))), createObject('keyname', parameters('customerManagedKey').keyName, 'keyvaulturi', reference('cMKKeyVault').vaultUri, 'keyversion', if(not(empty(coalesce(tryGet(parameters('customerManagedKey'), 'keyVersion'), ''))), parameters('customerManagedKey').keyVersion, last(split(reference('cMKKeyVault::cMKKey').keyUriWithVersion, '/')))), null()), 'identity', createObject('userAssignedIdentity', if(not(empty(tryGet(parameters('customerManagedKey'), 'userAssignedIdentityResourceId'))), extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(coalesce(tryGet(parameters('customerManagedKey'), 'userAssignedIdentityResourceId'), '//'), '/')[2], split(coalesce(tryGet(parameters('customerManagedKey'), 'userAssignedIdentityResourceId'), '////'), '/')[4]), 'Microsoft.ManagedIdentity/userAssignedIdentities', last(split(coalesce(tryGet(parameters('customerManagedKey'), 'userAssignedIdentityResourceId'), 'dummyMsi'), '/'))), null()))), if(parameters('requireInfrastructureEncryption'), createObject('requireInfrastructureEncryption', if(not(equals(parameters('kind'), 'Storage')), parameters('requireInfrastructureEncryption'), null())), createObject()))]",
                "accessTier": "[if(and(not(equals(parameters('kind'), 'Storage')), not(equals(parameters('kind'), 'BlockBlobStorage'))), parameters('accessTier'), null())]",
                "sasPolicy": "[if(not(empty(parameters('sasExpirationPeriod'))), createObject('expirationAction', 'Log', 'sasExpirationPeriod', parameters('sasExpirationPeriod')), null())]",
                "supportsHttpsTrafficOnly": "[parameters('supportsHttpsTrafficOnly')]",
                "isHnsEnabled": "[if(parameters('enableHierarchicalNamespace'), parameters('enableHierarchicalNamespace'), null())]",
                "isSftpEnabled": "[parameters('enableSftp')]",
                "isNfsV3Enabled": "[if(parameters('enableNfsV3'), parameters('enableNfsV3'), '')]",
                "largeFileSharesState": "[if(or(equals(parameters('skuName'), 'Standard_LRS'), equals(parameters('skuName'), 'Standard_ZRS')), parameters('largeFileSharesState'), null())]",
                "minimumTlsVersion": "[parameters('minimumTlsVersion')]",
                "networkAcls": "[if(not(empty(parameters('networkAcls'))), union(createObject('resourceAccessRules', tryGet(parameters('networkAcls'), 'resourceAccessRules'), 'defaultAction', coalesce(tryGet(parameters('networkAcls'), 'defaultAction'), 'Deny'), 'virtualNetworkRules', tryGet(parameters('networkAcls'), 'virtualNetworkRules'), 'ipRules', tryGet(parameters('networkAcls'), 'ipRules')), if(contains(parameters('networkAcls'), 'bypass'), createObject('bypass', tryGet(parameters('networkAcls'), 'bypass')), createObject())), createObject('bypass', 'AzureServices', 'defaultAction', 'Deny'))]",
                "allowBlobPublicAccess": "[parameters('allowBlobPublicAccess')]",
                "publicNetworkAccess": "[if(not(empty(parameters('publicNetworkAccess'))), parameters('publicNetworkAccess'), if(and(not(empty(parameters('privateEndpoints'))), empty(parameters('networkAcls'))), 'Disabled', null()))]",
                "azureFilesIdentityBasedAuthentication": "[if(not(empty(parameters('azureFilesIdentityBasedAuthentication'))), parameters('azureFilesIdentityBasedAuthentication'), null())]"
              },
              "dependsOn": [
                "cMKKeyVault",
                "cMKUserAssignedIdentity"
              ]
            },
            "storageAccount_diagnosticSettings": {
              "copy": {
                "name": "storageAccount_diagnosticSettings",
                "count": "[length(coalesce(parameters('diagnosticSettings'), createArray()))]"
              },
              "type": "Microsoft.Insights/diagnosticSettings",
              "apiVersion": "2021-05-01-preview",
              "scope": "[format('Microsoft.Storage/storageAccounts/{0}', parameters('name'))]",
              "name": "[coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'name'), format('{0}-diagnosticSettings', parameters('name')))]",
              "properties": {
                "copy": [
                  {
                    "name": "metrics",
                    "count": "[length(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'metricCategories'), createArray(createObject('category', 'AllMetrics'))))]",
                    "input": {
                      "category": "[coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'metricCategories'), createArray(createObject('category', 'AllMetrics')))[copyIndex('metrics')].category]",
                      "enabled": "[coalesce(tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'metricCategories'), createArray(createObject('category', 'AllMetrics')))[copyIndex('metrics')], 'enabled'), true())]",
                      "timeGrain": null
                    }
                  }
                ],
                "storageAccountId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'storageAccountResourceId')]",
                "workspaceId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'workspaceResourceId')]",
                "eventHubAuthorizationRuleId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'eventHubAuthorizationRuleResourceId')]",
                "eventHubName": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'eventHubName')]",
                "marketplacePartnerId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'marketplacePartnerResourceId')]",
                "logAnalyticsDestinationType": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logAnalyticsDestinationType')]"
              },
              "dependsOn": [
                "storageAccount"
              ]
            },
            "storageAccount_lock": {
              "condition": "[and(not(empty(coalesce(parameters('lock'), createObject()))), not(equals(tryGet(parameters('lock'), 'kind'), 'None')))]",
              "type": "Microsoft.Authorization/locks",
              "apiVersion": "2020-05-01",
              "scope": "[format('Microsoft.Storage/storageAccounts/{0}', parameters('name'))]",
              "name": "[coalesce(tryGet(parameters('lock'), 'name'), format('lock-{0}', parameters('name')))]",
              "properties": {
                "level": "[coalesce(tryGet(parameters('lock'), 'kind'), '')]",
                "notes": "[if(equals(tryGet(parameters('lock'), 'kind'), 'CanNotDelete'), 'Cannot delete resource or child resources.', 'Cannot delete or modify the resource or child resources.')]"
              },
              "dependsOn": [
                "storageAccount"
              ]
            },
            "storageAccount_roleAssignments": {
              "copy": {
                "name": "storageAccount_roleAssignments",
                "count": "[length(coalesce(parameters('roleAssignments'), createArray()))]"
              },
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.Storage/storageAccounts/{0}', parameters('name'))]",
              "name": "[guid(resourceId('Microsoft.Storage/storageAccounts', parameters('name')), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].principalId, coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName)]",
              "properties": {
                "roleDefinitionId": "[if(contains(variables('builtInRoleNames'), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName), variables('builtInRoleNames')[coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName], if(contains(coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName, '/providers/Microsoft.Authorization/roleDefinitions/'), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName, subscriptionResourceId('Microsoft.Authorization/roleDefinitions', coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName)))]",
                "principalId": "[coalesce(parameters('roleAssignments'), createArray())[copyIndex()].principalId]",
                "description": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'description')]",
                "principalType": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'principalType')]",
                "condition": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'condition')]",
                "conditionVersion": "[if(not(empty(tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'condition'))), coalesce(tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'conditionVersion'), '2.0'), null())]",
                "delegatedManagedIdentityResourceId": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'delegatedManagedIdentityResourceId')]"
              },
              "dependsOn": [
                "storageAccount"
              ]
            },
            "storageAccount_privateEndpoints": {
              "copy": {
                "name": "storageAccount_privateEndpoints",
                "count": "[length(coalesce(parameters('privateEndpoints'), createArray()))]"
              },
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('{0}-StorageAccount-PrivateEndpoint-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "name": {
                    "value": "[coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'name'), format('pep-{0}-{1}-{2}', last(split(resourceId('Microsoft.Storage/storageAccounts', parameters('name')), '/')), coalesce(parameters('privateEndpoints'), createArray())[copyIndex()].service, copyIndex()))]"
                  },
                  "privateLinkServiceConnections": "[if(not(equals(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'manualPrivateLinkServiceConnections'), true())), createObject('value', createArray(createObject('name', coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'privateLinkServiceConnectionName'), format('{0}-{1}-{2}', last(split(resourceId('Microsoft.Storage/storageAccounts', parameters('name')), '/')), coalesce(parameters('privateEndpoints'), createArray())[copyIndex()].service, copyIndex())), 'properties', createObject('privateLinkServiceId', resourceId('Microsoft.Storage/storageAccounts', parameters('name')), 'groupIds', createArray(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()].service))))), createObject('value', null()))]",
                  "manualPrivateLinkServiceConnections": "[if(equals(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'manualPrivateLinkServiceConnections'), true()), createObject('value', createArray(createObject('name', coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'privateLinkServiceConnectionName'), format('{0}-{1}-{2}', last(split(resourceId('Microsoft.Storage/storageAccounts', parameters('name')), '/')), coalesce(parameters('privateEndpoints'), createArray())[copyIndex()].service, copyIndex())), 'properties', createObject('privateLinkServiceId', resourceId('Microsoft.Storage/storageAccounts', parameters('name')), 'groupIds', createArray(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()].service), 'requestMessage', coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'manualConnectionRequestMessage'), 'Manual approval required.'))))), createObject('value', null()))]",
                  "subnetResourceId": {
                    "value": "[coalesce(parameters('privateEndpoints'), createArray())[copyIndex()].subnetResourceId]"
                  },
                  "enableTelemetry": {
                    "value": "[coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'enableTelemetry'), parameters('enableTelemetry'))]"
                  },
                  "location": {
                    "value": "[coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'location'), reference(split(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()].subnetResourceId, '/subnets/')[0], '2020-06-01', 'Full').location)]"
                  },
                  "lock": {
                    "value": "[coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'lock'), parameters('lock'))]"
                  },
                  "privateDnsZoneGroupName": {
                    "value": "[tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'privateDnsZoneGroupName')]"
                  },
                  "privateDnsZoneResourceIds": {
                    "value": "[tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'privateDnsZoneResourceIds')]"
                  },
                  "roleAssignments": {
                    "value": "[tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'roleAssignments')]"
                  },
                  "tags": {
                    "value": "[coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'tags'), parameters('tags'))]"
                  },
                  "customDnsConfigs": {
                    "value": "[tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'customDnsConfigs')]"
                  },
                  "ipConfigurations": {
                    "value": "[tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'ipConfigurations')]"
                  },
                  "applicationSecurityGroupResourceIds": {
                    "value": "[tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'applicationSecurityGroupResourceIds')]"
                  },
                  "customNetworkInterfaceName": {
                    "value": "[tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'customNetworkInterfaceName')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "languageVersion": "2.0",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.25.53.49325",
                      "templateHash": "4120048060064073955"
                    },
                    "name": "Private Endpoints",
                    "description": "This module deploys a Private Endpoint.",
                    "owner": "Azure/module-maintainers"
                  },
                  "definitions": {
                    "roleAssignmentType": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "roleDefinitionIdOrName": {
                            "type": "string",
                            "metadata": {
                              "description": "Required. The role to assign. You can provide either the display name of the role definition, the role definition GUID, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                            }
                          },
                          "principalId": {
                            "type": "string",
                            "metadata": {
                              "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
                            }
                          },
                          "principalType": {
                            "type": "string",
                            "allowedValues": [
                              "Device",
                              "ForeignGroup",
                              "Group",
                              "ServicePrincipal",
                              "User"
                            ],
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. The principal type of the assigned principal ID."
                            }
                          },
                          "description": {
                            "type": "string",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. The description of the role assignment."
                            }
                          },
                          "condition": {
                            "type": "string",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\"."
                            }
                          },
                          "conditionVersion": {
                            "type": "string",
                            "allowedValues": [
                              "2.0"
                            ],
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. Version of the condition."
                            }
                          },
                          "delegatedManagedIdentityResourceId": {
                            "type": "string",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. The Resource Id of the delegated managed identity resource."
                            }
                          }
                        }
                      },
                      "nullable": true
                    },
                    "lockType": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Specify the name of lock."
                          }
                        },
                        "kind": {
                          "type": "string",
                          "allowedValues": [
                            "CanNotDelete",
                            "None",
                            "ReadOnly"
                          ],
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Specify the type of lock."
                          }
                        }
                      },
                      "nullable": true
                    },
                    "ipConfigurationsType": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "name": {
                            "type": "string",
                            "metadata": {
                              "description": "Required. The name of the resource that is unique within a resource group."
                            }
                          },
                          "properties": {
                            "type": "object",
                            "properties": {
                              "groupId": {
                                "type": "string",
                                "metadata": {
                                  "description": "Required. The ID of a group obtained from the remote resource that this private endpoint should connect to."
                                }
                              },
                              "memberName": {
                                "type": "string",
                                "metadata": {
                                  "description": "Required. The member name of a group obtained from the remote resource that this private endpoint should connect to."
                                }
                              },
                              "privateIPAddress": {
                                "type": "string",
                                "metadata": {
                                  "description": "Required. A private IP address obtained from the private endpoint's subnet."
                                }
                              }
                            },
                            "metadata": {
                              "description": "Required. Properties of private endpoint IP configurations."
                            }
                          }
                        }
                      },
                      "nullable": true
                    },
                    "manualPrivateLinkServiceConnectionsType": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "name": {
                            "type": "string",
                            "metadata": {
                              "description": "Required. The name of the private link service connection."
                            }
                          },
                          "properties": {
                            "type": "object",
                            "properties": {
                              "groupIds": {
                                "type": "array",
                                "metadata": {
                                  "description": "Required. The ID of a group obtained from the remote resource that this private endpoint should connect to."
                                }
                              },
                              "privateLinkServiceId": {
                                "type": "string",
                                "metadata": {
                                  "description": "Required. The resource id of private link service."
                                }
                              },
                              "requestMessage": {
                                "type": "string",
                                "metadata": {
                                  "description": "Optional. A message passed to the owner of the remote resource with this connection request. Restricted to 140 chars."
                                }
                              }
                            },
                            "metadata": {
                              "description": "Required. Properties of private link service connection."
                            }
                          }
                        }
                      },
                      "nullable": true
                    },
                    "privateLinkServiceConnectionsType": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "name": {
                            "type": "string",
                            "metadata": {
                              "description": "Required. The name of the private link service connection."
                            }
                          },
                          "properties": {
                            "type": "object",
                            "properties": {
                              "groupIds": {
                                "type": "array",
                                "metadata": {
                                  "description": "Required. The ID of a group obtained from the remote resource that this private endpoint should connect to."
                                }
                              },
                              "privateLinkServiceId": {
                                "type": "string",
                                "metadata": {
                                  "description": "Required. The resource id of private link service."
                                }
                              },
                              "requestMessage": {
                                "type": "string",
                                "nullable": true,
                                "metadata": {
                                  "description": "Optional. A message passed to the owner of the remote resource with this connection request. Restricted to 140 chars."
                                }
                              }
                            },
                            "metadata": {
                              "description": "Required. Properties of private link service connection."
                            }
                          }
                        }
                      },
                      "nullable": true
                    },
                    "customDnsConfigType": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "fqdn": {
                            "type": "string",
                            "metadata": {
                              "description": "Required. Fqdn that resolves to private endpoint IP address."
                            }
                          },
                          "ipAddresses": {
                            "type": "array",
                            "items": {
                              "type": "string"
                            },
                            "metadata": {
                              "description": "Required. A list of private IP addresses of the private endpoint."
                            }
                          }
                        }
                      },
                      "nullable": true
                    }
                  },
                  "parameters": {
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. Name of the private endpoint resource to create."
                      }
                    },
                    "subnetResourceId": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. Resource ID of the subnet where the endpoint needs to be created."
                      }
                    },
                    "applicationSecurityGroupResourceIds": {
                      "type": "array",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Application security groups in which the private endpoint IP configuration is included."
                      }
                    },
                    "customNetworkInterfaceName": {
                      "type": "string",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The custom name of the network interface attached to the private endpoint."
                      }
                    },
                    "ipConfigurations": {
                      "$ref": "#/definitions/ipConfigurationsType",
                      "metadata": {
                        "description": "Optional. A list of IP configurations of the private endpoint. This will be used to map to the First Party Service endpoints."
                      }
                    },
                    "privateDnsZoneGroupName": {
                      "type": "string",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The name of the private DNS zone group to create if `privateDnsZoneResourceIds` were provided."
                      }
                    },
                    "privateDnsZoneResourceIds": {
                      "type": "array",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The private DNS zone groups to associate the private endpoint. A DNS zone group can support up to 5 DNS zones."
                      }
                    },
                    "location": {
                      "type": "string",
                      "defaultValue": "[resourceGroup().location]",
                      "metadata": {
                        "description": "Optional. Location for all Resources."
                      }
                    },
                    "lock": {
                      "$ref": "#/definitions/lockType",
                      "metadata": {
                        "description": "Optional. The lock settings of the service."
                      }
                    },
                    "roleAssignments": {
                      "$ref": "#/definitions/roleAssignmentType",
                      "metadata": {
                        "description": "Optional. Array of role assignments to create."
                      }
                    },
                    "tags": {
                      "type": "object",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Tags to be applied on all resources/resource groups in this deployment."
                      }
                    },
                    "customDnsConfigs": {
                      "$ref": "#/definitions/customDnsConfigType",
                      "metadata": {
                        "description": "Optional. Custom DNS configurations."
                      }
                    },
                    "manualPrivateLinkServiceConnections": {
                      "$ref": "#/definitions/manualPrivateLinkServiceConnectionsType",
                      "metadata": {
                        "description": "Optional. A grouping of information about the connection to the remote resource. Used when the network admin does not have access to approve connections to the remote resource."
                      }
                    },
                    "privateLinkServiceConnections": {
                      "$ref": "#/definitions/privateLinkServiceConnectionsType",
                      "metadata": {
                        "description": "Optional. A grouping of information about the connection to the remote resource."
                      }
                    },
                    "enableTelemetry": {
                      "type": "bool",
                      "defaultValue": true,
                      "metadata": {
                        "description": "Optional. Enable/Disable usage telemetry for module."
                      }
                    }
                  },
                  "variables": {
                    "builtInRoleNames": {
                      "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                      "DNS Resolver Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '0f2ebee7-ffd4-4fc0-b3b7-664099fdad5d')]",
                      "DNS Zone Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'befefa01-2a29-4197-83a8-272ff33ce314')]",
                      "Domain Services Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'eeaeda52-9324-47f6-8069-5d5bade478b2')]",
                      "Domain Services Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '361898ef-9ed1-48c2-849c-a832951106bb')]",
                      "Network Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '4d97b98b-1d4f-4787-a291-c67834d212e7')]",
                      "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
                      "Private DNS Zone Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b12aa53e-6015-4669-85d0-8515ebb3ae7f')]",
                      "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
                      "Role Based Access Control Administrator (Preview)": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]"
                    }
                  },
                  "resources": {
                    "avmTelemetry": {
                      "condition": "[parameters('enableTelemetry')]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2023-07-01",
                      "name": "[format('46d3xbcp.res.network-privateendpoint.{0}.{1}', replace('0.4.1', '.', '-'), substring(uniqueString(deployment().name, parameters('location')), 0, 4))]",
                      "properties": {
                        "mode": "Incremental",
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "resources": [],
                          "outputs": {
                            "telemetry": {
                              "type": "String",
                              "value": "For more information, see https://aka.ms/avm/TelemetryInfo"
                            }
                          }
                        }
                      }
                    },
                    "privateEndpoint": {
                      "type": "Microsoft.Network/privateEndpoints",
                      "apiVersion": "2023-04-01",
                      "name": "[parameters('name')]",
                      "location": "[parameters('location')]",
                      "tags": "[parameters('tags')]",
                      "properties": {
                        "copy": [
                          {
                            "name": "applicationSecurityGroups",
                            "count": "[length(coalesce(parameters('applicationSecurityGroupResourceIds'), createArray()))]",
                            "input": {
                              "id": "[coalesce(parameters('applicationSecurityGroupResourceIds'), createArray())[copyIndex('applicationSecurityGroups')]]"
                            }
                          }
                        ],
                        "customDnsConfigs": "[coalesce(parameters('customDnsConfigs'), createArray())]",
                        "customNetworkInterfaceName": "[coalesce(parameters('customNetworkInterfaceName'), '')]",
                        "ipConfigurations": "[coalesce(parameters('ipConfigurations'), createArray())]",
                        "manualPrivateLinkServiceConnections": "[coalesce(parameters('manualPrivateLinkServiceConnections'), createArray())]",
                        "privateLinkServiceConnections": "[coalesce(parameters('privateLinkServiceConnections'), createArray())]",
                        "subnet": {
                          "id": "[parameters('subnetResourceId')]"
                        }
                      }
                    },
                    "privateEndpoint_lock": {
                      "condition": "[and(not(empty(coalesce(parameters('lock'), createObject()))), not(equals(tryGet(parameters('lock'), 'kind'), 'None')))]",
                      "type": "Microsoft.Authorization/locks",
                      "apiVersion": "2020-05-01",
                      "scope": "[format('Microsoft.Network/privateEndpoints/{0}', parameters('name'))]",
                      "name": "[coalesce(tryGet(parameters('lock'), 'name'), format('lock-{0}', parameters('name')))]",
                      "properties": {
                        "level": "[coalesce(tryGet(parameters('lock'), 'kind'), '')]",
                        "notes": "[if(equals(tryGet(parameters('lock'), 'kind'), 'CanNotDelete'), 'Cannot delete resource or child resources.', 'Cannot delete or modify the resource or child resources.')]"
                      },
                      "dependsOn": [
                        "privateEndpoint"
                      ]
                    },
                    "privateEndpoint_roleAssignments": {
                      "copy": {
                        "name": "privateEndpoint_roleAssignments",
                        "count": "[length(coalesce(parameters('roleAssignments'), createArray()))]"
                      },
                      "type": "Microsoft.Authorization/roleAssignments",
                      "apiVersion": "2022-04-01",
                      "scope": "[format('Microsoft.Network/privateEndpoints/{0}', parameters('name'))]",
                      "name": "[guid(resourceId('Microsoft.Network/privateEndpoints', parameters('name')), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].principalId, coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName)]",
                      "properties": {
                        "roleDefinitionId": "[if(contains(variables('builtInRoleNames'), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName), variables('builtInRoleNames')[coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName], if(contains(coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName, '/providers/Microsoft.Authorization/roleDefinitions/'), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName, subscriptionResourceId('Microsoft.Authorization/roleDefinitions', coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName)))]",
                        "principalId": "[coalesce(parameters('roleAssignments'), createArray())[copyIndex()].principalId]",
                        "description": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'description')]",
                        "principalType": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'principalType')]",
                        "condition": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'condition')]",
                        "conditionVersion": "[if(not(empty(tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'condition'))), coalesce(tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'conditionVersion'), '2.0'), null())]",
                        "delegatedManagedIdentityResourceId": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'delegatedManagedIdentityResourceId')]"
                      },
                      "dependsOn": [
                        "privateEndpoint"
                      ]
                    },
                    "privateEndpoint_privateDnsZoneGroup": {
                      "condition": "[not(empty(parameters('privateDnsZoneResourceIds')))]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('{0}-PrivateEndpoint-PrivateDnsZoneGroup', uniqueString(deployment().name))]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "name": {
                            "value": "[coalesce(parameters('privateDnsZoneGroupName'), 'default')]"
                          },
                          "privateDNSResourceIds": {
                            "value": "[coalesce(parameters('privateDnsZoneResourceIds'), createArray())]"
                          },
                          "privateEndpointName": {
                            "value": "[parameters('name')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.25.53.49325",
                              "templateHash": "11244630631275470040"
                            },
                            "name": "Private Endpoint Private DNS Zone Groups",
                            "description": "This module deploys a Private Endpoint Private DNS Zone Group.",
                            "owner": "Azure/module-maintainers"
                          },
                          "parameters": {
                            "privateEndpointName": {
                              "type": "string",
                              "metadata": {
                                "description": "Conditional. The name of the parent private endpoint. Required if the template is used in a standalone deployment."
                              }
                            },
                            "privateDNSResourceIds": {
                              "type": "array",
                              "minLength": 1,
                              "maxLength": 5,
                              "metadata": {
                                "description": "Required. Array of private DNS zone resource IDs. A DNS zone group can support up to 5 DNS zones."
                              }
                            },
                            "name": {
                              "type": "string",
                              "defaultValue": "default",
                              "metadata": {
                                "description": "Optional. The name of the private DNS zone group."
                              }
                            }
                          },
                          "variables": {
                            "copy": [
                              {
                                "name": "privateDnsZoneConfigs",
                                "count": "[length(parameters('privateDNSResourceIds'))]",
                                "input": {
                                  "name": "[last(split(parameters('privateDNSResourceIds')[copyIndex('privateDnsZoneConfigs')], '/'))]",
                                  "properties": {
                                    "privateDnsZoneId": "[parameters('privateDNSResourceIds')[copyIndex('privateDnsZoneConfigs')]]"
                                  }
                                }
                              }
                            ]
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Network/privateEndpoints/privateDnsZoneGroups",
                              "apiVersion": "2023-04-01",
                              "name": "[format('{0}/{1}', parameters('privateEndpointName'), parameters('name'))]",
                              "properties": {
                                "privateDnsZoneConfigs": "[variables('privateDnsZoneConfigs')]"
                              }
                            }
                          ],
                          "outputs": {
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "The name of the private endpoint DNS zone group."
                              },
                              "value": "[parameters('name')]"
                            },
                            "resourceId": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource ID of the private endpoint DNS zone group."
                              },
                              "value": "[resourceId('Microsoft.Network/privateEndpoints/privateDnsZoneGroups', parameters('privateEndpointName'), parameters('name'))]"
                            },
                            "resourceGroupName": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource group the private endpoint DNS zone group was deployed into."
                              },
                              "value": "[resourceGroup().name]"
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "privateEndpoint"
                      ]
                    }
                  },
                  "outputs": {
                    "resourceGroupName": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource group the private endpoint was deployed into."
                      },
                      "value": "[resourceGroup().name]"
                    },
                    "resourceId": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource ID of the private endpoint."
                      },
                      "value": "[resourceId('Microsoft.Network/privateEndpoints', parameters('name'))]"
                    },
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the private endpoint."
                      },
                      "value": "[parameters('name')]"
                    },
                    "location": {
                      "type": "string",
                      "metadata": {
                        "description": "The location the resource was deployed into."
                      },
                      "value": "[reference('privateEndpoint', '2023-04-01', 'full').location]"
                    },
                    "groupId": {
                      "type": "string",
                      "metadata": {
                        "description": "The group Id for the private endpoint Group."
                      },
                      "value": "[if(not(empty(reference('privateEndpoint').manualPrivateLinkServiceConnections)), reference('privateEndpoint').manualPrivateLinkServiceConnections[0].properties.groupIds[0], reference('privateEndpoint').privateLinkServiceConnections[0].properties.groupIds[0])]"
                    }
                  }
                }
              },
              "dependsOn": [
                "storageAccount"
              ]
            },
            "storageAccount_managementPolicies": {
              "condition": "[not(empty(coalesce(parameters('managementPolicyRules'), createArray())))]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('{0}-Storage-ManagementPolicies', uniqueString(deployment().name, parameters('location')))]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "storageAccountName": {
                    "value": "[parameters('name')]"
                  },
                  "rules": {
                    "value": "[coalesce(parameters('managementPolicyRules'), createArray())]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.28.1.47646",
                      "templateHash": "9473195527943694039"
                    },
                    "name": "Storage Account Management Policies",
                    "description": "This module deploys a Storage Account Management Policy.",
                    "owner": "Azure/module-maintainers"
                  },
                  "parameters": {
                    "storageAccountName": {
                      "type": "string",
                      "maxLength": 24,
                      "metadata": {
                        "description": "Conditional. The name of the parent Storage Account. Required if the template is used in a standalone deployment."
                      }
                    },
                    "rules": {
                      "type": "array",
                      "metadata": {
                        "description": "Required. The Storage Account ManagementPolicies Rules."
                      }
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Storage/storageAccounts/managementPolicies",
                      "apiVersion": "2023-01-01",
                      "name": "[format('{0}/{1}', parameters('storageAccountName'), 'default')]",
                      "properties": {
                        "policy": {
                          "rules": "[parameters('rules')]"
                        }
                      }
                    }
                  ],
                  "outputs": {
                    "resourceId": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource ID of the deployed management policy."
                      },
                      "value": "default"
                    },
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the deployed management policy."
                      },
                      "value": "default"
                    },
                    "resourceGroupName": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource group of the deployed management policy."
                      },
                      "value": "[resourceGroup().name]"
                    }
                  }
                }
              },
              "dependsOn": [
                "storageAccount",
                "storageAccount_blobServices"
              ]
            },
            "storageAccount_localUsers": {
              "copy": {
                "name": "storageAccount_localUsers",
                "count": "[length(parameters('localUsers'))]"
              },
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('{0}-Storage-LocalUsers-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "storageAccountName": {
                    "value": "[parameters('name')]"
                  },
                  "name": {
                    "value": "[parameters('localUsers')[copyIndex()].name]"
                  },
                  "hasSshKey": {
                    "value": "[parameters('localUsers')[copyIndex()].hasSshKey]"
                  },
                  "hasSshPassword": {
                    "value": "[parameters('localUsers')[copyIndex()].hasSshPassword]"
                  },
                  "permissionScopes": {
                    "value": "[parameters('localUsers')[copyIndex()].permissionScopes]"
                  },
                  "hasSharedKey": {
                    "value": "[tryGet(parameters('localUsers')[copyIndex()], 'hasSharedKey')]"
                  },
                  "homeDirectory": {
                    "value": "[tryGet(parameters('localUsers')[copyIndex()], 'homeDirectory')]"
                  },
                  "sshAuthorizedKeys": {
                    "value": "[tryGet(parameters('localUsers')[copyIndex()], 'sshAuthorizedKeys')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "languageVersion": "2.0",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.28.1.47646",
                      "templateHash": "14968464858285923305"
                    },
                    "name": "Storage Account Local Users",
                    "description": "This module deploys a Storage Account Local User, which is used for SFTP authentication.",
                    "owner": "Azure/module-maintainers"
                  },
                  "definitions": {
                    "sshAuthorizedKeysType": {
                      "type": "secureObject",
                      "properties": {
                        "secureList": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "description": {
                                "type": "string",
                                "nullable": true,
                                "metadata": {
                                  "description": "Optional. Description used to store the function/usage of the key."
                                }
                              },
                              "key": {
                                "type": "string",
                                "metadata": {
                                  "description": "Required. SSH public key base64 encoded. The format should be: '{keyType} {keyData}', e.g. ssh-rsa AAAABBBB."
                                }
                              }
                            }
                          },
                          "metadata": {
                            "description": "Optional. The list of SSH authorized keys."
                          }
                        }
                      },
                      "nullable": true
                    }
                  },
                  "parameters": {
                    "storageAccountName": {
                      "type": "string",
                      "maxLength": 24,
                      "metadata": {
                        "description": "Conditional. The name of the parent Storage Account. Required if the template is used in a standalone deployment."
                      }
                    },
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. The name of the local user used for SFTP Authentication."
                      }
                    },
                    "hasSharedKey": {
                      "type": "bool",
                      "defaultValue": false,
                      "metadata": {
                        "description": "Optional. Indicates whether shared key exists. Set it to false to remove existing shared key."
                      }
                    },
                    "hasSshKey": {
                      "type": "bool",
                      "metadata": {
                        "description": "Required. Indicates whether SSH key exists. Set it to false to remove existing SSH key."
                      }
                    },
                    "hasSshPassword": {
                      "type": "bool",
                      "metadata": {
                        "description": "Required. Indicates whether SSH password exists. Set it to false to remove existing SSH password."
                      }
                    },
                    "homeDirectory": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. The local user home directory."
                      }
                    },
                    "permissionScopes": {
                      "type": "array",
                      "metadata": {
                        "description": "Required. The permission scopes of the local user."
                      }
                    },
                    "sshAuthorizedKeys": {
                      "$ref": "#/definitions/sshAuthorizedKeysType",
                      "metadata": {
                        "description": "Optional. The local user SSH authorized keys for SFTP."
                      }
                    }
                  },
                  "resources": {
                    "storageAccount": {
                      "existing": true,
                      "type": "Microsoft.Storage/storageAccounts",
                      "apiVersion": "2023-04-01",
                      "name": "[parameters('storageAccountName')]"
                    },
                    "localUsers": {
                      "type": "Microsoft.Storage/storageAccounts/localUsers",
                      "apiVersion": "2023-04-01",
                      "name": "[format('{0}/{1}', parameters('storageAccountName'), parameters('name'))]",
                      "properties": {
                        "hasSharedKey": "[parameters('hasSharedKey')]",
                        "hasSshKey": "[parameters('hasSshKey')]",
                        "hasSshPassword": "[parameters('hasSshPassword')]",
                        "homeDirectory": "[parameters('homeDirectory')]",
                        "permissionScopes": "[parameters('permissionScopes')]",
                        "sshAuthorizedKeys": "[tryGet(parameters('sshAuthorizedKeys'), 'secureList')]"
                      },
                      "dependsOn": [
                        "storageAccount"
                      ]
                    }
                  },
                  "outputs": {
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the deployed local user."
                      },
                      "value": "[parameters('name')]"
                    },
                    "resourceGroupName": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource group of the deployed local user."
                      },
                      "value": "[resourceGroup().name]"
                    },
                    "resourceId": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource ID of the deployed local user."
                      },
                      "value": "[resourceId('Microsoft.Storage/storageAccounts/localUsers', parameters('storageAccountName'), parameters('name'))]"
                    }
                  }
                }
              },
              "dependsOn": [
                "storageAccount"
              ]
            },
            "storageAccount_blobServices": {
              "condition": "[not(empty(parameters('blobServices')))]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('{0}-Storage-BlobServices', uniqueString(deployment().name, parameters('location')))]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "storageAccountName": {
                    "value": "[parameters('name')]"
                  },
                  "containers": {
                    "value": "[tryGet(parameters('blobServices'), 'containers')]"
                  },
                  "automaticSnapshotPolicyEnabled": {
                    "value": "[tryGet(parameters('blobServices'), 'automaticSnapshotPolicyEnabled')]"
                  },
                  "changeFeedEnabled": {
                    "value": "[tryGet(parameters('blobServices'), 'changeFeedEnabled')]"
                  },
                  "changeFeedRetentionInDays": {
                    "value": "[tryGet(parameters('blobServices'), 'changeFeedRetentionInDays')]"
                  },
                  "containerDeleteRetentionPolicyEnabled": {
                    "value": "[tryGet(parameters('blobServices'), 'containerDeleteRetentionPolicyEnabled')]"
                  },
                  "containerDeleteRetentionPolicyDays": {
                    "value": "[tryGet(parameters('blobServices'), 'containerDeleteRetentionPolicyDays')]"
                  },
                  "containerDeleteRetentionPolicyAllowPermanentDelete": {
                    "value": "[tryGet(parameters('blobServices'), 'containerDeleteRetentionPolicyAllowPermanentDelete')]"
                  },
                  "corsRules": {
                    "value": "[tryGet(parameters('blobServices'), 'corsRules')]"
                  },
                  "defaultServiceVersion": {
                    "value": "[tryGet(parameters('blobServices'), 'defaultServiceVersion')]"
                  },
                  "deleteRetentionPolicyAllowPermanentDelete": {
                    "value": "[tryGet(parameters('blobServices'), 'deleteRetentionPolicyAllowPermanentDelete')]"
                  },
                  "deleteRetentionPolicyEnabled": {
                    "value": "[tryGet(parameters('blobServices'), 'deleteRetentionPolicyEnabled')]"
                  },
                  "deleteRetentionPolicyDays": {
                    "value": "[tryGet(parameters('blobServices'), 'deleteRetentionPolicyDays')]"
                  },
                  "isVersioningEnabled": {
                    "value": "[tryGet(parameters('blobServices'), 'isVersioningEnabled')]"
                  },
                  "lastAccessTimeTrackingPolicyEnabled": {
                    "value": "[tryGet(parameters('blobServices'), 'lastAccessTimeTrackingPolicyEnabled')]"
                  },
                  "restorePolicyEnabled": {
                    "value": "[tryGet(parameters('blobServices'), 'restorePolicyEnabled')]"
                  },
                  "restorePolicyDays": {
                    "value": "[tryGet(parameters('blobServices'), 'restorePolicyDays')]"
                  },
                  "diagnosticSettings": {
                    "value": "[tryGet(parameters('blobServices'), 'diagnosticSettings')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "languageVersion": "2.0",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.28.1.47646",
                      "templateHash": "2306287879023715578"
                    },
                    "name": "Storage Account blob Services",
                    "description": "This module deploys a Storage Account Blob Service.",
                    "owner": "Azure/module-maintainers"
                  },
                  "definitions": {
                    "diagnosticSettingType": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "name": {
                            "type": "string",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. The name of diagnostic setting."
                            }
                          },
                          "logCategoriesAndGroups": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "properties": {
                                "category": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Name of a Diagnostic Log category for a resource type this setting is applied to. Set the specific logs to collect here."
                                  }
                                },
                                "categoryGroup": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Name of a Diagnostic Log category group for a resource type this setting is applied to. Set to `allLogs` to collect all logs."
                                  }
                                },
                                "enabled": {
                                  "type": "bool",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Enable or disable the category explicitly. Default is `true`."
                                  }
                                }
                              }
                            },
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. The name of logs that will be streamed. \"allLogs\" includes all possible logs for the resource. Set to `[]` to disable log collection."
                            }
                          },
                          "metricCategories": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "properties": {
                                "category": {
                                  "type": "string",
                                  "metadata": {
                                    "description": "Required. Name of a Diagnostic Metric category for a resource type this setting is applied to. Set to `AllMetrics` to collect all metrics."
                                  }
                                },
                                "enabled": {
                                  "type": "bool",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Enable or disable the category explicitly. Default is `true`."
                                  }
                                }
                              }
                            },
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. The name of logs that will be streamed. \"allLogs\" includes all possible logs for the resource. Set to `[]` to disable log collection."
                            }
                          },
                          "logAnalyticsDestinationType": {
                            "type": "string",
                            "allowedValues": [
                              "AzureDiagnostics",
                              "Dedicated"
                            ],
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. A string indicating whether the export to Log Analytics should use the default destination type, i.e. AzureDiagnostics, or use a destination type."
                            }
                          },
                          "workspaceResourceId": {
                            "type": "string",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. Resource ID of the diagnostic log analytics workspace. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                            }
                          },
                          "storageAccountResourceId": {
                            "type": "string",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. Resource ID of the diagnostic storage account. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                            }
                          },
                          "eventHubAuthorizationRuleResourceId": {
                            "type": "string",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. Resource ID of the diagnostic event hub authorization rule for the Event Hubs namespace in which the event hub should be created or streamed to."
                            }
                          },
                          "eventHubName": {
                            "type": "string",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. Name of the diagnostic event hub within the namespace to which logs are streamed. Without this, an event hub is created for each log category. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                            }
                          },
                          "marketplacePartnerResourceId": {
                            "type": "string",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. The full ARM resource ID of the Marketplace resource to which you would like to send Diagnostic Logs."
                            }
                          }
                        }
                      },
                      "nullable": true
                    }
                  },
                  "parameters": {
                    "storageAccountName": {
                      "type": "string",
                      "maxLength": 24,
                      "metadata": {
                        "description": "Conditional. The name of the parent Storage Account. Required if the template is used in a standalone deployment."
                      }
                    },
                    "automaticSnapshotPolicyEnabled": {
                      "type": "bool",
                      "defaultValue": false,
                      "metadata": {
                        "description": "Optional. Automatic Snapshot is enabled if set to true."
                      }
                    },
                    "changeFeedEnabled": {
                      "type": "bool",
                      "defaultValue": false,
                      "metadata": {
                        "description": "Optional. The blob service properties for change feed events. Indicates whether change feed event logging is enabled for the Blob service."
                      }
                    },
                    "changeFeedRetentionInDays": {
                      "type": "int",
                      "nullable": true,
                      "minValue": 1,
                      "maxValue": 146000,
                      "metadata": {
                        "description": "Optional. Indicates whether change feed event logging is enabled for the Blob service. Indicates the duration of changeFeed retention in days. If left blank, it indicates an infinite retention of the change feed."
                      }
                    },
                    "containerDeleteRetentionPolicyEnabled": {
                      "type": "bool",
                      "defaultValue": true,
                      "metadata": {
                        "description": "Optional. The blob service properties for container soft delete. Indicates whether DeleteRetentionPolicy is enabled."
                      }
                    },
                    "containerDeleteRetentionPolicyDays": {
                      "type": "int",
                      "nullable": true,
                      "minValue": 1,
                      "maxValue": 365,
                      "metadata": {
                        "description": "Optional. Indicates the number of days that the deleted item should be retained."
                      }
                    },
                    "containerDeleteRetentionPolicyAllowPermanentDelete": {
                      "type": "bool",
                      "defaultValue": false,
                      "metadata": {
                        "description": "Optional. This property when set to true allows deletion of the soft deleted blob versions and snapshots. This property cannot be used with blob restore policy. This property only applies to blob service and does not apply to containers or file share."
                      }
                    },
                    "corsRules": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "Optional. Specifies CORS rules for the Blob service. You can include up to five CorsRule elements in the request. If no CorsRule elements are included in the request body, all CORS rules will be deleted, and CORS will be disabled for the Blob service."
                      }
                    },
                    "defaultServiceVersion": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Indicates the default version to use for requests to the Blob service if an incoming request's version is not specified. Possible values include version 2008-10-27 and all more recent versions."
                      }
                    },
                    "deleteRetentionPolicyEnabled": {
                      "type": "bool",
                      "defaultValue": true,
                      "metadata": {
                        "description": "Optional. The blob service properties for blob soft delete."
                      }
                    },
                    "deleteRetentionPolicyDays": {
                      "type": "int",
                      "defaultValue": 7,
                      "minValue": 1,
                      "maxValue": 365,
                      "metadata": {
                        "description": "Optional. Indicates the number of days that the deleted blob should be retained."
                      }
                    },
                    "deleteRetentionPolicyAllowPermanentDelete": {
                      "type": "bool",
                      "defaultValue": false,
                      "metadata": {
                        "description": "Optional. This property when set to true allows deletion of the soft deleted blob versions and snapshots. This property cannot be used with blob restore policy. This property only applies to blob service and does not apply to containers or file share."
                      }
                    },
                    "isVersioningEnabled": {
                      "type": "bool",
                      "defaultValue": false,
                      "metadata": {
                        "description": "Optional. Use versioning to automatically maintain previous versions of your blobs."
                      }
                    },
                    "lastAccessTimeTrackingPolicyEnabled": {
                      "type": "bool",
                      "defaultValue": false,
                      "metadata": {
                        "description": "Optional. The blob service property to configure last access time based tracking policy. When set to true last access time based tracking is enabled."
                      }
                    },
                    "restorePolicyEnabled": {
                      "type": "bool",
                      "defaultValue": false,
                      "metadata": {
                        "description": "Optional. The blob service properties for blob restore policy. If point-in-time restore is enabled, then versioning, change feed, and blob soft delete must also be enabled."
                      }
                    },
                    "restorePolicyDays": {
                      "type": "int",
                      "defaultValue": 6,
                      "minValue": 1,
                      "metadata": {
                        "description": "Optional. How long this blob can be restored. It should be less than DeleteRetentionPolicy days."
                      }
                    },
                    "containers": {
                      "type": "array",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Blob containers to create."
                      }
                    },
                    "diagnosticSettings": {
                      "$ref": "#/definitions/diagnosticSettingType",
                      "metadata": {
                        "description": "Optional. The diagnostic settings of the service."
                      }
                    }
                  },
                  "variables": {
                    "name": "default"
                  },
                  "resources": {
                    "storageAccount": {
                      "existing": true,
                      "type": "Microsoft.Storage/storageAccounts",
                      "apiVersion": "2022-09-01",
                      "name": "[parameters('storageAccountName')]"
                    },
                    "blobServices": {
                      "type": "Microsoft.Storage/storageAccounts/blobServices",
                      "apiVersion": "2022-09-01",
                      "name": "[format('{0}/{1}', parameters('storageAccountName'), variables('name'))]",
                      "properties": {
                        "automaticSnapshotPolicyEnabled": "[parameters('automaticSnapshotPolicyEnabled')]",
                        "changeFeed": "[if(parameters('changeFeedEnabled'), createObject('enabled', true(), 'retentionInDays', parameters('changeFeedRetentionInDays')), null())]",
                        "containerDeleteRetentionPolicy": {
                          "enabled": "[parameters('containerDeleteRetentionPolicyEnabled')]",
                          "days": "[parameters('containerDeleteRetentionPolicyDays')]",
                          "allowPermanentDelete": "[if(equals(parameters('containerDeleteRetentionPolicyEnabled'), true()), parameters('containerDeleteRetentionPolicyAllowPermanentDelete'), null())]"
                        },
                        "cors": {
                          "corsRules": "[parameters('corsRules')]"
                        },
                        "defaultServiceVersion": "[if(not(empty(parameters('defaultServiceVersion'))), parameters('defaultServiceVersion'), null())]",
                        "deleteRetentionPolicy": {
                          "enabled": "[parameters('deleteRetentionPolicyEnabled')]",
                          "days": "[parameters('deleteRetentionPolicyDays')]",
                          "allowPermanentDelete": "[if(and(parameters('deleteRetentionPolicyEnabled'), parameters('deleteRetentionPolicyAllowPermanentDelete')), true(), null())]"
                        },
                        "isVersioningEnabled": "[parameters('isVersioningEnabled')]",
                        "lastAccessTimeTrackingPolicy": "[if(not(equals(reference('storageAccount', '2022-09-01', 'full').kind, 'Storage')), createObject('enable', parameters('lastAccessTimeTrackingPolicyEnabled'), 'name', if(equals(parameters('lastAccessTimeTrackingPolicyEnabled'), true()), 'AccessTimeTracking', null()), 'trackingGranularityInDays', if(equals(parameters('lastAccessTimeTrackingPolicyEnabled'), true()), 1, null())), null())]",
                        "restorePolicy": "[if(parameters('restorePolicyEnabled'), createObject('enabled', true(), 'days', parameters('restorePolicyDays')), null())]"
                      },
                      "dependsOn": [
                        "storageAccount"
                      ]
                    },
                    "blobServices_diagnosticSettings": {
                      "copy": {
                        "name": "blobServices_diagnosticSettings",
                        "count": "[length(coalesce(parameters('diagnosticSettings'), createArray()))]"
                      },
                      "type": "Microsoft.Insights/diagnosticSettings",
                      "apiVersion": "2021-05-01-preview",
                      "scope": "[format('Microsoft.Storage/storageAccounts/{0}/blobServices/{1}', parameters('storageAccountName'), variables('name'))]",
                      "name": "[coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'name'), format('{0}-diagnosticSettings', variables('name')))]",
                      "properties": {
                        "copy": [
                          {
                            "name": "metrics",
                            "count": "[length(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'metricCategories'), createArray(createObject('category', 'AllMetrics'))))]",
                            "input": {
                              "category": "[coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'metricCategories'), createArray(createObject('category', 'AllMetrics')))[copyIndex('metrics')].category]",
                              "enabled": "[coalesce(tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'metricCategories'), createArray(createObject('category', 'AllMetrics')))[copyIndex('metrics')], 'enabled'), true())]",
                              "timeGrain": null
                            }
                          },
                          {
                            "name": "logs",
                            "count": "[length(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs'))))]",
                            "input": {
                              "categoryGroup": "[tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs')))[copyIndex('logs')], 'categoryGroup')]",
                              "category": "[tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs')))[copyIndex('logs')], 'category')]",
                              "enabled": "[coalesce(tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs')))[copyIndex('logs')], 'enabled'), true())]"
                            }
                          }
                        ],
                        "storageAccountId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'storageAccountResourceId')]",
                        "workspaceId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'workspaceResourceId')]",
                        "eventHubAuthorizationRuleId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'eventHubAuthorizationRuleResourceId')]",
                        "eventHubName": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'eventHubName')]",
                        "marketplacePartnerId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'marketplacePartnerResourceId')]",
                        "logAnalyticsDestinationType": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logAnalyticsDestinationType')]"
                      },
                      "dependsOn": [
                        "blobServices"
                      ]
                    },
                    "blobServices_container": {
                      "copy": {
                        "name": "blobServices_container",
                        "count": "[length(coalesce(parameters('containers'), createArray()))]"
                      },
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('{0}-Container-{1}', deployment().name, copyIndex())]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "storageAccountName": {
                            "value": "[parameters('storageAccountName')]"
                          },
                          "name": {
                            "value": "[coalesce(parameters('containers'), createArray())[copyIndex()].name]"
                          },
                          "defaultEncryptionScope": {
                            "value": "[tryGet(coalesce(parameters('containers'), createArray())[copyIndex()], 'defaultEncryptionScope')]"
                          },
                          "denyEncryptionScopeOverride": {
                            "value": "[tryGet(coalesce(parameters('containers'), createArray())[copyIndex()], 'denyEncryptionScopeOverride')]"
                          },
                          "enableNfsV3AllSquash": {
                            "value": "[tryGet(coalesce(parameters('containers'), createArray())[copyIndex()], 'enableNfsV3AllSquash')]"
                          },
                          "enableNfsV3RootSquash": {
                            "value": "[tryGet(coalesce(parameters('containers'), createArray())[copyIndex()], 'enableNfsV3RootSquash')]"
                          },
                          "immutableStorageWithVersioningEnabled": {
                            "value": "[tryGet(coalesce(parameters('containers'), createArray())[copyIndex()], 'immutableStorageWithVersioningEnabled')]"
                          },
                          "metadata": {
                            "value": "[tryGet(coalesce(parameters('containers'), createArray())[copyIndex()], 'metadata')]"
                          },
                          "publicAccess": {
                            "value": "[tryGet(coalesce(parameters('containers'), createArray())[copyIndex()], 'publicAccess')]"
                          },
                          "roleAssignments": {
                            "value": "[tryGet(coalesce(parameters('containers'), createArray())[copyIndex()], 'roleAssignments')]"
                          },
                          "immutabilityPolicyProperties": {
                            "value": "[tryGet(coalesce(parameters('containers'), createArray())[copyIndex()], 'immutabilityPolicyProperties')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "languageVersion": "2.0",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.28.1.47646",
                              "templateHash": "7045309160947869799"
                            },
                            "name": "Storage Account Blob Containers",
                            "description": "This module deploys a Storage Account Blob Container.",
                            "owner": "Azure/module-maintainers"
                          },
                          "definitions": {
                            "roleAssignmentType": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "roleDefinitionIdOrName": {
                                    "type": "string",
                                    "metadata": {
                                      "description": "Required. The role to assign. You can provide either the display name of the role definition, the role definition GUID, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                                    }
                                  },
                                  "principalId": {
                                    "type": "string",
                                    "metadata": {
                                      "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
                                    }
                                  },
                                  "principalType": {
                                    "type": "string",
                                    "allowedValues": [
                                      "Device",
                                      "ForeignGroup",
                                      "Group",
                                      "ServicePrincipal",
                                      "User"
                                    ],
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The principal type of the assigned principal ID."
                                    }
                                  },
                                  "description": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The description of the role assignment."
                                    }
                                  },
                                  "condition": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\"."
                                    }
                                  },
                                  "conditionVersion": {
                                    "type": "string",
                                    "allowedValues": [
                                      "2.0"
                                    ],
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. Version of the condition."
                                    }
                                  },
                                  "delegatedManagedIdentityResourceId": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The Resource Id of the delegated managed identity resource."
                                    }
                                  }
                                }
                              },
                              "nullable": true
                            }
                          },
                          "parameters": {
                            "storageAccountName": {
                              "type": "string",
                              "maxLength": 24,
                              "metadata": {
                                "description": "Conditional. The name of the parent Storage Account. Required if the template is used in a standalone deployment."
                              }
                            },
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The name of the storage container to deploy."
                              }
                            },
                            "defaultEncryptionScope": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. Default the container to use specified encryption scope for all writes."
                              }
                            },
                            "denyEncryptionScopeOverride": {
                              "type": "bool",
                              "defaultValue": false,
                              "metadata": {
                                "description": "Optional. Block override of encryption scope from the container default."
                              }
                            },
                            "enableNfsV3AllSquash": {
                              "type": "bool",
                              "defaultValue": false,
                              "metadata": {
                                "description": "Optional. Enable NFSv3 all squash on blob container."
                              }
                            },
                            "enableNfsV3RootSquash": {
                              "type": "bool",
                              "defaultValue": false,
                              "metadata": {
                                "description": "Optional. Enable NFSv3 root squash on blob container."
                              }
                            },
                            "immutableStorageWithVersioningEnabled": {
                              "type": "bool",
                              "defaultValue": false,
                              "metadata": {
                                "description": "Optional. This is an immutable property, when set to true it enables object level immutability at the container level. The property is immutable and can only be set to true at the container creation time. Existing containers must undergo a migration process."
                              }
                            },
                            "immutabilityPolicyName": {
                              "type": "string",
                              "defaultValue": "default",
                              "metadata": {
                                "description": "Optional. Name of the immutable policy."
                              }
                            },
                            "immutabilityPolicyProperties": {
                              "type": "object",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Configure immutability policy."
                              }
                            },
                            "metadata": {
                              "type": "object",
                              "defaultValue": {},
                              "metadata": {
                                "description": "Optional. A name-value pair to associate with the container as metadata."
                              }
                            },
                            "publicAccess": {
                              "type": "string",
                              "defaultValue": "None",
                              "allowedValues": [
                                "Container",
                                "Blob",
                                "None"
                              ],
                              "metadata": {
                                "description": "Optional. Specifies whether data in the container may be accessed publicly and the level of access."
                              }
                            },
                            "roleAssignments": {
                              "$ref": "#/definitions/roleAssignmentType",
                              "metadata": {
                                "description": "Optional. Array of role assignments to create."
                              }
                            }
                          },
                          "variables": {
                            "builtInRoleNames": {
                              "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                              "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
                              "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
                              "Reader and Data Access": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'c12c1c16-33a1-487b-954d-41c89c60f349')]",
                              "Role Based Access Control Administrator (Preview)": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]",
                              "Storage Account Backup Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'e5e2a7ff-d759-4cd2-bb51-3152d37e2eb1')]",
                              "Storage Account Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '17d1049b-9a84-46fb-8f53-869881c3d3ab')]",
                              "Storage Account Key Operator Service Role": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '81a9662b-bebf-436f-a333-f67b29880f12')]",
                              "Storage Blob Data Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'ba92f5b4-2d11-453d-a403-e96b0029c9fe')]",
                              "Storage Blob Data Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b7e6dc6d-f1e8-4753-8033-0f276bb0955b')]",
                              "Storage Blob Data Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '2a2b9908-6ea1-4ae2-8e65-a410df84e7d1')]",
                              "Storage Blob Delegator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'db58b8e5-c6ad-4a2a-8342-4190687cbf4a')]",
                              "User Access Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18d7d88d-d35e-4fb5-a5c3-7773c20a72d9')]"
                            }
                          },
                          "resources": {
                            "storageAccount::blobServices": {
                              "existing": true,
                              "type": "Microsoft.Storage/storageAccounts/blobServices",
                              "apiVersion": "2022-09-01",
                              "name": "[format('{0}/{1}', parameters('storageAccountName'), 'default')]",
                              "dependsOn": [
                                "storageAccount"
                              ]
                            },
                            "storageAccount": {
                              "existing": true,
                              "type": "Microsoft.Storage/storageAccounts",
                              "apiVersion": "2022-09-01",
                              "name": "[parameters('storageAccountName')]"
                            },
                            "container": {
                              "type": "Microsoft.Storage/storageAccounts/blobServices/containers",
                              "apiVersion": "2022-09-01",
                              "name": "[format('{0}/{1}/{2}', parameters('storageAccountName'), 'default', parameters('name'))]",
                              "properties": {
                                "defaultEncryptionScope": "[if(not(empty(parameters('defaultEncryptionScope'))), parameters('defaultEncryptionScope'), null())]",
                                "denyEncryptionScopeOverride": "[if(equals(parameters('denyEncryptionScopeOverride'), true()), parameters('denyEncryptionScopeOverride'), null())]",
                                "enableNfsV3AllSquash": "[if(equals(parameters('enableNfsV3AllSquash'), true()), parameters('enableNfsV3AllSquash'), null())]",
                                "enableNfsV3RootSquash": "[if(equals(parameters('enableNfsV3RootSquash'), true()), parameters('enableNfsV3RootSquash'), null())]",
                                "immutableStorageWithVersioning": "[if(equals(parameters('immutableStorageWithVersioningEnabled'), true()), createObject('enabled', parameters('immutableStorageWithVersioningEnabled')), null())]",
                                "metadata": "[parameters('metadata')]",
                                "publicAccess": "[parameters('publicAccess')]"
                              },
                              "dependsOn": [
                                "storageAccount::blobServices"
                              ]
                            },
                            "container_roleAssignments": {
                              "copy": {
                                "name": "container_roleAssignments",
                                "count": "[length(coalesce(parameters('roleAssignments'), createArray()))]"
                              },
                              "type": "Microsoft.Authorization/roleAssignments",
                              "apiVersion": "2022-04-01",
                              "scope": "[format('Microsoft.Storage/storageAccounts/{0}/blobServices/{1}/containers/{2}', parameters('storageAccountName'), 'default', parameters('name'))]",
                              "name": "[guid(resourceId('Microsoft.Storage/storageAccounts/blobServices/containers', parameters('storageAccountName'), 'default', parameters('name')), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].principalId, coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName)]",
                              "properties": {
                                "roleDefinitionId": "[if(contains(variables('builtInRoleNames'), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName), variables('builtInRoleNames')[coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName], if(contains(coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName, '/providers/Microsoft.Authorization/roleDefinitions/'), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName, subscriptionResourceId('Microsoft.Authorization/roleDefinitions', coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName)))]",
                                "principalId": "[coalesce(parameters('roleAssignments'), createArray())[copyIndex()].principalId]",
                                "description": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'description')]",
                                "principalType": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'principalType')]",
                                "condition": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'condition')]",
                                "conditionVersion": "[if(not(empty(tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'condition'))), coalesce(tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'conditionVersion'), '2.0'), null())]",
                                "delegatedManagedIdentityResourceId": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'delegatedManagedIdentityResourceId')]"
                              },
                              "dependsOn": [
                                "container"
                              ]
                            },
                            "immutabilityPolicy": {
                              "condition": "[not(empty(coalesce(parameters('immutabilityPolicyProperties'), createObject())))]",
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2022-09-01",
                              "name": "[parameters('immutabilityPolicyName')]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "storageAccountName": {
                                    "value": "[parameters('storageAccountName')]"
                                  },
                                  "containerName": {
                                    "value": "[parameters('name')]"
                                  },
                                  "immutabilityPeriodSinceCreationInDays": {
                                    "value": "[tryGet(parameters('immutabilityPolicyProperties'), 'immutabilityPeriodSinceCreationInDays')]"
                                  },
                                  "allowProtectedAppendWrites": {
                                    "value": "[tryGet(parameters('immutabilityPolicyProperties'), 'allowProtectedAppendWrites')]"
                                  },
                                  "allowProtectedAppendWritesAll": {
                                    "value": "[tryGet(parameters('immutabilityPolicyProperties'), 'allowProtectedAppendWritesAll')]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.28.1.47646",
                                      "templateHash": "2543276032744560941"
                                    },
                                    "name": "Storage Account Blob Container Immutability Policies",
                                    "description": "This module deploys a Storage Account Blob Container Immutability Policy.",
                                    "owner": "Azure/module-maintainers"
                                  },
                                  "parameters": {
                                    "storageAccountName": {
                                      "type": "string",
                                      "maxLength": 24,
                                      "metadata": {
                                        "description": "Conditional. The name of the parent Storage Account. Required if the template is used in a standalone deployment."
                                      }
                                    },
                                    "containerName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Conditional. The name of the parent container to apply the policy to. Required if the template is used in a standalone deployment."
                                      }
                                    },
                                    "immutabilityPeriodSinceCreationInDays": {
                                      "type": "int",
                                      "defaultValue": 365,
                                      "metadata": {
                                        "description": "Optional. The immutability period for the blobs in the container since the policy creation, in days."
                                      }
                                    },
                                    "allowProtectedAppendWrites": {
                                      "type": "bool",
                                      "defaultValue": true,
                                      "metadata": {
                                        "description": "Optional. This property can only be changed for unlocked time-based retention policies. When enabled, new blocks can be written to an append blob while maintaining immutability protection and compliance. Only new blocks can be added and any existing blocks cannot be modified or deleted. This property cannot be changed with ExtendImmutabilityPolicy API."
                                      }
                                    },
                                    "allowProtectedAppendWritesAll": {
                                      "type": "bool",
                                      "defaultValue": true,
                                      "metadata": {
                                        "description": "Optional. This property can only be changed for unlocked time-based retention policies. When enabled, new blocks can be written to both \"Append and Block Blobs\" while maintaining immutability protection and compliance. Only new blocks can be added and any existing blocks cannot be modified or deleted. This property cannot be changed with ExtendImmutabilityPolicy API. The \"allowProtectedAppendWrites\" and \"allowProtectedAppendWritesAll\" properties are mutually exclusive."
                                      }
                                    }
                                  },
                                  "resources": [
                                    {
                                      "type": "Microsoft.Storage/storageAccounts/blobServices/containers/immutabilityPolicies",
                                      "apiVersion": "2022-09-01",
                                      "name": "[format('{0}/{1}/{2}/{3}', parameters('storageAccountName'), 'default', parameters('containerName'), 'default')]",
                                      "properties": {
                                        "immutabilityPeriodSinceCreationInDays": "[parameters('immutabilityPeriodSinceCreationInDays')]",
                                        "allowProtectedAppendWrites": "[parameters('allowProtectedAppendWrites')]",
                                        "allowProtectedAppendWritesAll": "[parameters('allowProtectedAppendWritesAll')]"
                                      }
                                    }
                                  ],
                                  "outputs": {
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The name of the deployed immutability policy."
                                      },
                                      "value": "default"
                                    },
                                    "resourceId": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The resource ID of the deployed immutability policy."
                                      },
                                      "value": "[resourceId('Microsoft.Storage/storageAccounts/blobServices/containers/immutabilityPolicies', parameters('storageAccountName'), 'default', parameters('containerName'), 'default')]"
                                    },
                                    "resourceGroupName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The resource group of the deployed immutability policy."
                                      },
                                      "value": "[resourceGroup().name]"
                                    }
                                  }
                                }
                              },
                              "dependsOn": [
                                "container",
                                "storageAccount"
                              ]
                            }
                          },
                          "outputs": {
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "The name of the deployed container."
                              },
                              "value": "[parameters('name')]"
                            },
                            "resourceId": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource ID of the deployed container."
                              },
                              "value": "[resourceId('Microsoft.Storage/storageAccounts/blobServices/containers', parameters('storageAccountName'), 'default', parameters('name'))]"
                            },
                            "resourceGroupName": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource group of the deployed container."
                              },
                              "value": "[resourceGroup().name]"
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "storageAccount"
                      ]
                    }
                  },
                  "outputs": {
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the deployed blob service."
                      },
                      "value": "[variables('name')]"
                    },
                    "resourceId": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource ID of the deployed blob service."
                      },
                      "value": "[resourceId('Microsoft.Storage/storageAccounts/blobServices', parameters('storageAccountName'), variables('name'))]"
                    },
                    "resourceGroupName": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the deployed blob service."
                      },
                      "value": "[resourceGroup().name]"
                    }
                  }
                }
              },
              "dependsOn": [
                "storageAccount"
              ]
            },
            "storageAccount_fileServices": {
              "condition": "[not(empty(parameters('fileServices')))]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('{0}-Storage-FileServices', uniqueString(deployment().name, parameters('location')))]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "storageAccountName": {
                    "value": "[parameters('name')]"
                  },
                  "diagnosticSettings": {
                    "value": "[tryGet(parameters('fileServices'), 'diagnosticSettings')]"
                  },
                  "protocolSettings": {
                    "value": "[tryGet(parameters('fileServices'), 'protocolSettings')]"
                  },
                  "shareDeleteRetentionPolicy": {
                    "value": "[tryGet(parameters('fileServices'), 'shareDeleteRetentionPolicy')]"
                  },
                  "shares": {
                    "value": "[tryGet(parameters('fileServices'), 'shares')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "languageVersion": "2.0",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.28.1.47646",
                      "templateHash": "7463227074634701879"
                    },
                    "name": "Storage Account File Share Services",
                    "description": "This module deploys a Storage Account File Share Service.",
                    "owner": "Azure/module-maintainers"
                  },
                  "definitions": {
                    "diagnosticSettingType": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "name": {
                            "type": "string",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. The name of diagnostic setting."
                            }
                          },
                          "logCategoriesAndGroups": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "properties": {
                                "category": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Name of a Diagnostic Log category for a resource type this setting is applied to. Set the specific logs to collect here."
                                  }
                                },
                                "categoryGroup": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Name of a Diagnostic Log category group for a resource type this setting is applied to. Set to `allLogs` to collect all logs."
                                  }
                                },
                                "enabled": {
                                  "type": "bool",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Enable or disable the category explicitly. Default is `true`."
                                  }
                                }
                              }
                            },
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. The name of logs that will be streamed. \"allLogs\" includes all possible logs for the resource. Set to `[]` to disable log collection."
                            }
                          },
                          "metricCategories": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "properties": {
                                "category": {
                                  "type": "string",
                                  "metadata": {
                                    "description": "Required. Name of a Diagnostic Metric category for a resource type this setting is applied to. Set to `AllMetrics` to collect all metrics."
                                  }
                                },
                                "enabled": {
                                  "type": "bool",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Enable or disable the category explicitly. Default is `true`."
                                  }
                                }
                              }
                            },
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. The name of logs that will be streamed. \"allLogs\" includes all possible logs for the resource. Set to `[]` to disable log collection."
                            }
                          },
                          "logAnalyticsDestinationType": {
                            "type": "string",
                            "allowedValues": [
                              "AzureDiagnostics",
                              "Dedicated"
                            ],
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. A string indicating whether the export to Log Analytics should use the default destination type, i.e. AzureDiagnostics, or use a destination type."
                            }
                          },
                          "workspaceResourceId": {
                            "type": "string",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. Resource ID of the diagnostic log analytics workspace. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                            }
                          },
                          "storageAccountResourceId": {
                            "type": "string",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. Resource ID of the diagnostic storage account. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                            }
                          },
                          "eventHubAuthorizationRuleResourceId": {
                            "type": "string",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. Resource ID of the diagnostic event hub authorization rule for the Event Hubs namespace in which the event hub should be created or streamed to."
                            }
                          },
                          "eventHubName": {
                            "type": "string",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. Name of the diagnostic event hub within the namespace to which logs are streamed. Without this, an event hub is created for each log category. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                            }
                          },
                          "marketplacePartnerResourceId": {
                            "type": "string",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. The full ARM resource ID of the Marketplace resource to which you would like to send Diagnostic Logs."
                            }
                          }
                        }
                      },
                      "nullable": true
                    }
                  },
                  "parameters": {
                    "storageAccountName": {
                      "type": "string",
                      "maxLength": 24,
                      "metadata": {
                        "description": "Conditional. The name of the parent Storage Account. Required if the template is used in a standalone deployment."
                      }
                    },
                    "name": {
                      "type": "string",
                      "defaultValue": "default",
                      "metadata": {
                        "description": "Optional. The name of the file service."
                      }
                    },
                    "protocolSettings": {
                      "type": "object",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Optional. Protocol settings for file service."
                      }
                    },
                    "shareDeleteRetentionPolicy": {
                      "type": "object",
                      "defaultValue": {
                        "enabled": true,
                        "days": 7
                      },
                      "metadata": {
                        "description": "Optional. The service properties for soft delete."
                      }
                    },
                    "diagnosticSettings": {
                      "$ref": "#/definitions/diagnosticSettingType",
                      "metadata": {
                        "description": "Optional. The diagnostic settings of the service."
                      }
                    },
                    "shares": {
                      "type": "array",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. File shares to create."
                      }
                    }
                  },
                  "resources": {
                    "storageAccount": {
                      "existing": true,
                      "type": "Microsoft.Storage/storageAccounts",
                      "apiVersion": "2023-04-01",
                      "name": "[parameters('storageAccountName')]"
                    },
                    "fileServices": {
                      "type": "Microsoft.Storage/storageAccounts/fileServices",
                      "apiVersion": "2023-04-01",
                      "name": "[format('{0}/{1}', parameters('storageAccountName'), parameters('name'))]",
                      "properties": {
                        "protocolSettings": "[parameters('protocolSettings')]",
                        "shareDeleteRetentionPolicy": "[parameters('shareDeleteRetentionPolicy')]"
                      },
                      "dependsOn": [
                        "storageAccount"
                      ]
                    },
                    "fileServices_diagnosticSettings": {
                      "copy": {
                        "name": "fileServices_diagnosticSettings",
                        "count": "[length(coalesce(parameters('diagnosticSettings'), createArray()))]"
                      },
                      "type": "Microsoft.Insights/diagnosticSettings",
                      "apiVersion": "2021-05-01-preview",
                      "scope": "[format('Microsoft.Storage/storageAccounts/{0}/fileServices/{1}', parameters('storageAccountName'), parameters('name'))]",
                      "name": "[coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'name'), format('{0}-diagnosticSettings', parameters('name')))]",
                      "properties": {
                        "copy": [
                          {
                            "name": "metrics",
                            "count": "[length(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'metricCategories'), createArray(createObject('category', 'AllMetrics'))))]",
                            "input": {
                              "category": "[coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'metricCategories'), createArray(createObject('category', 'AllMetrics')))[copyIndex('metrics')].category]",
                              "enabled": "[coalesce(tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'metricCategories'), createArray(createObject('category', 'AllMetrics')))[copyIndex('metrics')], 'enabled'), true())]",
                              "timeGrain": null
                            }
                          },
                          {
                            "name": "logs",
                            "count": "[length(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs'))))]",
                            "input": {
                              "categoryGroup": "[tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs')))[copyIndex('logs')], 'categoryGroup')]",
                              "category": "[tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs')))[copyIndex('logs')], 'category')]",
                              "enabled": "[coalesce(tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs')))[copyIndex('logs')], 'enabled'), true())]"
                            }
                          }
                        ],
                        "storageAccountId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'storageAccountResourceId')]",
                        "workspaceId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'workspaceResourceId')]",
                        "eventHubAuthorizationRuleId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'eventHubAuthorizationRuleResourceId')]",
                        "eventHubName": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'eventHubName')]",
                        "marketplacePartnerId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'marketplacePartnerResourceId')]",
                        "logAnalyticsDestinationType": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logAnalyticsDestinationType')]"
                      },
                      "dependsOn": [
                        "fileServices"
                      ]
                    },
                    "fileServices_shares": {
                      "copy": {
                        "name": "fileServices_shares",
                        "count": "[length(coalesce(parameters('shares'), createArray()))]"
                      },
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('{0}-shares-{1}', deployment().name, copyIndex())]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "storageAccountName": {
                            "value": "[parameters('storageAccountName')]"
                          },
                          "fileServicesName": {
                            "value": "[parameters('name')]"
                          },
                          "name": {
                            "value": "[coalesce(parameters('shares'), createArray())[copyIndex()].name]"
                          },
                          "accessTier": {
                            "value": "[coalesce(tryGet(coalesce(parameters('shares'), createArray())[copyIndex()], 'accessTier'), if(equals(reference('storageAccount', '2023-04-01', 'full').kind, 'FileStorage'), 'Premium', 'TransactionOptimized'))]"
                          },
                          "enabledProtocols": {
                            "value": "[tryGet(coalesce(parameters('shares'), createArray())[copyIndex()], 'enabledProtocols')]"
                          },
                          "rootSquash": {
                            "value": "[tryGet(coalesce(parameters('shares'), createArray())[copyIndex()], 'rootSquash')]"
                          },
                          "shareQuota": {
                            "value": "[tryGet(coalesce(parameters('shares'), createArray())[copyIndex()], 'shareQuota')]"
                          },
                          "roleAssignments": {
                            "value": "[tryGet(coalesce(parameters('shares'), createArray())[copyIndex()], 'roleAssignments')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "languageVersion": "2.0",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.28.1.47646",
                              "templateHash": "1342480740201032357"
                            },
                            "name": "Storage Account File Shares",
                            "description": "This module deploys a Storage Account File Share.",
                            "owner": "Azure/module-maintainers"
                          },
                          "definitions": {
                            "roleAssignmentType": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "roleDefinitionIdOrName": {
                                    "type": "string",
                                    "metadata": {
                                      "description": "Required. The role to assign. You can provide either the display name of the role definition, the role definition GUID, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                                    }
                                  },
                                  "principalId": {
                                    "type": "string",
                                    "metadata": {
                                      "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
                                    }
                                  },
                                  "principalType": {
                                    "type": "string",
                                    "allowedValues": [
                                      "Device",
                                      "ForeignGroup",
                                      "Group",
                                      "ServicePrincipal",
                                      "User"
                                    ],
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The principal type of the assigned principal ID."
                                    }
                                  },
                                  "description": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The description of the role assignment."
                                    }
                                  },
                                  "condition": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\"."
                                    }
                                  },
                                  "conditionVersion": {
                                    "type": "string",
                                    "allowedValues": [
                                      "2.0"
                                    ],
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. Version of the condition."
                                    }
                                  },
                                  "delegatedManagedIdentityResourceId": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The Resource Id of the delegated managed identity resource."
                                    }
                                  }
                                }
                              },
                              "nullable": true
                            }
                          },
                          "parameters": {
                            "storageAccountName": {
                              "type": "string",
                              "maxLength": 24,
                              "metadata": {
                                "description": "Conditional. The name of the parent Storage Account. Required if the template is used in a standalone deployment."
                              }
                            },
                            "fileServicesName": {
                              "type": "string",
                              "defaultValue": "default",
                              "metadata": {
                                "description": "Conditional. The name of the parent file service. Required if the template is used in a standalone deployment."
                              }
                            },
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The name of the file share to create."
                              }
                            },
                            "accessTier": {
                              "type": "string",
                              "defaultValue": "TransactionOptimized",
                              "allowedValues": [
                                "Premium",
                                "Hot",
                                "Cool",
                                "TransactionOptimized"
                              ],
                              "metadata": {
                                "description": "Conditional. Access tier for specific share. Required if the Storage Account kind is set to FileStorage (should be set to \"Premium\"). GpV2 account can choose between TransactionOptimized (default), Hot, and Cool."
                              }
                            },
                            "shareQuota": {
                              "type": "int",
                              "defaultValue": 5120,
                              "metadata": {
                                "description": "Optional. The maximum size of the share, in gigabytes. Must be greater than 0, and less than or equal to 5120 (5TB). For Large File Shares, the maximum size is 102400 (100TB)."
                              }
                            },
                            "enabledProtocols": {
                              "type": "string",
                              "defaultValue": "SMB",
                              "allowedValues": [
                                "NFS",
                                "SMB"
                              ],
                              "metadata": {
                                "description": "Optional. The authentication protocol that is used for the file share. Can only be specified when creating a share."
                              }
                            },
                            "rootSquash": {
                              "type": "string",
                              "defaultValue": "NoRootSquash",
                              "allowedValues": [
                                "AllSquash",
                                "NoRootSquash",
                                "RootSquash"
                              ],
                              "metadata": {
                                "description": "Optional. Permissions for NFS file shares are enforced by the client OS rather than the Azure Files service. Toggling the root squash behavior reduces the rights of the root user for NFS shares."
                              }
                            },
                            "roleAssignments": {
                              "$ref": "#/definitions/roleAssignmentType",
                              "metadata": {
                                "description": "Optional. Array of role assignments to create."
                              }
                            }
                          },
                          "resources": {
                            "storageAccount::fileService": {
                              "existing": true,
                              "type": "Microsoft.Storage/storageAccounts/fileServices",
                              "apiVersion": "2023-04-01",
                              "name": "[format('{0}/{1}', parameters('storageAccountName'), parameters('fileServicesName'))]",
                              "dependsOn": [
                                "storageAccount"
                              ]
                            },
                            "storageAccount": {
                              "existing": true,
                              "type": "Microsoft.Storage/storageAccounts",
                              "apiVersion": "2023-04-01",
                              "name": "[parameters('storageAccountName')]"
                            },
                            "fileShare": {
                              "type": "Microsoft.Storage/storageAccounts/fileServices/shares",
                              "apiVersion": "2023-01-01",
                              "name": "[format('{0}/{1}/{2}', parameters('storageAccountName'), parameters('fileServicesName'), parameters('name'))]",
                              "properties": {
                                "accessTier": "[parameters('accessTier')]",
                                "shareQuota": "[parameters('shareQuota')]",
                                "rootSquash": "[if(equals(parameters('enabledProtocols'), 'NFS'), parameters('rootSquash'), null())]",
                                "enabledProtocols": "[parameters('enabledProtocols')]"
                              },
                              "dependsOn": [
                                "storageAccount::fileService"
                              ]
                            },
                            "fileShare_roleAssignments": {
                              "condition": "[not(empty(parameters('roleAssignments')))]",
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2022-09-01",
                              "name": "[format('{0}-Share-Rbac', uniqueString(deployment().name))]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "fileShareResourceId": {
                                    "value": "[resourceId('Microsoft.Storage/storageAccounts/fileServices/shares', parameters('storageAccountName'), parameters('fileServicesName'), parameters('name'))]"
                                  },
                                  "roleAssignments": {
                                    "value": "[parameters('roleAssignments')]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.28.1.47646",
                                      "templateHash": "8779226603522513073"
                                    }
                                  },
                                  "parameters": {
                                    "roleAssignments": {
                                      "type": "array",
                                      "metadata": {
                                        "description": "Optional. Array of role assignments to create."
                                      }
                                    },
                                    "fileShareResourceId": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. The resource id of the file share to assign the roles to."
                                      }
                                    }
                                  },
                                  "variables": {
                                    "$fxv#0": {
                                      "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                      "contentVersion": "1.0.0.0",
                                      "parameters": {
                                        "scope": {
                                          "type": "string",
                                          "metadata": {
                                            "description": "Required. The scope to deploy the role assignment to."
                                          }
                                        },
                                        "name": {
                                          "type": "string",
                                          "metadata": {
                                            "description": "Required. The name of the role assignment."
                                          }
                                        },
                                        "roleDefinitionId": {
                                          "type": "string",
                                          "metadata": {
                                            "description": "Required. The role definition Id to assign."
                                          }
                                        },
                                        "principalId": {
                                          "type": "string",
                                          "metadata": {
                                            "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
                                          }
                                        },
                                        "principalType": {
                                          "type": "string",
                                          "allowedValues": [
                                            "Device",
                                            "ForeignGroup",
                                            "Group",
                                            "ServicePrincipal",
                                            "User",
                                            ""
                                          ],
                                          "defaultValue": "",
                                          "metadata": {
                                            "description": "Optional. The principal type of the assigned principal ID."
                                          }
                                        },
                                        "description": {
                                          "type": "string",
                                          "defaultValue": "",
                                          "metadata": {
                                            "description": "Optional. The description of the role assignment."
                                          }
                                        },
                                        "condition": {
                                          "type": "string",
                                          "defaultValue": "",
                                          "metadata": {
                                            "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\""
                                          }
                                        },
                                        "conditionVersion": {
                                          "type": "string",
                                          "allowedValues": [
                                            "2.0"
                                          ],
                                          "defaultValue": "2.0",
                                          "metadata": {
                                            "description": "Optional. Version of the condition."
                                          }
                                        },
                                        "delegatedManagedIdentityResourceId": {
                                          "type": "string",
                                          "defaultValue": "",
                                          "metadata": {
                                            "description": "Optional. The Resource Id of the delegated managed identity resource."
                                          }
                                        }
                                      },
                                      "resources": [
                                        {
                                          "type": "Microsoft.Authorization/roleAssignments",
                                          "apiVersion": "2022-04-01",
                                          "scope": "[[parameters('scope')]",
                                          "name": "[[parameters('name')]",
                                          "properties": {
                                            "roleDefinitionId": "[[parameters('roleDefinitionId')]",
                                            "principalId": "[[parameters('principalId')]",
                                            "description": "[[parameters('description')]",
                                            "principalType": "[[if(not(empty(parameters('principalType'))), parameters('principalType'), null())]",
                                            "condition": "[[if(not(empty(parameters('condition'))), parameters('condition'), null())]",
                                            "conditionVersion": "[[if(and(not(empty(parameters('conditionVersion'))), not(empty(parameters('condition')))), parameters('conditionVersion'), null())]",
                                            "delegatedManagedIdentityResourceId": "[[if(not(empty(parameters('delegatedManagedIdentityResourceId'))), parameters('delegatedManagedIdentityResourceId'), null())]"
                                          }
                                        }
                                      ]
                                    },
                                    "builtInRoleNames": {
                                      "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                                      "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
                                      "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
                                      "Reader and Data Access": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'c12c1c16-33a1-487b-954d-41c89c60f349')]",
                                      "Role Based Access Control Administrator (Preview)": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]",
                                      "Storage Account Backup Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'e5e2a7ff-d759-4cd2-bb51-3152d37e2eb1')]",
                                      "Storage Account Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '17d1049b-9a84-46fb-8f53-869881c3d3ab')]",
                                      "Storage Account Key Operator Service Role": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '81a9662b-bebf-436f-a333-f67b29880f12')]",
                                      "Storage File Data SMB Share Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '0c867c2a-1d8c-454a-a3db-ab2ea1bdc8bb')]",
                                      "Storage File Data SMB Share Elevated Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'a7264617-510b-434b-a828-9731dc254ea7')]",
                                      "Storage File Data SMB Share Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'aba4ae5f-2193-4029-9191-0cb91df5e314')]",
                                      "User Access Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18d7d88d-d35e-4fb5-a5c3-7773c20a72d9')]"
                                    }
                                  },
                                  "resources": [
                                    {
                                      "copy": {
                                        "name": "fileShare_roleAssignments",
                                        "count": "[length(coalesce(parameters('roleAssignments'), createArray()))]"
                                      },
                                      "type": "Microsoft.Resources/deployments",
                                      "apiVersion": "2021-04-01",
                                      "name": "[format('{0}-Share-Rbac-{1}', uniqueString(deployment().name), copyIndex())]",
                                      "properties": {
                                        "mode": "Incremental",
                                        "expressionEvaluationOptions": {
                                          "scope": "Outer"
                                        },
                                        "template": "[variables('$fxv#0')]",
                                        "parameters": {
                                          "scope": {
                                            "value": "[replace(parameters('fileShareResourceId'), '/shares/', '/fileShares/')]"
                                          },
                                          "name": {
                                            "value": "[guid(parameters('fileShareResourceId'), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].principalId, coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName, 'tyfa')]"
                                          },
                                          "roleDefinitionId": {
                                            "value": "[if(contains(variables('builtInRoleNames'), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName), variables('builtInRoleNames')[coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName], if(contains(coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName, '/providers/Microsoft.Authorization/roleDefinitions/'), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName, subscriptionResourceId('Microsoft.Authorization/roleDefinitions', coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName)))]"
                                          },
                                          "principalId": {
                                            "value": "[coalesce(parameters('roleAssignments'), createArray())[copyIndex()].principalId]"
                                          },
                                          "principalType": {
                                            "value": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'principalType')]"
                                          },
                                          "description": {
                                            "value": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'description')]"
                                          },
                                          "condition": {
                                            "value": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'condition')]"
                                          },
                                          "conditionVersion": {
                                            "value": "[if(not(empty(tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'condition'))), coalesce(tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'conditionVersion'), '2.0'), null())]"
                                          },
                                          "delegatedManagedIdentityResourceId": {
                                            "value": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'delegatedManagedIdentityResourceId')]"
                                          }
                                        }
                                      }
                                    }
                                  ]
                                }
                              },
                              "dependsOn": [
                                "fileShare"
                              ]
                            }
                          },
                          "outputs": {
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "The name of the deployed file share."
                              },
                              "value": "[parameters('name')]"
                            },
                            "resourceId": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource ID of the deployed file share."
                              },
                              "value": "[resourceId('Microsoft.Storage/storageAccounts/fileServices/shares', parameters('storageAccountName'), parameters('fileServicesName'), parameters('name'))]"
                            },
                            "resourceGroupName": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource group of the deployed file share."
                              },
                              "value": "[resourceGroup().name]"
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "fileServices",
                        "storageAccount"
                      ]
                    }
                  },
                  "outputs": {
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the deployed file share service."
                      },
                      "value": "[parameters('name')]"
                    },
                    "resourceId": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource ID of the deployed file share service."
                      },
                      "value": "[resourceId('Microsoft.Storage/storageAccounts/fileServices', parameters('storageAccountName'), parameters('name'))]"
                    },
                    "resourceGroupName": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource group of the deployed file share service."
                      },
                      "value": "[resourceGroup().name]"
                    }
                  }
                }
              },
              "dependsOn": [
                "storageAccount"
              ]
            },
            "storageAccount_queueServices": {
              "condition": "[not(empty(parameters('queueServices')))]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('{0}-Storage-QueueServices', uniqueString(deployment().name, parameters('location')))]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "storageAccountName": {
                    "value": "[parameters('name')]"
                  },
                  "diagnosticSettings": {
                    "value": "[tryGet(parameters('queueServices'), 'diagnosticSettings')]"
                  },
                  "queues": {
                    "value": "[tryGet(parameters('queueServices'), 'queues')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "languageVersion": "2.0",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.28.1.47646",
                      "templateHash": "10678250016540336570"
                    },
                    "name": "Storage Account Queue Services",
                    "description": "This module deploys a Storage Account Queue Service.",
                    "owner": "Azure/module-maintainers"
                  },
                  "definitions": {
                    "diagnosticSettingType": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "name": {
                            "type": "string",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. The name of diagnostic setting."
                            }
                          },
                          "logCategoriesAndGroups": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "properties": {
                                "category": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Name of a Diagnostic Log category for a resource type this setting is applied to. Set the specific logs to collect here."
                                  }
                                },
                                "categoryGroup": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Name of a Diagnostic Log category group for a resource type this setting is applied to. Set to `allLogs` to collect all logs."
                                  }
                                },
                                "enabled": {
                                  "type": "bool",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Enable or disable the category explicitly. Default is `true`."
                                  }
                                }
                              }
                            },
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. The name of logs that will be streamed. \"allLogs\" includes all possible logs for the resource. Set to `[]` to disable log collection."
                            }
                          },
                          "metricCategories": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "properties": {
                                "category": {
                                  "type": "string",
                                  "metadata": {
                                    "description": "Required. Name of a Diagnostic Metric category for a resource type this setting is applied to. Set to `AllMetrics` to collect all metrics."
                                  }
                                },
                                "enabled": {
                                  "type": "bool",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Enable or disable the category explicitly. Default is `true`."
                                  }
                                }
                              }
                            },
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. The name of logs that will be streamed. \"allLogs\" includes all possible logs for the resource. Set to `[]` to disable log collection."
                            }
                          },
                          "logAnalyticsDestinationType": {
                            "type": "string",
                            "allowedValues": [
                              "AzureDiagnostics",
                              "Dedicated"
                            ],
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. A string indicating whether the export to Log Analytics should use the default destination type, i.e. AzureDiagnostics, or use a destination type."
                            }
                          },
                          "workspaceResourceId": {
                            "type": "string",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. Resource ID of the diagnostic log analytics workspace. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                            }
                          },
                          "storageAccountResourceId": {
                            "type": "string",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. Resource ID of the diagnostic storage account. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                            }
                          },
                          "eventHubAuthorizationRuleResourceId": {
                            "type": "string",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. Resource ID of the diagnostic event hub authorization rule for the Event Hubs namespace in which the event hub should be created or streamed to."
                            }
                          },
                          "eventHubName": {
                            "type": "string",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. Name of the diagnostic event hub within the namespace to which logs are streamed. Without this, an event hub is created for each log category. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                            }
                          },
                          "marketplacePartnerResourceId": {
                            "type": "string",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. The full ARM resource ID of the Marketplace resource to which you would like to send Diagnostic Logs."
                            }
                          }
                        }
                      },
                      "nullable": true
                    }
                  },
                  "parameters": {
                    "storageAccountName": {
                      "type": "string",
                      "maxLength": 24,
                      "metadata": {
                        "description": "Conditional. The name of the parent Storage Account. Required if the template is used in a standalone deployment."
                      }
                    },
                    "queues": {
                      "type": "array",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Queues to create."
                      }
                    },
                    "diagnosticSettings": {
                      "$ref": "#/definitions/diagnosticSettingType",
                      "metadata": {
                        "description": "Optional. The diagnostic settings of the service."
                      }
                    }
                  },
                  "variables": {
                    "name": "default"
                  },
                  "resources": {
                    "storageAccount": {
                      "existing": true,
                      "type": "Microsoft.Storage/storageAccounts",
                      "apiVersion": "2023-04-01",
                      "name": "[parameters('storageAccountName')]"
                    },
                    "queueServices": {
                      "type": "Microsoft.Storage/storageAccounts/queueServices",
                      "apiVersion": "2023-04-01",
                      "name": "[format('{0}/{1}', parameters('storageAccountName'), variables('name'))]",
                      "properties": {},
                      "dependsOn": [
                        "storageAccount"
                      ]
                    },
                    "queueServices_diagnosticSettings": {
                      "copy": {
                        "name": "queueServices_diagnosticSettings",
                        "count": "[length(coalesce(parameters('diagnosticSettings'), createArray()))]"
                      },
                      "type": "Microsoft.Insights/diagnosticSettings",
                      "apiVersion": "2021-05-01-preview",
                      "scope": "[format('Microsoft.Storage/storageAccounts/{0}/queueServices/{1}', parameters('storageAccountName'), variables('name'))]",
                      "name": "[coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'name'), format('{0}-diagnosticSettings', variables('name')))]",
                      "properties": {
                        "copy": [
                          {
                            "name": "metrics",
                            "count": "[length(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'metricCategories'), createArray(createObject('category', 'AllMetrics'))))]",
                            "input": {
                              "category": "[coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'metricCategories'), createArray(createObject('category', 'AllMetrics')))[copyIndex('metrics')].category]",
                              "enabled": "[coalesce(tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'metricCategories'), createArray(createObject('category', 'AllMetrics')))[copyIndex('metrics')], 'enabled'), true())]",
                              "timeGrain": null
                            }
                          },
                          {
                            "name": "logs",
                            "count": "[length(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs'))))]",
                            "input": {
                              "categoryGroup": "[tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs')))[copyIndex('logs')], 'categoryGroup')]",
                              "category": "[tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs')))[copyIndex('logs')], 'category')]",
                              "enabled": "[coalesce(tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs')))[copyIndex('logs')], 'enabled'), true())]"
                            }
                          }
                        ],
                        "storageAccountId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'storageAccountResourceId')]",
                        "workspaceId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'workspaceResourceId')]",
                        "eventHubAuthorizationRuleId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'eventHubAuthorizationRuleResourceId')]",
                        "eventHubName": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'eventHubName')]",
                        "marketplacePartnerId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'marketplacePartnerResourceId')]",
                        "logAnalyticsDestinationType": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logAnalyticsDestinationType')]"
                      },
                      "dependsOn": [
                        "queueServices"
                      ]
                    },
                    "queueServices_queues": {
                      "copy": {
                        "name": "queueServices_queues",
                        "count": "[length(coalesce(parameters('queues'), createArray()))]"
                      },
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('{0}-Queue-{1}', deployment().name, copyIndex())]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "storageAccountName": {
                            "value": "[parameters('storageAccountName')]"
                          },
                          "name": {
                            "value": "[coalesce(parameters('queues'), createArray())[copyIndex()].name]"
                          },
                          "metadata": {
                            "value": "[tryGet(coalesce(parameters('queues'), createArray())[copyIndex()], 'metadata')]"
                          },
                          "roleAssignments": {
                            "value": "[tryGet(coalesce(parameters('queues'), createArray())[copyIndex()], 'roleAssignments')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "languageVersion": "2.0",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.28.1.47646",
                              "templateHash": "13487964166280180730"
                            },
                            "name": "Storage Account Queues",
                            "description": "This module deploys a Storage Account Queue.",
                            "owner": "Azure/module-maintainers"
                          },
                          "definitions": {
                            "roleAssignmentType": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "roleDefinitionIdOrName": {
                                    "type": "string",
                                    "metadata": {
                                      "description": "Required. The role to assign. You can provide either the display name of the role definition, the role definition GUID, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                                    }
                                  },
                                  "principalId": {
                                    "type": "string",
                                    "metadata": {
                                      "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
                                    }
                                  },
                                  "principalType": {
                                    "type": "string",
                                    "allowedValues": [
                                      "Device",
                                      "ForeignGroup",
                                      "Group",
                                      "ServicePrincipal",
                                      "User"
                                    ],
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The principal type of the assigned principal ID."
                                    }
                                  },
                                  "description": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The description of the role assignment."
                                    }
                                  },
                                  "condition": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\"."
                                    }
                                  },
                                  "conditionVersion": {
                                    "type": "string",
                                    "allowedValues": [
                                      "2.0"
                                    ],
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. Version of the condition."
                                    }
                                  },
                                  "delegatedManagedIdentityResourceId": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The Resource Id of the delegated managed identity resource."
                                    }
                                  }
                                }
                              },
                              "nullable": true
                            }
                          },
                          "parameters": {
                            "storageAccountName": {
                              "type": "string",
                              "maxLength": 24,
                              "metadata": {
                                "description": "Conditional. The name of the parent Storage Account. Required if the template is used in a standalone deployment."
                              }
                            },
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The name of the storage queue to deploy."
                              }
                            },
                            "metadata": {
                              "type": "object",
                              "defaultValue": {},
                              "metadata": {
                                "description": "Required. A name-value pair that represents queue metadata."
                              }
                            },
                            "roleAssignments": {
                              "$ref": "#/definitions/roleAssignmentType",
                              "metadata": {
                                "description": "Optional. Array of role assignments to create."
                              }
                            }
                          },
                          "variables": {
                            "builtInRoleNames": {
                              "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                              "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
                              "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
                              "Reader and Data Access": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'c12c1c16-33a1-487b-954d-41c89c60f349')]",
                              "Role Based Access Control Administrator (Preview)": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]",
                              "Storage Account Backup Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'e5e2a7ff-d759-4cd2-bb51-3152d37e2eb1')]",
                              "Storage Account Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '17d1049b-9a84-46fb-8f53-869881c3d3ab')]",
                              "Storage Account Key Operator Service Role": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '81a9662b-bebf-436f-a333-f67b29880f12')]",
                              "Storage Queue Data Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '974c5e8b-45b9-4653-ba55-5f855dd0fb88')]",
                              "Storage Queue Data Message Processor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8a0f0c08-91a1-4084-bc3d-661d67233fed')]",
                              "Storage Queue Data Message Sender": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'c6a89b2d-59bc-44d0-9896-0f6e12d7b80a')]",
                              "Storage Queue Data Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '19e7f393-937e-4f77-808e-94535e297925')]",
                              "User Access Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18d7d88d-d35e-4fb5-a5c3-7773c20a72d9')]"
                            }
                          },
                          "resources": {
                            "storageAccount::queueServices": {
                              "existing": true,
                              "type": "Microsoft.Storage/storageAccounts/queueServices",
                              "apiVersion": "2023-04-01",
                              "name": "[format('{0}/{1}', parameters('storageAccountName'), 'default')]",
                              "dependsOn": [
                                "storageAccount"
                              ]
                            },
                            "storageAccount": {
                              "existing": true,
                              "type": "Microsoft.Storage/storageAccounts",
                              "apiVersion": "2023-04-01",
                              "name": "[parameters('storageAccountName')]"
                            },
                            "queue": {
                              "type": "Microsoft.Storage/storageAccounts/queueServices/queues",
                              "apiVersion": "2023-04-01",
                              "name": "[format('{0}/{1}/{2}', parameters('storageAccountName'), 'default', parameters('name'))]",
                              "properties": {
                                "metadata": "[parameters('metadata')]"
                              },
                              "dependsOn": [
                                "storageAccount::queueServices"
                              ]
                            },
                            "queue_roleAssignments": {
                              "copy": {
                                "name": "queue_roleAssignments",
                                "count": "[length(coalesce(parameters('roleAssignments'), createArray()))]"
                              },
                              "type": "Microsoft.Authorization/roleAssignments",
                              "apiVersion": "2022-04-01",
                              "scope": "[format('Microsoft.Storage/storageAccounts/{0}/queueServices/{1}/queues/{2}', parameters('storageAccountName'), 'default', parameters('name'))]",
                              "name": "[guid(resourceId('Microsoft.Storage/storageAccounts/queueServices/queues', parameters('storageAccountName'), 'default', parameters('name')), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].principalId, coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName)]",
                              "properties": {
                                "roleDefinitionId": "[if(contains(variables('builtInRoleNames'), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName), variables('builtInRoleNames')[coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName], if(contains(coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName, '/providers/Microsoft.Authorization/roleDefinitions/'), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName, subscriptionResourceId('Microsoft.Authorization/roleDefinitions', coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName)))]",
                                "principalId": "[coalesce(parameters('roleAssignments'), createArray())[copyIndex()].principalId]",
                                "description": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'description')]",
                                "principalType": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'principalType')]",
                                "condition": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'condition')]",
                                "conditionVersion": "[if(not(empty(tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'condition'))), coalesce(tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'conditionVersion'), '2.0'), null())]",
                                "delegatedManagedIdentityResourceId": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'delegatedManagedIdentityResourceId')]"
                              },
                              "dependsOn": [
                                "queue"
                              ]
                            }
                          },
                          "outputs": {
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "The name of the deployed queue."
                              },
                              "value": "[parameters('name')]"
                            },
                            "resourceId": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource ID of the deployed queue."
                              },
                              "value": "[resourceId('Microsoft.Storage/storageAccounts/queueServices/queues', parameters('storageAccountName'), 'default', parameters('name'))]"
                            },
                            "resourceGroupName": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource group of the deployed queue."
                              },
                              "value": "[resourceGroup().name]"
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "storageAccount"
                      ]
                    }
                  },
                  "outputs": {
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the deployed file share service."
                      },
                      "value": "[variables('name')]"
                    },
                    "resourceId": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource ID of the deployed file share service."
                      },
                      "value": "[resourceId('Microsoft.Storage/storageAccounts/queueServices', parameters('storageAccountName'), variables('name'))]"
                    },
                    "resourceGroupName": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource group of the deployed file share service."
                      },
                      "value": "[resourceGroup().name]"
                    }
                  }
                }
              },
              "dependsOn": [
                "storageAccount"
              ]
            },
            "storageAccount_tableServices": {
              "condition": "[not(empty(parameters('tableServices')))]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('{0}-Storage-TableServices', uniqueString(deployment().name, parameters('location')))]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "storageAccountName": {
                    "value": "[parameters('name')]"
                  },
                  "diagnosticSettings": {
                    "value": "[tryGet(parameters('tableServices'), 'diagnosticSettings')]"
                  },
                  "tables": {
                    "value": "[tryGet(parameters('tableServices'), 'tables')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "languageVersion": "2.0",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.28.1.47646",
                      "templateHash": "16839054392438941735"
                    },
                    "name": "Storage Account Table Services",
                    "description": "This module deploys a Storage Account Table Service.",
                    "owner": "Azure/module-maintainers"
                  },
                  "definitions": {
                    "diagnosticSettingType": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "name": {
                            "type": "string",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. The name of diagnostic setting."
                            }
                          },
                          "logCategoriesAndGroups": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "properties": {
                                "category": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Name of a Diagnostic Log category for a resource type this setting is applied to. Set the specific logs to collect here."
                                  }
                                },
                                "categoryGroup": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Name of a Diagnostic Log category group for a resource type this setting is applied to. Set to `allLogs` to collect all logs."
                                  }
                                },
                                "enabled": {
                                  "type": "bool",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Enable or disable the category explicitly. Default is `true`."
                                  }
                                }
                              }
                            },
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. The name of logs that will be streamed. \"allLogs\" includes all possible logs for the resource. Set to `[]` to disable log collection."
                            }
                          },
                          "metricCategories": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "properties": {
                                "category": {
                                  "type": "string",
                                  "metadata": {
                                    "description": "Required. Name of a Diagnostic Metric category for a resource type this setting is applied to. Set to `AllMetrics` to collect all metrics."
                                  }
                                },
                                "enabled": {
                                  "type": "bool",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Enable or disable the category explicitly. Default is `true`."
                                  }
                                }
                              }
                            },
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. The name of logs that will be streamed. \"allLogs\" includes all possible logs for the resource. Set to `[]` to disable log collection."
                            }
                          },
                          "logAnalyticsDestinationType": {
                            "type": "string",
                            "allowedValues": [
                              "AzureDiagnostics",
                              "Dedicated"
                            ],
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. A string indicating whether the export to Log Analytics should use the default destination type, i.e. AzureDiagnostics, or use a destination type."
                            }
                          },
                          "workspaceResourceId": {
                            "type": "string",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. Resource ID of the diagnostic log analytics workspace. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                            }
                          },
                          "storageAccountResourceId": {
                            "type": "string",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. Resource ID of the diagnostic storage account. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                            }
                          },
                          "eventHubAuthorizationRuleResourceId": {
                            "type": "string",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. Resource ID of the diagnostic event hub authorization rule for the Event Hubs namespace in which the event hub should be created or streamed to."
                            }
                          },
                          "eventHubName": {
                            "type": "string",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. Name of the diagnostic event hub within the namespace to which logs are streamed. Without this, an event hub is created for each log category. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                            }
                          },
                          "marketplacePartnerResourceId": {
                            "type": "string",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. The full ARM resource ID of the Marketplace resource to which you would like to send Diagnostic Logs."
                            }
                          }
                        }
                      },
                      "nullable": true
                    }
                  },
                  "parameters": {
                    "storageAccountName": {
                      "type": "string",
                      "maxLength": 24,
                      "metadata": {
                        "description": "Conditional. The name of the parent Storage Account. Required if the template is used in a standalone deployment."
                      }
                    },
                    "tables": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "Optional. tables to create."
                      }
                    },
                    "diagnosticSettings": {
                      "$ref": "#/definitions/diagnosticSettingType",
                      "metadata": {
                        "description": "Optional. The diagnostic settings of the service."
                      }
                    }
                  },
                  "variables": {
                    "name": "default"
                  },
                  "resources": {
                    "storageAccount": {
                      "existing": true,
                      "type": "Microsoft.Storage/storageAccounts",
                      "apiVersion": "2023-04-01",
                      "name": "[parameters('storageAccountName')]"
                    },
                    "tableServices": {
                      "type": "Microsoft.Storage/storageAccounts/tableServices",
                      "apiVersion": "2023-04-01",
                      "name": "[format('{0}/{1}', parameters('storageAccountName'), variables('name'))]",
                      "properties": {},
                      "dependsOn": [
                        "storageAccount"
                      ]
                    },
                    "tableServices_diagnosticSettings": {
                      "copy": {
                        "name": "tableServices_diagnosticSettings",
                        "count": "[length(coalesce(parameters('diagnosticSettings'), createArray()))]"
                      },
                      "type": "Microsoft.Insights/diagnosticSettings",
                      "apiVersion": "2021-05-01-preview",
                      "scope": "[format('Microsoft.Storage/storageAccounts/{0}/tableServices/{1}', parameters('storageAccountName'), variables('name'))]",
                      "name": "[coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'name'), format('{0}-diagnosticSettings', variables('name')))]",
                      "properties": {
                        "copy": [
                          {
                            "name": "metrics",
                            "count": "[length(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'metricCategories'), createArray(createObject('category', 'AllMetrics'))))]",
                            "input": {
                              "category": "[coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'metricCategories'), createArray(createObject('category', 'AllMetrics')))[copyIndex('metrics')].category]",
                              "enabled": "[coalesce(tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'metricCategories'), createArray(createObject('category', 'AllMetrics')))[copyIndex('metrics')], 'enabled'), true())]",
                              "timeGrain": null
                            }
                          },
                          {
                            "name": "logs",
                            "count": "[length(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs'))))]",
                            "input": {
                              "categoryGroup": "[tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs')))[copyIndex('logs')], 'categoryGroup')]",
                              "category": "[tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs')))[copyIndex('logs')], 'category')]",
                              "enabled": "[coalesce(tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs')))[copyIndex('logs')], 'enabled'), true())]"
                            }
                          }
                        ],
                        "storageAccountId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'storageAccountResourceId')]",
                        "workspaceId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'workspaceResourceId')]",
                        "eventHubAuthorizationRuleId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'eventHubAuthorizationRuleResourceId')]",
                        "eventHubName": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'eventHubName')]",
                        "marketplacePartnerId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'marketplacePartnerResourceId')]",
                        "logAnalyticsDestinationType": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logAnalyticsDestinationType')]"
                      },
                      "dependsOn": [
                        "tableServices"
                      ]
                    },
                    "tableServices_tables": {
                      "copy": {
                        "name": "tableServices_tables",
                        "count": "[length(parameters('tables'))]"
                      },
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('{0}-Table-{1}', deployment().name, copyIndex())]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "name": {
                            "value": "[parameters('tables')[copyIndex()].name]"
                          },
                          "storageAccountName": {
                            "value": "[parameters('storageAccountName')]"
                          },
                          "roleAssignments": {
                            "value": "[tryGet(parameters('tables')[copyIndex()], 'roleAssignments')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "languageVersion": "2.0",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.28.1.47646",
                              "templateHash": "3177845984945141330"
                            },
                            "name": "Storage Account Table",
                            "description": "This module deploys a Storage Account Table.",
                            "owner": "Azure/module-maintainers"
                          },
                          "definitions": {
                            "roleAssignmentType": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "roleDefinitionIdOrName": {
                                    "type": "string",
                                    "metadata": {
                                      "description": "Required. The role to assign. You can provide either the display name of the role definition, the role definition GUID, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                                    }
                                  },
                                  "principalId": {
                                    "type": "string",
                                    "metadata": {
                                      "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
                                    }
                                  },
                                  "principalType": {
                                    "type": "string",
                                    "allowedValues": [
                                      "Device",
                                      "ForeignGroup",
                                      "Group",
                                      "ServicePrincipal",
                                      "User"
                                    ],
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The principal type of the assigned principal ID."
                                    }
                                  },
                                  "description": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The description of the role assignment."
                                    }
                                  },
                                  "condition": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\"."
                                    }
                                  },
                                  "conditionVersion": {
                                    "type": "string",
                                    "allowedValues": [
                                      "2.0"
                                    ],
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. Version of the condition."
                                    }
                                  },
                                  "delegatedManagedIdentityResourceId": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The Resource Id of the delegated managed identity resource."
                                    }
                                  }
                                }
                              },
                              "nullable": true
                            }
                          },
                          "parameters": {
                            "storageAccountName": {
                              "type": "string",
                              "maxLength": 24,
                              "metadata": {
                                "description": "Conditional. The name of the parent Storage Account. Required if the template is used in a standalone deployment."
                              }
                            },
                            "roleAssignments": {
                              "$ref": "#/definitions/roleAssignmentType",
                              "metadata": {
                                "description": "Optional. Array of role assignments to create."
                              }
                            },
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. Name of the table."
                              }
                            }
                          },
                          "variables": {
                            "builtInRoleNames": {
                              "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                              "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
                              "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
                              "Reader and Data Access": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'c12c1c16-33a1-487b-954d-41c89c60f349')]",
                              "Role Based Access Control Administrator (Preview)": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]",
                              "Storage Account Backup Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'e5e2a7ff-d759-4cd2-bb51-3152d37e2eb1')]",
                              "Storage Account Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '17d1049b-9a84-46fb-8f53-869881c3d3ab')]",
                              "Storage Account Key Operator Service Role": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '81a9662b-bebf-436f-a333-f67b29880f12')]",
                              "Storage Table Data Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '0a9a7e1f-b9d0-4cc4-a60d-0319b160aaa3')]",
                              "Storage Table Data Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '76199698-9eea-4c19-bc75-cec21354c6b6')]",
                              "User Access Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18d7d88d-d35e-4fb5-a5c3-7773c20a72d9')]"
                            }
                          },
                          "resources": {
                            "storageAccount::tableServices": {
                              "existing": true,
                              "type": "Microsoft.Storage/storageAccounts/tableServices",
                              "apiVersion": "2023-04-01",
                              "name": "[format('{0}/{1}', parameters('storageAccountName'), 'default')]",
                              "dependsOn": [
                                "storageAccount"
                              ]
                            },
                            "storageAccount": {
                              "existing": true,
                              "type": "Microsoft.Storage/storageAccounts",
                              "apiVersion": "2023-04-01",
                              "name": "[parameters('storageAccountName')]"
                            },
                            "table": {
                              "type": "Microsoft.Storage/storageAccounts/tableServices/tables",
                              "apiVersion": "2023-04-01",
                              "name": "[format('{0}/{1}/{2}', parameters('storageAccountName'), 'default', parameters('name'))]",
                              "dependsOn": [
                                "storageAccount::tableServices"
                              ]
                            },
                            "table_roleAssignments": {
                              "copy": {
                                "name": "table_roleAssignments",
                                "count": "[length(coalesce(parameters('roleAssignments'), createArray()))]"
                              },
                              "type": "Microsoft.Authorization/roleAssignments",
                              "apiVersion": "2022-04-01",
                              "scope": "[format('Microsoft.Storage/storageAccounts/{0}/tableServices/{1}/tables/{2}', parameters('storageAccountName'), 'default', parameters('name'))]",
                              "name": "[guid(resourceId('Microsoft.Storage/storageAccounts/tableServices/tables', parameters('storageAccountName'), 'default', parameters('name')), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].principalId, coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName)]",
                              "properties": {
                                "roleDefinitionId": "[if(contains(variables('builtInRoleNames'), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName), variables('builtInRoleNames')[coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName], if(contains(coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName, '/providers/Microsoft.Authorization/roleDefinitions/'), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName, subscriptionResourceId('Microsoft.Authorization/roleDefinitions', coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName)))]",
                                "principalId": "[coalesce(parameters('roleAssignments'), createArray())[copyIndex()].principalId]",
                                "description": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'description')]",
                                "principalType": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'principalType')]",
                                "condition": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'condition')]",
                                "conditionVersion": "[if(not(empty(tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'condition'))), coalesce(tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'conditionVersion'), '2.0'), null())]",
                                "delegatedManagedIdentityResourceId": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'delegatedManagedIdentityResourceId')]"
                              },
                              "dependsOn": [
                                "table"
                              ]
                            }
                          },
                          "outputs": {
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "The name of the deployed file share service."
                              },
                              "value": "[parameters('name')]"
                            },
                            "resourceId": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource ID of the deployed file share service."
                              },
                              "value": "[resourceId('Microsoft.Storage/storageAccounts/tableServices/tables', parameters('storageAccountName'), 'default', parameters('name'))]"
                            },
                            "resourceGroupName": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource group of the deployed file share service."
                              },
                              "value": "[resourceGroup().name]"
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "storageAccount"
                      ]
                    }
                  },
                  "outputs": {
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the deployed table service."
                      },
                      "value": "[variables('name')]"
                    },
                    "resourceId": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource ID of the deployed table service."
                      },
                      "value": "[resourceId('Microsoft.Storage/storageAccounts/tableServices', parameters('storageAccountName'), variables('name'))]"
                    },
                    "resourceGroupName": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource group of the deployed table service."
                      },
                      "value": "[resourceGroup().name]"
                    }
                  }
                }
              },
              "dependsOn": [
                "storageAccount"
              ]
            }
          },
          "outputs": {
            "resourceId": {
              "type": "string",
              "metadata": {
                "description": "The resource ID of the deployed storage account."
              },
              "value": "[resourceId('Microsoft.Storage/storageAccounts', parameters('name'))]"
            },
            "name": {
              "type": "string",
              "metadata": {
                "description": "The name of the deployed storage account."
              },
              "value": "[parameters('name')]"
            },
            "resourceGroupName": {
              "type": "string",
              "metadata": {
                "description": "The resource group of the deployed storage account."
              },
              "value": "[resourceGroup().name]"
            },
            "primaryBlobEndpoint": {
              "type": "string",
              "metadata": {
                "description": "The primary blob endpoint reference if blob services are deployed."
              },
              "value": "[if(and(not(empty(parameters('blobServices'))), contains(parameters('blobServices'), 'containers')), reference(format('Microsoft.Storage/storageAccounts/{0}', parameters('name')), '2019-04-01').primaryEndpoints.blob, '')]"
            },
            "systemAssignedMIPrincipalId": {
              "type": "string",
              "metadata": {
                "description": "The principal ID of the system assigned identity."
              },
              "value": "[coalesce(tryGet(tryGet(reference('storageAccount', '2022-09-01', 'full'), 'identity'), 'principalId'), '')]"
            },
            "location": {
              "type": "string",
              "metadata": {
                "description": "The location the resource was deployed into."
              },
              "value": "[reference('storageAccount', '2022-09-01', 'full').location]"
            }
          }
        }
      },
      "dependsOn": [
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), format('{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName')))), 'Microsoft.Resources/deployments', 'uami')]",
        "[subscriptionResourceId('Microsoft.Resources/resourceGroups', if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), format('{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName'))))]"
      ]
    }
  ],
  "outputs": {
    "AZURE_LOCATION": {
      "type": "string",
      "value": "[parameters('location')]"
    },
    "AZURE_TENANT_ID": {
      "type": "string",
      "value": "[tenant().tenantId]"
    },
    "AZURE_CLIENT_ID": {
      "type": "string",
      "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), format('{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName')))), 'Microsoft.Resources/deployments', 'uami'), '2022-09-01').outputs.clientId.value]"
    },
    "AZURE_RESOURCE_GROUP": {
      "type": "string",
      "value": "[if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), format('{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName')))]"
    },
    "RESOURCE_GROUP_ID": {
      "type": "string",
      "value": "[subscriptionResourceId('Microsoft.Resources/resourceGroups', if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), format('{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName'))))]"
    },
    "AZURE_USER_ASSIGNED_IDENTITY_ID": {
      "type": "string",
      "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), format('{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName')))), 'Microsoft.Resources/deployments', 'uami'), '2022-09-01').outputs.identityId.value]"
    },
    "AZURE_OPENAI_ENDPOINT": {
      "type": "string",
      "value": "[if(not(empty(parameters('openAiRealtimeName'))), format('https://{0}.openai.azure.com', parameters('openAiRealtimeName')), reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), format('{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName')))), 'Microsoft.Resources/deployments', 'openai'), '2022-09-01').outputs.endpoint.value)]"
    },
    "AZURE_OPENAI_EMBEDDING_ENDPOINT": {
      "type": "string",
      "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), format('{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName')))), 'Microsoft.Resources/deployments', 'openai'), '2022-09-01').outputs.endpoint.value]"
    },
    "AZURE_OPENAI_EMBEDDING_DEPLOYMENT": {
      "type": "string",
      "value": "[parameters('embedModel')]"
    },
    "AZURE_OPENAI_EMBEDDING_MODEL": {
      "type": "string",
      "value": "[parameters('embedModel')]"
    },
    "AZURE_OPENAI_GPT4o_REALTIME_DEPLOYMENT": {
      "type": "string",
      "value": "[parameters('aoaiGpt4oRealtimeModelName')]"
    },
    "AZURE_OPENAI_GPT4o_MINI_DEPLOYMENT": {
      "type": "string",
      "value": "[parameters('aoaiGpt4oMiniModelName')]"
    },
    "AZURE_SEARCH_ENDPOINT": {
      "type": "string",
      "value": "[format('https://{0}.search.windows.net', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), format('{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName')))), 'Microsoft.Resources/deployments', 'search-service'), '2022-09-01').outputs.name.value)]"
    },
    "AZURE_SEARCH_INDEX": {
      "type": "string",
      "value": "[parameters('searchIndexName')]"
    },
    "AZURE_STORAGE_ENDPOINT": {
      "type": "string",
      "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), format('{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName')))), 'Microsoft.Resources/deployments', 'storage'), '2022-09-01').outputs.primaryBlobEndpoint.value]"
    },
    "AZURE_STORAGE_ACCOUNT": {
      "type": "string",
      "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), format('{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName')))), 'Microsoft.Resources/deployments', 'storage'), '2022-09-01').outputs.name.value]"
    },
    "AZURE_STORAGE_CONNECTION_STRING": {
      "type": "string",
      "value": "[format('ResourceId=/subscriptions/{0}/resourceGroups/{1}/providers/Microsoft.Storage/storageAccounts/{2};', subscription().subscriptionId, if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), format('{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName'))), reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), format('{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName')))), 'Microsoft.Resources/deployments', 'storage'), '2022-09-01').outputs.name.value)]"
    },
    "AZURE_STORAGE_CONTAINER": {
      "type": "string",
      "value": "[variables('storageContainerName')]"
    },
    "AZURE_STORAGE_RESOURCE_GROUP": {
      "type": "string",
      "value": "[if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), format('{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName')))]"
    },
    "AZURE_CONTAINER_REGISTRY_ENDPOINT": {
      "type": "string",
      "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), format('{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName')))), 'Microsoft.Resources/deployments', 'registry'), '2022-09-01').outputs.loginServer.value]"
    },
    "SEND_EMAIL_LOGIC_APP_URL": {
      "type": "string",
      "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), format('{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName')))), 'Microsoft.Resources/deployments', 'sendMailUrl'), '2022-09-01').outputs.url.value]"
    },
    "COSMOSDB_ENDPOINT": {
      "type": "string",
      "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), format('{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName')))), 'Microsoft.Resources/deployments', 'cosmosdb'), '2022-09-01').outputs.cosmosDbEndpoint.value]"
    },
    "COSMOSDB_DATABASE": {
      "type": "string",
      "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), format('{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName')))), 'Microsoft.Resources/deployments', 'cosmosdb'), '2022-09-01').outputs.cosmosDbDatabase.value]"
    },
    "COSMOSDB_AIConversations_CONTAINER": {
      "type": "string",
      "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), format('{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName')))), 'Microsoft.Resources/deployments', 'cosmosdb'), '2022-09-01').outputs.cosmosDbAIConversationsContainer.value]"
    },
    "COSMOSDB_Customer_CONTAINER": {
      "type": "string",
      "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), format('{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName')))), 'Microsoft.Resources/deployments', 'cosmosdb'), '2022-09-01').outputs.cosmosDbCustomerContainer.value]"
    },
    "COSMOSDB_HumanConversations_CONTAINER": {
      "type": "string",
      "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), format('{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName')))), 'Microsoft.Resources/deployments', 'cosmosdb'), '2022-09-01').outputs.cosmosDbHumanConversationsContainer.value]"
    },
    "COSMOSDB_Product_CONTAINER": {
      "type": "string",
      "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), format('{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName')))), 'Microsoft.Resources/deployments', 'cosmosdb'), '2022-09-01').outputs.cosmosDbProductContainer.value]"
    },
    "COSMOSDB_Purchases_CONTAINER": {
      "type": "string",
      "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), format('{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName')))), 'Microsoft.Resources/deployments', 'cosmosdb'), '2022-09-01').outputs.cosmosDbPurchasesContainer.value]"
    },
    "COSMOSDB_ProductUrl_CONTAINER": {
      "type": "string",
      "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), format('{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName')))), 'Microsoft.Resources/deployments', 'cosmosdb'), '2022-09-01').outputs.cosmosDbProductUrlContainer.value]"
    },
    "BING_SEARCH_API_ENDPOINT": {
      "type": "string",
      "value": "[parameters('bingSearchApiEndpoint')]"
    },
    "AZURE_AI_SERVICES_ENDPOINT": {
      "type": "string",
      "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), format('{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName')))), 'Microsoft.Resources/deployments', 'aiserviceaccountDeployment'), '2022-09-01').outputs.endpoint.value]"
    },
    "AZURE_AI_SERVICES_KEY": {
      "type": "string",
      "value": "[format('@Microsoft.KeyVault(SecretUri=https://{0}.vault.azure.net/secrets/{1}-accessKey1/)', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, if(not(empty(parameters('resourceGroupName'))), parameters('resourceGroupName'), format('{0}{1}', variables('abbrs').resourcesResourceGroups, parameters('environmentName')))), 'Microsoft.Resources/deployments', 'keyVault'), '2022-09-01').outputs.name.value, variables('_accounts_aiservice_ms_name'))]"
    }
  }
}